# -*- coding: utf-8 -*-
"""

NUEventLog
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject



class NUEventLog(NURESTObject):
    """ Represents a EventLog object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUEventLog instance """

        super(NUEventLog, self).__init__()

        # Read/Write Attributes
        self.diff = None  #  Holds the results of diff between two objects of same type. - int
        self.enterprise = None  #  The enterprise name of the user who triggered this event. - int
        self.entities = None  #  List of entities associated with the event. - int
        self.entity_id = None  #  The entity id associated with this event. - int
        self.entity_parent_id = None  #  The entity parent id associated with this event. It can be null. - int
        self.entity_parent_type = None  #  Event parent entity type.  Generally reported against enterprise. - int
        self.entity_type = None  #  The entity type of this event. It may be Domain, VirtualMachine, etc., - int
        self.event_received_time = None  #  The time that event was received. - int
        self.type = None  #  The event type (CREATE, UPDATE or DELETE). - int
        self.user = None  #  The authenticated user who triggered this event. - int
        
        self.expose_attribute(local_name=u"diff", remote_name=u"diff", attribute_type=int)
        self.expose_attribute(local_name=u"enterprise", remote_name=u"enterprise", attribute_type=int)
        self.expose_attribute(local_name=u"entities", remote_name=u"entities", attribute_type=int)
        self.expose_attribute(local_name=u"entity_id", remote_name=u"entityID", attribute_type=int)
        self.expose_attribute(local_name=u"entity_parent_id", remote_name=u"entityParentID", attribute_type=int)
        self.expose_attribute(local_name=u"entity_parent_type", remote_name=u"entityParentType", attribute_type=int)
        self.expose_attribute(local_name=u"entity_type", remote_name=u"entityType", attribute_type=int)
        self.expose_attribute(local_name=u"event_received_time", remote_name=u"eventReceivedTime", attribute_type=int)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=int)
        self.expose_attribute(local_name=u"user", remote_name=u"user", attribute_type=int)
        
        # Fetchers
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"eventlog"


