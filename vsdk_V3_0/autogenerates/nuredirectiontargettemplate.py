# -*- coding: utf-8 -*-

"""
NURedirectionTargetTemplate
Template for a vporttag. Can be created only at the template level and available for all instances.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NURedirectionTargetTemplate(NURESTObject):
    """ Represents a RedirectionTargetTemplate object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a RedirectionTargetTemplate instance

        """
        super(NURedirectionTargetTemplate, self).__init__()

        # Read/Write Attributes
        
        self._redundancy_enabled = bool()
        self._trigger_type = str()
        self._description = str()
        self._name = str()
        self._end_point_type = str()
        
        self.expose_attribute(local_name=u"redundancy_enabled", remote_name=u"redundancyEnabled", attribute_type=bool)
        self.expose_attribute(local_name=u"trigger_type", remote_name=u"triggerType", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"end_point_type", remote_name=u"endPointType", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_redundancy_enabled(self):
        """ Get attribute redundancy_enabled

            Allow/Disallow redundant appliances and VIP

        """
        return self._redundancy_enabled

    def _set_redundancy_enabled(self, value):
        """ Set attribute redundancy_enabled

            Allow/Disallow redundant appliances and VIP

        """
        self._redundancy_enabled = value

    redundancy_enabled = property(_get_redundancy_enabled, _set_redundancy_enabled)
    
    def _get_trigger_type(self):
        """ Get attribute trigger_type

            Trigger type, could be NONE/GARP - THIS IS READONNLY

        """
        return self._trigger_type

    def _set_trigger_type(self, value):
        """ Set attribute trigger_type

            Trigger type, could be NONE/GARP - THIS IS READONNLY

        """
        self._trigger_type = value

    trigger_type = property(_get_trigger_type, _set_trigger_type)
    
    def _get_description(self):
        """ Get attribute description

            Description of this redirection target template

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of this redirection target template

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_name(self):
        """ Get attribute name

            Name of this redirection target template

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of this redirection target template

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_end_point_type(self):
        """ Get attribute end_point_type

            VPortTagEndPointType is an enum. It defines the type of header rewrite and forwarding performed by VRS when the endpoint is used as a PBR destination. Possible values are NONE, L3, VIRTUAL_WIRE.

        """
        return self._end_point_type

    def _set_end_point_type(self, value):
        """ Set attribute end_point_type

            VPortTagEndPointType is an enum. It defines the type of header rewrite and forwarding performed by VRS when the endpoint is used as a PBR destination. Possible values are NONE, L3, VIRTUAL_WIRE.

        """
        self._end_point_type = value

    end_point_type = property(_get_end_point_type, _set_end_point_type)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"redirectiontargettemplate"
