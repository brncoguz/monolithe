# -*- coding: utf-8 -*-
"""

NUApp
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUFlowsFetcher
from ..fetchers import NUTiersFetcher


class NUApp(NURESTObject):
    """ Represents a App object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUApp instance """

        super(NUApp, self).__init__()

        # Read/Write Attributes
        self.associated_domain_id = None  #  Domain id where the application is running. - int
        self.associated_domain_type = None  #  Type of domain (L2DOMAIN or DOMAIN). - int
        self.associated_network_object_id = None  #   - int
        self.associated_network_object_type = None  #   - int
        self.description = None  #  Description of the application. - int
        self.name = None  #  Name of the application. - int
        
        self.expose_attribute(local_name=u"associated_domain_id", remote_name=u"associatedDomainID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_domain_type", remote_name=u"associatedDomainType", attribute_type=int)
        self.expose_attribute(local_name=u"associated_network_object_id", remote_name=u"associatedNetworkObjectID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_network_object_type", remote_name=u"associatedNetworkObjectType", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        
        # Fetchers
        self.flows = []
        self.flows_fetcher = NUFlowsFetcher.fetcher_with_object(nurest_object=self, local_name=u"flows")
        self.tiers = []
        self.tiers_fetcher = NUTiersFetcher.fetcher_with_object(nurest_object=self, local_name=u"tiers")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"app"


