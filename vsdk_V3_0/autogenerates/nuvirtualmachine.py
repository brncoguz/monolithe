# -*- coding: utf-8 -*-

"""
NUVirtualMachine
Read only API that can retrieve the VMs associated with a domain, zone or subnet for mediation created VM's for REST created  VM's you need to set the additional proxy user header in http request : X-Nuage-ProxyUservalue of the header has to be either :1) enterpriseName@UserName (example : Alcatel Lucent@bob)2) external ID of user in VSD, typically is UUID generally decided by the CMS tool in questionUser needs to have CMS privileges to use proxy user header

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVMResyncsFetcher
from ..fetchers import NUVRSsFetcher
from ..fetchers import NUVMInterfacesFetcher
from ..fetchers import NUAlarmsFetcher
from bambou import NURESTObject


class NUVirtualMachine(NURESTObject):
    """ Represents a VirtualMachine object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a VirtualMachine instance

        """
        super(NUVirtualMachine, self).__init__()

        # Read/Write Attributes
        
        self._status = str()
        self._user_name = str()
        self._l2_domain_i_ds = str()
        self._uuid = str()
        self._name = str()
        self._app_name = str()
        self._interfaces = str()
        self._user_id = str()
        self._enterprise_name = str()
        self._zone_i_ds = str()
        self._enterprise_id = str()
        self._reason_type = str()
        self._resync_info = str()
        self._domain_i_ds = str()
        self._hypervisor_ip = str()
        self._subnet_i_ds = str()
        self._vrsid = str()
        
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, choices=[u'UNREACHABLE', u'SHUTDOWN', u'RUNNING', u'NOSTATE', u'LAST', u'CRASHED', u'SHUTOFF', u'UNKNOWN', u'PAUSED', u'INIT', u'DELETE_PENDING', u'BLOCKED'])
        self.expose_attribute(local_name=u"user_name", remote_name=u"userName", attribute_type=str)
        self.expose_attribute(local_name=u"l2_domain_i_ds", remote_name=u"l2DomainIDs", attribute_type=str)
        self.expose_attribute(local_name=u"uuid", remote_name=u"UUID", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"app_name", remote_name=u"appName", attribute_type=str)
        self.expose_attribute(local_name=u"interfaces", remote_name=u"interfaces", attribute_type=str)
        self.expose_attribute(local_name=u"user_id", remote_name=u"userID", attribute_type=str)
        self.expose_attribute(local_name=u"enterprise_name", remote_name=u"enterpriseName", attribute_type=str)
        self.expose_attribute(local_name=u"zone_i_ds", remote_name=u"zoneIDs", attribute_type=str)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str)
        self.expose_attribute(local_name=u"reason_type", remote_name=u"reasonType", attribute_type=str, choices=[u'MIGRATED', u'RUNNING_MIGRATION_CANCELED', u'NOSTATE_UNKNOWN', u'PAUSED_FROM_SNAPSHOT', u'SHUTDOWN_UNKNOWN', u'PAUSED_UNKNOWN', u'PAUSED_WATCHDOG', u'SHUTOFF_MIGRATED', u'RUNNING_UNKNOWN', u'PAUSED_SAVE', u'SHUTOFF_FAILED', u'NOSTATE_LAST', u'RUNNING_BOOTED', u'PAUSED_SHUTTING_DOWN', u'SHUTOFF_FROM_SNAPSHOT', u'CRASHED_UNKNOWN', u'SHUTOFF_DESTROYED', u'PAUSED_DUMP', u'UNKNOWN_VAL', u'SHUTOFF_SAVED', u'SHUTOFF_SHUTDOWN', u'SHUTOFF_UNKNOWN', u'RUNNING_UNPAUSED', u'RUNNING_FROM_SNAPSHOT', u'UNKNOWN', u'RUNNING_LAST', u'SHUTDOWN_LAST', u'SHUTDOWN_USER', u'BLOCKED_LAST', u'USER', u'RUNNING_SAVE_CANCELED', u'PAUSED_USER', u'RUNNING_MIGRATED', u'RUNNING_RESTORED', u'BLOCKED_UNKNOWN', u'LAST', u'CRASHED_LAST', u'SHUTOFF_CRASHED', u'PAUSED_MIGRATION', u'PAUSED_LAST', u'FROM_SNAPSHOT', u'SHUTOFF_LAST', u'PAUSED_IOERROR'])
        self.expose_attribute(local_name=u"resync_info", remote_name=u"resyncInfo", attribute_type=str)
        self.expose_attribute(local_name=u"domain_i_ds", remote_name=u"domainIDs", attribute_type=str)
        self.expose_attribute(local_name=u"hypervisor_ip", remote_name=u"hypervisorIP", attribute_type=str)
        self.expose_attribute(local_name=u"subnet_i_ds", remote_name=u"subnetIDs", attribute_type=str)
        self.expose_attribute(local_name=u"vrsid", remote_name=u"VRSID", attribute_type=str)
        
        # Fetchers
        
        self.resync = []
        self.resync_fetcher = NUVMResyncsFetcher.fetcher_with_entity(entity=self, local_name=u"resync")
        
        self.vrss = []
        self.vrss_fetcher = NUVRSsFetcher.fetcher_with_entity(entity=self, local_name=u"vrss")
        
        self.vminterfaces = []
        self.vminterfaces_fetcher = NUVMInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"vminterfaces")
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_status(self):
        """ Get attribute status

            Status of the VM - UNKNOWN, NOSTATE, RUNNING, BLOCKED, PAUSED, SHUTDOWN, SHUTOFF, CRASHED, LAST, UNREACHABLE, INIT, DELETE_PENDING Possible values are UNKNOWN, NOSTATE, RUNNING, BLOCKED, PAUSED, SHUTDOWN, SHUTOFF, CRASHED, LAST, UNREACHABLE, INIT, DELETE_PENDING, .

        """
        return self._status

    def _set_status(self, value):
        """ Set attribute status

            Status of the VM - UNKNOWN, NOSTATE, RUNNING, BLOCKED, PAUSED, SHUTDOWN, SHUTOFF, CRASHED, LAST, UNREACHABLE, INIT, DELETE_PENDING Possible values are UNKNOWN, NOSTATE, RUNNING, BLOCKED, PAUSED, SHUTDOWN, SHUTOFF, CRASHED, LAST, UNREACHABLE, INIT, DELETE_PENDING, .

        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_user_name(self):
        """ Get attribute user_name

            Username of the user that created this VM

        """
        return self._user_name

    def _set_user_name(self, value):
        """ Set attribute user_name

            Username of the user that created this VM

        """
        self._user_name = value

    user_name = property(_get_user_name, _set_user_name)
    
    def _get_l2_domain_i_ds(self):
        """ Get attribute l2_domain_i_ds

            Array of IDs of the l2 domain that the VM is connected to

        """
        return self._l2_domain_i_ds

    def _set_l2_domain_i_ds(self, value):
        """ Set attribute l2_domain_i_ds

            Array of IDs of the l2 domain that the VM is connected to

        """
        self._l2_domain_i_ds = value

    l2_domain_i_ds = property(_get_l2_domain_i_ds, _set_l2_domain_i_ds)
    
    def _get_uuid(self):
        """ Get attribute uuid

            UUID of the VM

        """
        return self._uuid

    def _set_uuid(self, value):
        """ Set attribute uuid

            UUID of the VM

        """
        self._uuid = value

    uuid = property(_get_uuid, _set_uuid)
    
    def _get_name(self):
        """ Get attribute name

            Name of the VM

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the VM

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_app_name(self):
        """ Get attribute app_name

            Application name that this VM belongs to

        """
        return self._app_name

    def _set_app_name(self, value):
        """ Set attribute app_name

            Application name that this VM belongs to

        """
        self._app_name = value

    app_name = property(_get_app_name, _set_app_name)
    
    def _get_interfaces(self):
        """ Get attribute interfaces

            List of VM interfaces associated with the VM

        """
        return self._interfaces

    def _set_interfaces(self, value):
        """ Set attribute interfaces

            List of VM interfaces associated with the VM

        """
        self._interfaces = value

    interfaces = property(_get_interfaces, _set_interfaces)
    
    def _get_user_id(self):
        """ Get attribute user_id

            ID of the user that created this VM

        """
        return self._user_id

    def _set_user_id(self, value):
        """ Set attribute user_id

            ID of the user that created this VM

        """
        self._user_id = value

    user_id = property(_get_user_id, _set_user_id)
    
    def _get_enterprise_name(self):
        """ Get attribute enterprise_name

            Name of the enterprise that this VM belongs to

        """
        return self._enterprise_name

    def _set_enterprise_name(self, value):
        """ Set attribute enterprise_name

            Name of the enterprise that this VM belongs to

        """
        self._enterprise_name = value

    enterprise_name = property(_get_enterprise_name, _set_enterprise_name)
    
    def _get_zone_i_ds(self):
        """ Get attribute zone_i_ds

            Array of IDs of the zone that this VM is attached to

        """
        return self._zone_i_ds

    def _set_zone_i_ds(self, value):
        """ Set attribute zone_i_ds

            Array of IDs of the zone that this VM is attached to

        """
        self._zone_i_ds = value

    zone_i_ds = property(_get_zone_i_ds, _set_zone_i_ds)
    
    def _get_enterprise_id(self):
        """ Get attribute enterprise_id

            ID of the enterprise that this VM belongs to

        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set attribute enterprise_id

            ID of the enterprise that this VM belongs to

        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_reason_type(self):
        """ Get attribute reason_type

            Reason of the event associated with the VM - UNKNOWN, NOSTATE_UNKNOWN, NOSTATE_LAST, RUNNING_UNKNOWN, RUNNING_BOOTED, RUNNING_MIGRATED, RUNNING_RESTORED, RUNNING_FROM_SNAPSHOT, RUNNING_UNPAUSED, RUNNING_MIGRATION_CANCELED, RUNNING_SAVE_CANCELED, RUNNING_LAST, BLOCKED_UNKNOWN, BLOCKED_LAST, PAUSED_UNKNOWN, PAUSED_USER, PAUSED_MIGRATION, PAUSED_SAVE, PAUSED_DUMP, PAUSED_IOERROR, PAUSED_WATCHDOG, PAUSED_FROM_SNAPSHOT, PAUSED_SHUTTING_DOWN, PAUSED_LAST, SHUTDOWN_UNKNOWN, SHUTDOWN_USER, SHUTDOWN_LAST, SHUTOFF_UNKNOWN, SHUTOFF_SHUTDOWN, SHUTOFF_DESTROYED, SHUTOFF_CRASHED, SHUTOFF_MIGRATED, SHUTOFF_SAVED, SHUTOFF_FAILED,SHUTOFF_FROM_SNAPSHOT, SHUTOFF_LAST, CRASHED_UNKNOWN, CRASHED_LAST Possible values are UNKNOWN, NOSTATE_UNKNOWN, NOSTATE_LAST, RUNNING_UNKNOWN, RUNNING_BOOTED, RUNNING_MIGRATED, RUNNING_RESTORED, RUNNING_FROM_SNAPSHOT, RUNNING_UNPAUSED, RUNNING_MIGRATION_CANCELED, RUNNING_SAVE_CANCELED, RUNNING_LAST, BLOCKED_UNKNOWN, BLOCKED_LAST, PAUSED_UNKNOWN, PAUSED_USER, PAUSED_MIGRATION, PAUSED_SAVE, PAUSED_DUMP, PAUSED_IOERROR, PAUSED_WATCHDOG, PAUSED_FROM_SNAPSHOT, PAUSED_SHUTTING_DOWN, PAUSED_LAST, SHUTDOWN_UNKNOWN, SHUTDOWN_USER, SHUTDOWN_LAST, SHUTOFF_UNKNOWN, SHUTOFF_SHUTDOWN, SHUTOFF_DESTROYED, SHUTOFF_CRASHED, SHUTOFF_MIGRATED, SHUTOFF_SAVED, SHUTOFF_FAILED, SHUTOFF_FROM_SNAPSHOT, SHUTOFF_LAST, CRASHED_UNKNOWN, CRASHED_LAST, FROM_SNAPSHOT, USER, MIGRATED, LAST, UNKNOWN_VAL, .

        """
        return self._reason_type

    def _set_reason_type(self, value):
        """ Set attribute reason_type

            Reason of the event associated with the VM - UNKNOWN, NOSTATE_UNKNOWN, NOSTATE_LAST, RUNNING_UNKNOWN, RUNNING_BOOTED, RUNNING_MIGRATED, RUNNING_RESTORED, RUNNING_FROM_SNAPSHOT, RUNNING_UNPAUSED, RUNNING_MIGRATION_CANCELED, RUNNING_SAVE_CANCELED, RUNNING_LAST, BLOCKED_UNKNOWN, BLOCKED_LAST, PAUSED_UNKNOWN, PAUSED_USER, PAUSED_MIGRATION, PAUSED_SAVE, PAUSED_DUMP, PAUSED_IOERROR, PAUSED_WATCHDOG, PAUSED_FROM_SNAPSHOT, PAUSED_SHUTTING_DOWN, PAUSED_LAST, SHUTDOWN_UNKNOWN, SHUTDOWN_USER, SHUTDOWN_LAST, SHUTOFF_UNKNOWN, SHUTOFF_SHUTDOWN, SHUTOFF_DESTROYED, SHUTOFF_CRASHED, SHUTOFF_MIGRATED, SHUTOFF_SAVED, SHUTOFF_FAILED,SHUTOFF_FROM_SNAPSHOT, SHUTOFF_LAST, CRASHED_UNKNOWN, CRASHED_LAST Possible values are UNKNOWN, NOSTATE_UNKNOWN, NOSTATE_LAST, RUNNING_UNKNOWN, RUNNING_BOOTED, RUNNING_MIGRATED, RUNNING_RESTORED, RUNNING_FROM_SNAPSHOT, RUNNING_UNPAUSED, RUNNING_MIGRATION_CANCELED, RUNNING_SAVE_CANCELED, RUNNING_LAST, BLOCKED_UNKNOWN, BLOCKED_LAST, PAUSED_UNKNOWN, PAUSED_USER, PAUSED_MIGRATION, PAUSED_SAVE, PAUSED_DUMP, PAUSED_IOERROR, PAUSED_WATCHDOG, PAUSED_FROM_SNAPSHOT, PAUSED_SHUTTING_DOWN, PAUSED_LAST, SHUTDOWN_UNKNOWN, SHUTDOWN_USER, SHUTDOWN_LAST, SHUTOFF_UNKNOWN, SHUTOFF_SHUTDOWN, SHUTOFF_DESTROYED, SHUTOFF_CRASHED, SHUTOFF_MIGRATED, SHUTOFF_SAVED, SHUTOFF_FAILED, SHUTOFF_FROM_SNAPSHOT, SHUTOFF_LAST, CRASHED_UNKNOWN, CRASHED_LAST, FROM_SNAPSHOT, USER, MIGRATED, LAST, UNKNOWN_VAL, .

        """
        self._reason_type = value

    reason_type = property(_get_reason_type, _set_reason_type)
    
    def _get_resync_info(self):
        """ Get attribute resync_info

            Information of the status of the resync operation of a VM

        """
        return self._resync_info

    def _set_resync_info(self, value):
        """ Set attribute resync_info

            Information of the status of the resync operation of a VM

        """
        self._resync_info = value

    resync_info = property(_get_resync_info, _set_resync_info)
    
    def _get_domain_i_ds(self):
        """ Get attribute domain_i_ds

            Array of IDs of the domain that the VM is connected to

        """
        return self._domain_i_ds

    def _set_domain_i_ds(self, value):
        """ Set attribute domain_i_ds

            Array of IDs of the domain that the VM is connected to

        """
        self._domain_i_ds = value

    domain_i_ds = property(_get_domain_i_ds, _set_domain_i_ds)
    
    def _get_hypervisor_ip(self):
        """ Get attribute hypervisor_ip

            IP address of the hypervisor that this VM is currently running in

        """
        return self._hypervisor_ip

    def _set_hypervisor_ip(self, value):
        """ Set attribute hypervisor_ip

            IP address of the hypervisor that this VM is currently running in

        """
        self._hypervisor_ip = value

    hypervisor_ip = property(_get_hypervisor_ip, _set_hypervisor_ip)
    
    def _get_subnet_i_ds(self):
        """ Get attribute subnet_i_ds

            Array of IDs of the subnets that the VM is connected to

        """
        return self._subnet_i_ds

    def _set_subnet_i_ds(self, value):
        """ Set attribute subnet_i_ds

            Array of IDs of the subnets that the VM is connected to

        """
        self._subnet_i_ds = value

    subnet_i_ds = property(_get_subnet_i_ds, _set_subnet_i_ds)
    
    def _get_vrsid(self):
        """ Get attribute vrsid

            Id of the VRS that this VM is attached to.

        """
        return self._vrsid

    def _set_vrsid(self, value):
        """ Set attribute vrsid

            Id of the VRS that this VM is attached to.

        """
        self._vrsid = value

    vrsid = property(_get_vrsid, _set_vrsid)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"vm"
