# -*- coding: utf-8 -*-
"""

NUHSC
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUJobsFetcher
from ..fetchers import NUBGPPeersFetcher
from ..fetchers import NUPortStatussFetcher
from ..fetchers import NUVRSsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUAlarmsFetcher


class NUHSC(NURESTObject):
    """ Represents a HSC object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUHSC instance """

        super(NUHSC, self).__init__()

        # Read/Write Attributes
        self.model = None  #  The model of the hardware service controller - int
        self.type = None  #  The type of the hardware service controller - int
        self.already_marked_for_unavailable = None  #  Flag to indicate that it is already marked a unavailable. - int
        self.address = None  #  The IP of the VRS entity - int
        self.management_ip = None  #  The management IP of the VSC/HSC entity - int
        self.unavailable_timestamp = None  #  The duration the controller is unavailable (in millis). - long
        self.vsds = None  #  A collection of VSD id(s) which are identified by this controller. - int
        self.messages = None  #  An array of degraded messages. - int
        self.average_cpu_usage = None  #  Average CPU usage percentage. - float
        self.average_memory_usage = None  #  Average memory usage percentage. - float
        self.current_cpu_usage = None  #  Current CPU usage percentage. - float
        self.current_memory_usage = None  #  Current memory usage percentage. - float
        self.description = None  #  Description of the entity. - int
        self.disks = None  #  Set of disk usage details. - int
        self.last_state_change = None  #  Last state change timestamp (in millis). - long
        self.location = None  #  Identifies the entity to be associated with a location. - int
        self.name = None  #  Identifies the entity with a name. - int
        self.peak_cpu_usage = None  #  Peek CPU usage percentage. - float
        self.peak_memory_usage = None  #  Peek memory usage percentage. - float
        self.product_version = None  #  Product version supported by this entity. - int
        self.status = None  #  Computed status of the entity. - int
        
        self.expose_attribute(local_name=u"model", remote_name=u"model", attribute_type=int)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=int)
        self.expose_attribute(local_name=u"already_marked_for_unavailable", remote_name=u"alreadyMarkedForUnavailable", attribute_type=int)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=int)
        self.expose_attribute(local_name=u"management_ip", remote_name=u"managementIP", attribute_type=int)
        self.expose_attribute(local_name=u"unavailable_timestamp", remote_name=u"unavailableTimestamp", attribute_type=long)
        self.expose_attribute(local_name=u"vsds", remote_name=u"vsds", attribute_type=int)
        self.expose_attribute(local_name=u"messages", remote_name=u"messages", attribute_type=int)
        self.expose_attribute(local_name=u"average_cpu_usage", remote_name=u"averageCPUUsage", attribute_type=float)
        self.expose_attribute(local_name=u"average_memory_usage", remote_name=u"averageMemoryUsage", attribute_type=float)
        self.expose_attribute(local_name=u"current_cpu_usage", remote_name=u"currentCPUUsage", attribute_type=float)
        self.expose_attribute(local_name=u"current_memory_usage", remote_name=u"currentMemoryUsage", attribute_type=float)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"disks", remote_name=u"disks", attribute_type=int)
        self.expose_attribute(local_name=u"last_state_change", remote_name=u"lastStateChange", attribute_type=long)
        self.expose_attribute(local_name=u"location", remote_name=u"location", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"peak_cpu_usage", remote_name=u"peakCPUUsage", attribute_type=float)
        self.expose_attribute(local_name=u"peak_memory_usage", remote_name=u"peakMemoryUsage", attribute_type=float)
        self.expose_attribute(local_name=u"product_version", remote_name=u"productVersion", attribute_type=int)
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=int)
        
        # Fetchers
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_object(nurest_object=self, local_name=u"jobs")
        self.bgp_peers = []
        self.bgp_peers_fetcher = NUBGPPeersFetcher.fetcher_with_object(nurest_object=self, local_name=u"bgp_peers")
        self.port_statuss = []
        self.port_statuss_fetcher = NUPortStatussFetcher.fetcher_with_object(nurest_object=self, local_name=u"port_statuss")
        self.vrss = []
        self.vrss_fetcher = NUVRSsFetcher.fetcher_with_object(nurest_object=self, local_name=u"vrss")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_object(nurest_object=self, local_name=u"alarms")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"hsc"


