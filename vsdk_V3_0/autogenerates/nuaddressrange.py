# -*- coding: utf-8 -*-

"""
NUAddressRange
This is the definition of a Address Range associated with a Network

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUAddressRange(NURESTObject):
    """ Represents a AddressRange object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a AddressRange instance

        """
        super(NUAddressRange, self).__init__()

        # Read/Write Attributes
        
        self._max_address = str()
        self._dhcp_pool_type = str()
        self._min_address = str()
        
        self.expose_attribute(local_name=u"max_address", remote_name=u"maxAddress", attribute_type=str)
        self.expose_attribute(local_name=u"dhcp_pool_type", remote_name=u"DHCPPoolType", attribute_type=str, choices=[u'HOST', u'BRIDGE'])
        self.expose_attribute(local_name=u"min_address", remote_name=u"minAddress", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_max_address(self):
        """ Get attribute max_address

            Higest address in the address range

        """
        return self._max_address

    def _set_max_address(self, value):
        """ Set attribute max_address

            Higest address in the address range

        """
        self._max_address = value

    max_address = property(_get_max_address, _set_max_address)
    
    def _get_dhcp_pool_type(self):
        """ Get attribute dhcp_pool_type

            DHCPPoolType is an enum that indicates if the DHCP Pool is for HOST/BRIDGE. Possible values are HOST, BRIDGE Possible values are HOST, BRIDGE, .

        """
        return self._dhcp_pool_type

    def _set_dhcp_pool_type(self, value):
        """ Set attribute dhcp_pool_type

            DHCPPoolType is an enum that indicates if the DHCP Pool is for HOST/BRIDGE. Possible values are HOST, BRIDGE Possible values are HOST, BRIDGE, .

        """
        self._dhcp_pool_type = value

    dhcp_pool_type = property(_get_dhcp_pool_type, _set_dhcp_pool_type)
    
    def _get_min_address(self):
        """ Get attribute min_address

            Lowest address in the address range

        """
        return self._min_address

    def _set_min_address(self, value):
        """ Set attribute min_address

            Lowest address in the address range

        """
        self._min_address = value

    min_address = property(_get_min_address, _set_min_address)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"addressrange"
