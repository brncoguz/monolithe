# -*- coding: utf-8 -*-

"""
NULicense
Enables retrieval/modification and creation of license files. Most of the attributes are retrieved from the encrypted license. The create API simply provides the encrypted license that is in base64 format

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject
from time import time


class NULicense(NURESTObject):
    """ Represents a License object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a License instance

        """
        super(NULicense, self).__init__()

        # Read/Write Attributes
        
        self._license_type = str()
        self._customer_key = str()
        self._allowed_cpes_count = str()
        self._allowed_vrsgs_count = str()
        self._street = str()
        self._expiration_date = time()
        self._allowed_nics_count = str()
        self._city = str()
        self._allowed_vms_count = str()
        self._zip = str()
        self._allowed_vrss_count = str()
        self._state = str()
        self._license_id = int()
        self._product_version = str()
        self._provider = str()
        self._email = str()
        self._company = str()
        self._phone = str()
        self._user_name = str()
        self._major_release = int()
        self._license = str()
        self._is_cluster_license = bool()
        self._country = str()
        self._minor_release = int()
        
        self.expose_attribute(local_name=u"license_type", remote_name=u"licenseType", attribute_type=str, choices=[u'CLUSTERED', u'STANDARD'])
        self.expose_attribute(local_name=u"customer_key", remote_name=u"customerKey", attribute_type=str)
        self.expose_attribute(local_name=u"allowed_cpes_count", remote_name=u"allowedCPEsCount", attribute_type=str)
        self.expose_attribute(local_name=u"allowed_vrsgs_count", remote_name=u"allowedVRSGsCount", attribute_type=str)
        self.expose_attribute(local_name=u"street", remote_name=u"street", attribute_type=str)
        self.expose_attribute(local_name=u"expiration_date", remote_name=u"expirationDate", attribute_type=time)
        self.expose_attribute(local_name=u"allowed_nics_count", remote_name=u"allowedNICsCount", attribute_type=str)
        self.expose_attribute(local_name=u"city", remote_name=u"city", attribute_type=str)
        self.expose_attribute(local_name=u"allowed_vms_count", remote_name=u"allowedVMsCount", attribute_type=str)
        self.expose_attribute(local_name=u"zip", remote_name=u"zip", attribute_type=str)
        self.expose_attribute(local_name=u"allowed_vrss_count", remote_name=u"allowedVRSsCount", attribute_type=str)
        self.expose_attribute(local_name=u"state", remote_name=u"state", attribute_type=str)
        self.expose_attribute(local_name=u"license_id", remote_name=u"licenseID", attribute_type=int)
        self.expose_attribute(local_name=u"product_version", remote_name=u"productVersion", attribute_type=str)
        self.expose_attribute(local_name=u"provider", remote_name=u"provider", attribute_type=str)
        self.expose_attribute(local_name=u"email", remote_name=u"email", attribute_type=str)
        self.expose_attribute(local_name=u"company", remote_name=u"company", attribute_type=str)
        self.expose_attribute(local_name=u"phone", remote_name=u"phone", attribute_type=str)
        self.expose_attribute(local_name=u"user_name", remote_name=u"userName", attribute_type=str)
        self.expose_attribute(local_name=u"major_release", remote_name=u"majorRelease", attribute_type=int)
        self.expose_attribute(local_name=u"license", remote_name=u"license", attribute_type=str)
        self.expose_attribute(local_name=u"is_cluster_license", remote_name=u"isClusterLicense", attribute_type=bool)
        self.expose_attribute(local_name=u"country", remote_name=u"country", attribute_type=str)
        self.expose_attribute(local_name=u"minor_release", remote_name=u"minorRelease", attribute_type=int)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_license_type(self):
        """ Get attribute license_type

             Possible values are STANDARD, CLUSTERED, .

        """
        return self._license_type

    def _set_license_type(self, value):
        """ Set attribute license_type

             Possible values are STANDARD, CLUSTERED, .

        """
        self._license_type = value

    license_type = property(_get_license_type, _set_license_type)
    
    def _get_customer_key(self):
        """ Get attribute customer_key

            Customer key associated with the licese

        """
        return self._customer_key

    def _set_customer_key(self, value):
        """ Set attribute customer_key

            Customer key associated with the licese

        """
        self._customer_key = value

    customer_key = property(_get_customer_key, _set_customer_key)
    
    def _get_allowed_cpes_count(self):
        """ Get attribute allowed_cpes_count

            Maximum number of CPEs enabled with this license. A value of -1 indicates an unlimited number of CPEs

        """
        return self._allowed_cpes_count

    def _set_allowed_cpes_count(self, value):
        """ Set attribute allowed_cpes_count

            Maximum number of CPEs enabled with this license. A value of -1 indicates an unlimited number of CPEs

        """
        self._allowed_cpes_count = value

    allowed_cpes_count = property(_get_allowed_cpes_count, _set_allowed_cpes_count)
    
    def _get_allowed_vrsgs_count(self):
        """ Get attribute allowed_vrsgs_count

            Maximum number of VRSGs enabled with this license. A value of -1 indicates an unlimited number of VRSGs

        """
        return self._allowed_vrsgs_count

    def _set_allowed_vrsgs_count(self, value):
        """ Set attribute allowed_vrsgs_count

            Maximum number of VRSGs enabled with this license. A value of -1 indicates an unlimited number of VRSGs

        """
        self._allowed_vrsgs_count = value

    allowed_vrsgs_count = property(_get_allowed_vrsgs_count, _set_allowed_vrsgs_count)
    
    def _get_street(self):
        """ Get attribute street

            Address of the owner associated with the license file

        """
        return self._street

    def _set_street(self, value):
        """ Set attribute street

            Address of the owner associated with the license file

        """
        self._street = value

    street = property(_get_street, _set_street)
    
    def _get_expiration_date(self):
        """ Get attribute expiration_date

            Expiration date of this license

        """
        return self._expiration_date

    def _set_expiration_date(self, value):
        """ Set attribute expiration_date

            Expiration date of this license

        """
        self._expiration_date = value

    expiration_date = property(_get_expiration_date, _set_expiration_date)
    
    def _get_allowed_nics_count(self):
        """ Get attribute allowed_nics_count

            Maximum number of NICs allowed. A value of -1 indicates unlimited number of NICs

        """
        return self._allowed_nics_count

    def _set_allowed_nics_count(self, value):
        """ Set attribute allowed_nics_count

            Maximum number of NICs allowed. A value of -1 indicates unlimited number of NICs

        """
        self._allowed_nics_count = value

    allowed_nics_count = property(_get_allowed_nics_count, _set_allowed_nics_count)
    
    def _get_city(self):
        """ Get attribute city

            City of the owner associated with the license file

        """
        return self._city

    def _set_city(self, value):
        """ Set attribute city

            City of the owner associated with the license file

        """
        self._city = value

    city = property(_get_city, _set_city)
    
    def _get_allowed_vms_count(self):
        """ Get attribute allowed_vms_count

            Maximum number of VMs enabled with this license. A value of -1 indicates an unlimited number of VMs

        """
        return self._allowed_vms_count

    def _set_allowed_vms_count(self, value):
        """ Set attribute allowed_vms_count

            Maximum number of VMs enabled with this license. A value of -1 indicates an unlimited number of VMs

        """
        self._allowed_vms_count = value

    allowed_vms_count = property(_get_allowed_vms_count, _set_allowed_vms_count)
    
    def _get_zip(self):
        """ Get attribute zip

            Zipcode of the owner associated with the license file

        """
        return self._zip

    def _set_zip(self, value):
        """ Set attribute zip

            Zipcode of the owner associated with the license file

        """
        self._zip = value

    zip = property(_get_zip, _set_zip)
    
    def _get_allowed_vrss_count(self):
        """ Get attribute allowed_vrss_count

            Maximum number of VRSs enabled with this license. A value of -1 indicates an unlimited number of VRSs

        """
        return self._allowed_vrss_count

    def _set_allowed_vrss_count(self, value):
        """ Set attribute allowed_vrss_count

            Maximum number of VRSs enabled with this license. A value of -1 indicates an unlimited number of VRSs

        """
        self._allowed_vrss_count = value

    allowed_vrss_count = property(_get_allowed_vrss_count, _set_allowed_vrss_count)
    
    def _get_state(self):
        """ Get attribute state

            State of the owner associated with the license file

        """
        return self._state

    def _set_state(self, value):
        """ Set attribute state

            State of the owner associated with the license file

        """
        self._state = value

    state = property(_get_state, _set_state)
    
    def _get_license_id(self):
        """ Get attribute license_id

            Unique identifier of the license file

        """
        return self._license_id

    def _set_license_id(self, value):
        """ Set attribute license_id

            Unique identifier of the license file

        """
        self._license_id = value

    license_id = property(_get_license_id, _set_license_id)
    
    def _get_product_version(self):
        """ Get attribute product_version

            Version of the product that this license applies to

        """
        return self._product_version

    def _set_product_version(self, value):
        """ Set attribute product_version

            Version of the product that this license applies to

        """
        self._product_version = value

    product_version = property(_get_product_version, _set_product_version)
    
    def _get_provider(self):
        """ Get attribute provider

            Provider of the license file

        """
        return self._provider

    def _set_provider(self, value):
        """ Set attribute provider

            Provider of the license file

        """
        self._provider = value

    provider = property(_get_provider, _set_provider)
    
    def _get_email(self):
        """ Get attribute email

            Email of the owner associated with the license file

        """
        return self._email

    def _set_email(self, value):
        """ Set attribute email

            Email of the owner associated with the license file

        """
        self._email = value

    email = property(_get_email, _set_email)
    
    def _get_company(self):
        """ Get attribute company

            Company of the owner associated with the license file

        """
        return self._company

    def _set_company(self, value):
        """ Set attribute company

            Company of the owner associated with the license file

        """
        self._company = value

    company = property(_get_company, _set_company)
    
    def _get_phone(self):
        """ Get attribute phone

            Phone number of the owner associated with the license file

        """
        return self._phone

    def _set_phone(self, value):
        """ Set attribute phone

            Phone number of the owner associated with the license file

        """
        self._phone = value

    phone = property(_get_phone, _set_phone)
    
    def _get_user_name(self):
        """ Get attribute user_name

            The name of the user associated with the license

        """
        return self._user_name

    def _set_user_name(self, value):
        """ Set attribute user_name

            The name of the user associated with the license

        """
        self._user_name = value

    user_name = property(_get_user_name, _set_user_name)
    
    def _get_major_release(self):
        """ Get attribute major_release

            Major software release associated with this license

        """
        return self._major_release

    def _set_major_release(self, value):
        """ Set attribute major_release

            Major software release associated with this license

        """
        self._major_release = value

    major_release = property(_get_major_release, _set_major_release)
    
    def _get_license(self):
        """ Get attribute license

            Base 64 value of the license

        """
        return self._license

    def _set_license(self, value):
        """ Set attribute license

            Base 64 value of the license

        """
        self._license = value

    license = property(_get_license, _set_license)
    
    def _get_is_cluster_license(self):
        """ Get attribute is_cluster_license

            Indicates if the license is associated with standlone or cluster setup of VSD

        """
        return self._is_cluster_license

    def _set_is_cluster_license(self, value):
        """ Set attribute is_cluster_license

            Indicates if the license is associated with standlone or cluster setup of VSD

        """
        self._is_cluster_license = value

    is_cluster_license = property(_get_is_cluster_license, _set_is_cluster_license)
    
    def _get_country(self):
        """ Get attribute country

            Country of the owner associated with the license file

        """
        return self._country

    def _set_country(self, value):
        """ Set attribute country

            Country of the owner associated with the license file

        """
        self._country = value

    country = property(_get_country, _set_country)
    
    def _get_minor_release(self):
        """ Get attribute minor_release

            Minor software release for which this license has been issued

        """
        return self._minor_release

    def _set_minor_release(self, value):
        """ Set attribute minor_release

            Minor software release for which this license has been issued

        """
        self._minor_release = value

    minor_release = property(_get_minor_release, _set_minor_release)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"license"
