# -*- coding: utf-8 -*-

"""
NUMirrorDestination
Represents the mirror destination entity.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVPortMirrorsFetcher
from bambou import NURESTObject


class NUMirrorDestination(NURESTObject):
    """ Represents a MirrorDestination object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a MirrorDestination instance

        """
        super(NUMirrorDestination, self).__init__()

        # Read/Write Attributes
        
        self._service_id = str()
        self._name = str()
        self._destination_ip = str()
        
        self.expose_attribute(local_name=u"service_id", remote_name=u"serviceId", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"destination_ip", remote_name=u"destinationIp", attribute_type=str)
        
        # Fetchers
        
        self.vportmirrors = []
        self.vportmirrors_fetcher = NUVPortMirrorsFetcher.fetcher_with_entity(entity=self, local_name=u"vportmirrors")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_service_id(self):
        """ Get attribute service_id

            Service ID of the mirror destination.

        """
        return self._service_id

    def _set_service_id(self, value):
        """ Set attribute service_id

            Service ID of the mirror destination.

        """
        self._service_id = value

    service_id = property(_get_service_id, _set_service_id)
    
    def _get_name(self):
        """ Get attribute name

            Name of the mirror destination. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the mirror destination. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_destination_ip(self):
        """ Get attribute destination_ip

            IP address of the destination server where you want your traffic to be mirrored.

        """
        return self._destination_ip

    def _set_destination_ip(self, value):
        """ Set attribute destination_ip

            IP address of the destination server where you want your traffic to be mirrored.

        """
        self._destination_ip = value

    destination_ip = property(_get_destination_ip, _set_destination_ip)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"mirrordestination"
