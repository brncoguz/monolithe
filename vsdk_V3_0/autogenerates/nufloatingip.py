# -*- coding: utf-8 -*-

"""
NUFloatingIp
Floating IP that is associated to a Domain. This floating IP could be used in the VM interface for NAT functionality

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVPortsFetcher
from bambou import NURESTObject


class NUFloatingIp(NURESTObject):
    """ Represents a FloatingIp object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a FloatingIp instance

        """
        super(NUFloatingIp, self).__init__()

        # Read/Write Attributes
        
        self._assigned = bool()
        self._associated_shared_network_resource_id = str()
        self._address = str()
        
        self.expose_attribute(local_name=u"assigned", remote_name=u"assigned", attribute_type=bool)
        self.expose_attribute(local_name=u"associated_shared_network_resource_id", remote_name=u"associatedSharedNetworkResourceID", attribute_type=str)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        
        # Fetchers
        
        self.vports = []
        self.vports_fetcher = NUVPortsFetcher.fetcher_with_entity(entity=self, local_name=u"vports")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_assigned(self):
        """ Get attribute assigned

            True if this floating IP is assigned to a network interface else the value is false

        """
        return self._assigned

    def _set_assigned(self, value):
        """ Set attribute assigned

            True if this floating IP is assigned to a network interface else the value is false

        """
        self._assigned = value

    assigned = property(_get_assigned, _set_assigned)
    
    def _get_associated_shared_network_resource_id(self):
        """ Get attribute associated_shared_network_resource_id

            Id of the shared network resource subnet which was used to get this floating IP address

        """
        return self._associated_shared_network_resource_id

    def _set_associated_shared_network_resource_id(self, value):
        """ Set attribute associated_shared_network_resource_id

            Id of the shared network resource subnet which was used to get this floating IP address

        """
        self._associated_shared_network_resource_id = value

    associated_shared_network_resource_id = property(_get_associated_shared_network_resource_id, _set_associated_shared_network_resource_id)
    
    def _get_address(self):
        """ Get attribute address

            Floating IP address assigned to the Domain

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            Floating IP address assigned to the Domain

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"floatingip"
