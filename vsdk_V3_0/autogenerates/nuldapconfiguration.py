# -*- coding: utf-8 -*-
"""

NULDAPConfiguration
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject



class NULDAPConfiguration(NURESTObject):
    """ Represents a LDAPConfiguration object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NULDAPConfiguration instance """

        super(NULDAPConfiguration, self).__init__()

        # Read/Write Attributes
        self.accept_all_certificates = None  #  Accept all certificates from the LDAP server - int
        self.certificate = None  #  The certificate to authenticate with the LDAP server - int
        self.enabled = None  #  Whether LDAP authentication is enabled of the enterprise - int
        self.port = None  #  Port to be used for the LDAP server - int
        self.server = None  #  The LDAP server IP or FQDN - int
        self.ssl_enabled = None  #  Enable SSL for communication with the LDAP server - int
        self.user_dn_template = None  #  The DN template to be used for authentication. The template needs to have a string _USERID_ in it. This will be replaced by  the userId of the user who makes the REST API call. For example, template UID=_USERID_,OU=company,DC=com will converted to  UID=admin,OU=company,DC=com and this will be used as DN for LDAP authentication. - int
        
        self.expose_attribute(local_name=u"accept_all_certificates", remote_name=u"acceptAllCertificates", attribute_type=int)
        self.expose_attribute(local_name=u"certificate", remote_name=u"certificate", attribute_type=int)
        self.expose_attribute(local_name=u"enabled", remote_name=u"enabled", attribute_type=int)
        self.expose_attribute(local_name=u"port", remote_name=u"port", attribute_type=int)
        self.expose_attribute(local_name=u"server", remote_name=u"server", attribute_type=int)
        self.expose_attribute(local_name=u"ssl_enabled", remote_name=u"SSLEnabled", attribute_type=int)
        self.expose_attribute(local_name=u"user_dn_template", remote_name=u"userDNTemplate", attribute_type=int)
        
        # Fetchers
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"ldapconfiguration"


