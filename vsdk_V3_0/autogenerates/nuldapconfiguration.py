# -*- coding: utf-8 -*-

"""
NULDAPConfiguration
Configuration of LDAP parameters associated with an enterprise. This will enable authentication through an external LDAP server for this enterprise

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NULDAPConfiguration(NURESTObject):
    """ Represents a LDAPConfiguration object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a LDAPConfiguration instance

        """
        super(NULDAPConfiguration, self).__init__()

        # Read/Write Attributes
        
        self._certificate = str()
        self._ssl_enabled = bool()
        self._enabled = bool()
        self._server = str()
        self._user_dn_template = str()
        self._accept_all_certificates = bool()
        self._port = str()
        
        self.expose_attribute(local_name=u"certificate", remote_name=u"certificate", attribute_type=str)
        self.expose_attribute(local_name=u"ssl_enabled", remote_name=u"SSLEnabled", attribute_type=bool)
        self.expose_attribute(local_name=u"enabled", remote_name=u"enabled", attribute_type=bool)
        self.expose_attribute(local_name=u"server", remote_name=u"server", attribute_type=str)
        self.expose_attribute(local_name=u"user_dn_template", remote_name=u"userDNTemplate", attribute_type=str)
        self.expose_attribute(local_name=u"accept_all_certificates", remote_name=u"acceptAllCertificates", attribute_type=bool)
        self.expose_attribute(local_name=u"port", remote_name=u"port", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_certificate(self):
        """ Get attribute certificate

            The certificate to authenticate with the LDAP server

        """
        return self._certificate

    def _set_certificate(self, value):
        """ Set attribute certificate

            The certificate to authenticate with the LDAP server

        """
        self._certificate = value

    certificate = property(_get_certificate, _set_certificate)
    
    def _get_ssl_enabled(self):
        """ Get attribute ssl_enabled

            Enable SSL for communication with the LDAP server

        """
        return self._ssl_enabled

    def _set_ssl_enabled(self, value):
        """ Set attribute ssl_enabled

            Enable SSL for communication with the LDAP server

        """
        self._ssl_enabled = value

    ssl_enabled = property(_get_ssl_enabled, _set_ssl_enabled)
    
    def _get_enabled(self):
        """ Get attribute enabled

            Whether LDAP authentication is enabled of the enterprise

        """
        return self._enabled

    def _set_enabled(self, value):
        """ Set attribute enabled

            Whether LDAP authentication is enabled of the enterprise

        """
        self._enabled = value

    enabled = property(_get_enabled, _set_enabled)
    
    def _get_server(self):
        """ Get attribute server

            The LDAP server IP or FQDN

        """
        return self._server

    def _set_server(self, value):
        """ Set attribute server

            The LDAP server IP or FQDN

        """
        self._server = value

    server = property(_get_server, _set_server)
    
    def _get_user_dn_template(self):
        """ Get attribute user_dn_template

            The DN template to be used for authentication. The template needs to have a string _USERID_ in it. This will be replaced by  the userId of the user who makes the REST API call. For example, template UID=_USERID_,OU=company,DC=com will converted to  UID=admin,OU=company,DC=com and this will be used as DN for LDAP authentication.

        """
        return self._user_dn_template

    def _set_user_dn_template(self, value):
        """ Set attribute user_dn_template

            The DN template to be used for authentication. The template needs to have a string _USERID_ in it. This will be replaced by  the userId of the user who makes the REST API call. For example, template UID=_USERID_,OU=company,DC=com will converted to  UID=admin,OU=company,DC=com and this will be used as DN for LDAP authentication.

        """
        self._user_dn_template = value

    user_dn_template = property(_get_user_dn_template, _set_user_dn_template)
    
    def _get_accept_all_certificates(self):
        """ Get attribute accept_all_certificates

            Accept all certificates from the LDAP server

        """
        return self._accept_all_certificates

    def _set_accept_all_certificates(self, value):
        """ Set attribute accept_all_certificates

            Accept all certificates from the LDAP server

        """
        self._accept_all_certificates = value

    accept_all_certificates = property(_get_accept_all_certificates, _set_accept_all_certificates)
    
    def _get_port(self):
        """ Get attribute port

            Port to be used for the LDAP server

        """
        return self._port

    def _set_port(self, value):
        """ Set attribute port

            Port to be used for the LDAP server

        """
        self._port = value

    port = property(_get_port, _set_port)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"ldapconfiguration"
