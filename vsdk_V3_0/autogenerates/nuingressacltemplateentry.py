# -*- coding: utf-8 -*-

"""
NUIngressACLTemplateEntry
Defines the template of Ingress ACL entries

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUIngressACLTemplateEntry(NURESTObject):
    """ Represents a IngressACLTemplateEntry object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a IngressACLTemplateEntry instance

        """
        super(NUIngressACLTemplateEntry, self).__init__()

        # Read/Write Attributes
        
        self._network_id = str()
        self._associated_application_id = str()
        self._protocol = str()
        self._reflexive = bool()
        self._ether_type = str()
        self._dscp = str()
        self._address_override = str()
        self._priority = int()
        self._action = str()
        self._associated_application_object_type = str()
        self._location_id = str()
        self._destination_port = str()
        self._location_type = str()
        self._source_port = str()
        self._network_type = str()
        self._associated_application_object_id = str()
        self._description = str()
        
        self.expose_attribute(local_name=u"network_id", remote_name=u"networkID", attribute_type=str)
        self.expose_attribute(local_name=u"associated_application_id", remote_name=u"associatedApplicationID", attribute_type=str)
        self.expose_attribute(local_name=u"protocol", remote_name=u"protocol", attribute_type=str)
        self.expose_attribute(local_name=u"reflexive", remote_name=u"reflexive", attribute_type=bool)
        self.expose_attribute(local_name=u"ether_type", remote_name=u"etherType", attribute_type=str)
        self.expose_attribute(local_name=u"dscp", remote_name=u"DSCP", attribute_type=str)
        self.expose_attribute(local_name=u"address_override", remote_name=u"addressOverride", attribute_type=str)
        self.expose_attribute(local_name=u"priority", remote_name=u"priority", attribute_type=int)
        self.expose_attribute(local_name=u"action", remote_name=u"action", attribute_type=str, choices=[u'FORWARD', u'REDIRECT', u'DROP'])
        self.expose_attribute(local_name=u"associated_application_object_type", remote_name=u"associatedApplicationObjectType", attribute_type=str, choices=[u'FORWARD', u'REDIRECT', u'DROP'])
        self.expose_attribute(local_name=u"location_id", remote_name=u"locationID", attribute_type=str)
        self.expose_attribute(local_name=u"destination_port", remote_name=u"destinationPort", attribute_type=str)
        self.expose_attribute(local_name=u"location_type", remote_name=u"locationType", attribute_type=str, choices=[u'VPORTTAG', u'SUBNET', u'ANY', u'POLICYGROUP', u'REDIRECTIONTARGET', u'ZONE'])
        self.expose_attribute(local_name=u"source_port", remote_name=u"sourcePort", attribute_type=str)
        self.expose_attribute(local_name=u"network_type", remote_name=u"networkType", attribute_type=str, choices=[u'SUBNET', u'ANY', u'PUBLIC_NETWORK', u'ENTERPRISE_NETWORK', u'POLICYGROUP', u'ENDPOINT_SUBNET', u'ENDPOINT_DOMAIN', u'ENDPOINT_ZONE', u'ZONE'])
        self.expose_attribute(local_name=u"associated_application_object_id", remote_name=u"associatedApplicationObjectID", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_network_id(self):
        """ Get attribute network_id

            The destination network entity that is referenced(subnet/zone/macro)

        """
        return self._network_id

    def _set_network_id(self, value):
        """ Set attribute network_id

            The destination network entity that is referenced(subnet/zone/macro)

        """
        self._network_id = value

    network_id = property(_get_network_id, _set_network_id)
    
    def _get_associated_application_id(self):
        """ Get attribute associated_application_id

            The associated application ID

        """
        return self._associated_application_id

    def _set_associated_application_id(self, value):
        """ Set attribute associated_application_id

            The associated application ID

        """
        self._associated_application_id = value

    associated_application_id = property(_get_associated_application_id, _set_associated_application_id)
    
    def _get_protocol(self):
        """ Get attribute protocol

            Protocol number that must be matched

        """
        return self._protocol

    def _set_protocol(self, value):
        """ Set attribute protocol

            Protocol number that must be matched

        """
        self._protocol = value

    protocol = property(_get_protocol, _set_protocol)
    
    def _get_reflexive(self):
        """ Get attribute reflexive

            true means that this ACL entry is reflexive, so there will be a corresponding egress rule that will be created by OVS in the network. false means that there is no corresponding egress rule created by OVS in the network

        """
        return self._reflexive

    def _set_reflexive(self, value):
        """ Set attribute reflexive

            true means that this ACL entry is reflexive, so there will be a corresponding egress rule that will be created by OVS in the network. false means that there is no corresponding egress rule created by OVS in the network

        """
        self._reflexive = value

    reflexive = property(_get_reflexive, _set_reflexive)
    
    def _get_ether_type(self):
        """ Get attribute ether_type

            Ether type of the packet to be matched. etherType can be * or a valid hexadecimal value

        """
        return self._ether_type

    def _set_ether_type(self, value):
        """ Set attribute ether_type

            Ether type of the packet to be matched. etherType can be * or a valid hexadecimal value

        """
        self._ether_type = value

    ether_type = property(_get_ether_type, _set_ether_type)
    
    def _get_dscp(self):
        """ Get attribute dscp

            DSCP match condition to be set in the rule. It is either * or from 0-63

        """
        return self._dscp

    def _set_dscp(self, value):
        """ Set attribute dscp

            DSCP match condition to be set in the rule. It is either * or from 0-63

        """
        self._dscp = value

    dscp = property(_get_dscp, _set_dscp)
    
    def _get_address_override(self):
        """ Get attribute address_override

            Overrides the source IP macentries will use this adress as the match criteria.

        """
        return self._address_override

    def _set_address_override(self, value):
        """ Set attribute address_override

            Overrides the source IP macentries will use this adress as the match criteria.

        """
        self._address_override = value

    address_override = property(_get_address_override, _set_address_override)
    
    def _get_priority(self):
        """ Get attribute priority

            The priority of the ACL entry that determines the order of entries

        """
        return self._priority

    def _set_priority(self, value):
        """ Set attribute priority

            The priority of the ACL entry that determines the order of entries

        """
        self._priority = value

    priority = property(_get_priority, _set_priority)
    
    def _get_action(self):
        """ Get attribute action

            The action of the ACL entry DROP or FORWARD or REDIRECT. Action REDIRECT is allowed only for IngressAdvancedForwardingEntry Possible values are DROP, FORWARD, REDIRECT, .

        """
        return self._action

    def _set_action(self, value):
        """ Set attribute action

            The action of the ACL entry DROP or FORWARD or REDIRECT. Action REDIRECT is allowed only for IngressAdvancedForwardingEntry Possible values are DROP, FORWARD, REDIRECT, .

        """
        self._action = value

    action = property(_get_action, _set_action)
    
    def _get_associated_application_object_type(self):
        """ Get attribute associated_application_object_type

            The associated application object type Refer to API section for supported types.

        """
        return self._associated_application_object_type

    def _set_associated_application_object_type(self, value):
        """ Set attribute associated_application_object_type

            The associated application object type Refer to API section for supported types.

        """
        self._associated_application_object_type = value

    associated_application_object_type = property(_get_associated_application_object_type, _set_associated_application_object_type)
    
    def _get_location_id(self):
        """ Get attribute location_id

            The ID of the location entity (Subnet/Zone/VportTag)

        """
        return self._location_id

    def _set_location_id(self, value):
        """ Set attribute location_id

            The ID of the location entity (Subnet/Zone/VportTag)

        """
        self._location_id = value

    location_id = property(_get_location_id, _set_location_id)
    
    def _get_destination_port(self):
        """ Get attribute destination_port

            The destination port to be matched if protocol is UDP or TCP. Value should be either * or single port number or a port range

        """
        return self._destination_port

    def _set_destination_port(self, value):
        """ Set attribute destination_port

            The destination port to be matched if protocol is UDP or TCP. Value should be either * or single port number or a port range

        """
        self._destination_port = value

    destination_port = property(_get_destination_port, _set_destination_port)
    
    def _get_location_type(self):
        """ Get attribute location_type

            Type of the location entity - ANY or SUBNET or ZONE or VPORTTAG Possible values are ANY, SUBNET, ZONE, POLICYGROUP, REDIRECTIONTARGET, VPORTTAG, .

        """
        return self._location_type

    def _set_location_type(self, value):
        """ Set attribute location_type

            Type of the location entity - ANY or SUBNET or ZONE or VPORTTAG Possible values are ANY, SUBNET, ZONE, POLICYGROUP, REDIRECTIONTARGET, VPORTTAG, .

        """
        self._location_type = value

    location_type = property(_get_location_type, _set_location_type)
    
    def _get_source_port(self):
        """ Get attribute source_port

            Source port to be matched if protocol is UDP or TCP. Value can be either * or single port number or a port range

        """
        return self._source_port

    def _set_source_port(self, value):
        """ Set attribute source_port

            Source port to be matched if protocol is UDP or TCP. Value can be either * or single port number or a port range

        """
        self._source_port = value

    source_port = property(_get_source_port, _set_source_port)
    
    def _get_network_type(self):
        """ Get attribute network_type

            Type of the source network -  VM_SUBNET or VM_ZONE or VM_DOMAIN or SUBNET or ZONE or ENTERPRISE_NETWORK or PUBLIC_NETWORK or ANY Possible values are ENDPOINT_SUBNET, ENDPOINT_ZONE, ENDPOINT_DOMAIN, SUBNET, ZONE, ENTERPRISE_NETWORK, PUBLIC_NETWORK, POLICYGROUP, ANY, .

        """
        return self._network_type

    def _set_network_type(self, value):
        """ Set attribute network_type

            Type of the source network -  VM_SUBNET or VM_ZONE or VM_DOMAIN or SUBNET or ZONE or ENTERPRISE_NETWORK or PUBLIC_NETWORK or ANY Possible values are ENDPOINT_SUBNET, ENDPOINT_ZONE, ENDPOINT_DOMAIN, SUBNET, ZONE, ENTERPRISE_NETWORK, PUBLIC_NETWORK, POLICYGROUP, ANY, .

        """
        self._network_type = value

    network_type = property(_get_network_type, _set_network_type)
    
    def _get_associated_application_object_id(self):
        """ Get attribute associated_application_object_id

            The associated application object ID

        """
        return self._associated_application_object_id

    def _set_associated_application_object_id(self, value):
        """ Set attribute associated_application_object_id

            The associated application object ID

        """
        self._associated_application_object_id = value

    associated_application_object_id = property(_get_associated_application_object_id, _set_associated_application_object_id)
    
    def _get_description(self):
        """ Get attribute description

            Description of the ACL entry

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of the ACL entry

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"ingressaclentrytemplate"
