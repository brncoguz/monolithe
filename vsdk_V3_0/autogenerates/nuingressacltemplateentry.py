# -*- coding: utf-8 -*-
"""

NUIngressACLTemplateEntry
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject



class NUIngressACLTemplateEntry(NURESTObject):
    """ Represents a IngressACLTemplateEntry object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUIngressACLTemplateEntry instance """

        super(NUIngressACLTemplateEntry, self).__init__()

        # Read/Write Attributes
        self.reflexive = None  #  true means that this ACL entry is reflexive, so there will be a corresponding egress rule that will be created by OVS in the network. false means that there is no corresponding egress rule created by OVS in the network - int
        self.action = None  #  The action of the ACL entry DROP or FORWARD or REDIRECT. Action REDIRECT is allowed only for IngressAdvancedForwardingEntry - int
        self.address_override = None  #  Overrides the source IP macentries will use this adress as the match criteria. - int
        self.associated_application_id = None  #  The associated application ID - int
        self.associated_application_object_id = None  #  The associated application object ID - int
        self.associated_application_object_type = None  #  The associated application object type - int
        self.description = None  #  Description of the ACL entry - int
        self.destination_port = None  #  The destination port to be matched if protocol is UDP or TCP. Value should be either * or single port number or a port range - int
        self.dscp = None  #  DSCP match condition to be set in the rule. It is either * or from 0-63 - int
        self.ether_type = None  #  Ether type of the packet to be matched. etherType can be * or a valid hexadecimal value - int
        self.location_id = None  #  The ID of the location entity (Subnet/Zone/VportTag) - int
        self.location_type = None  #  Type of the location entity - ANY or SUBNET or ZONE or VPORTTAG - int
        self.network_id = None  #  The destination network entity that is referenced(subnet/zone/macro) - int
        self.network_type = None  #  Type of the source network -  VM_SUBNET or VM_ZONE or VM_DOMAIN or SUBNET or ZONE or ENTERPRISE_NETWORK or PUBLIC_NETWORK or ANY - int
        self.priority = None  #  The priority of the ACL entry that determines the order of entries - int
        self.protocol = None  #  Protocol number that must be matched - int
        self.source_port = None  #  Source port to be matched if protocol is UDP or TCP. Value can be either * or single port number or a port range - int
        
        self.expose_attribute(local_name=u"reflexive", remote_name=u"reflexive", attribute_type=int)
        self.expose_attribute(local_name=u"action", remote_name=u"action", attribute_type=int)
        self.expose_attribute(local_name=u"address_override", remote_name=u"addressOverride", attribute_type=int)
        self.expose_attribute(local_name=u"associated_application_id", remote_name=u"associatedApplicationID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_application_object_id", remote_name=u"associatedApplicationObjectID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_application_object_type", remote_name=u"associatedApplicationObjectType", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"destination_port", remote_name=u"destinationPort", attribute_type=int)
        self.expose_attribute(local_name=u"dscp", remote_name=u"DSCP", attribute_type=int)
        self.expose_attribute(local_name=u"ether_type", remote_name=u"etherType", attribute_type=int)
        self.expose_attribute(local_name=u"location_id", remote_name=u"locationID", attribute_type=int)
        self.expose_attribute(local_name=u"location_type", remote_name=u"locationType", attribute_type=int)
        self.expose_attribute(local_name=u"network_id", remote_name=u"networkID", attribute_type=int)
        self.expose_attribute(local_name=u"network_type", remote_name=u"networkType", attribute_type=int)
        self.expose_attribute(local_name=u"priority", remote_name=u"priority", attribute_type=int)
        self.expose_attribute(local_name=u"protocol", remote_name=u"protocol", attribute_type=int)
        self.expose_attribute(local_name=u"source_port", remote_name=u"sourcePort", attribute_type=int)
        
        # Fetchers
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"ingressacltemplateentry"


