# -*- coding: utf-8 -*-

"""
NUZoneTemplate
As in domains and subnets, zones are derived from templates. This object provides the definition of the template

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUSubNetworkTemplatesFetcher
from ..fetchers import NUQosPrimitivesFetcher
from bambou import NURESTObject


class NUZoneTemplate(NURESTObject):
    """ Represents a ZoneTemplate object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a ZoneTemplate instance

        """
        super(NUZoneTemplate, self).__init__()

        # Read/Write Attributes
        
        self._public_zone = bool()
        self._ip_type = str()
        self._description = str()
        self._associated_multicast_channel_map_id = str()
        self._netmask = str()
        self._multicast = str()
        self._address = str()
        self._number_of_hosts_in_subnets = int()
        self._name = str()
        
        self.expose_attribute(local_name=u"public_zone", remote_name=u"publicZone", attribute_type=bool)
        self.expose_attribute(local_name=u"ip_type", remote_name=u"IPType", attribute_type=str, choices=[u'IPV6', u'IPV4'])
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=str)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=str, choices=[u'ENABLED', u'INHERITED', u'DISABLED'])
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        self.expose_attribute(local_name=u"number_of_hosts_in_subnets", remote_name=u"numberOfHostsInSubnets", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.subnettemplates = []
        self.subnettemplates_fetcher = NUSubNetworkTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"subnettemplates")
        
        self.qos = []
        self.qos_fetcher = NUQosPrimitivesFetcher.fetcher_with_entity(entity=self, local_name=u"qos")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_public_zone(self):
        """ Get attribute public_zone

            Identifies if the zone is a public zone, in which case any subnets associated with this zone are actually connected to the public subnet of the data center

        """
        return self._public_zone

    def _set_public_zone(self, value):
        """ Set attribute public_zone

            Identifies if the zone is a public zone, in which case any subnets associated with this zone are actually connected to the public subnet of the data center

        """
        self._public_zone = value

    public_zone = property(_get_public_zone, _set_public_zone)
    
    def _get_ip_type(self):
        """ Get attribute ip_type

            IPv4 or IPv6(only IPv4 is supported in R1.0) Possible values are IPV4, IPV6, .

        """
        return self._ip_type

    def _set_ip_type(self, value):
        """ Set attribute ip_type

            IPv4 or IPv6(only IPv4 is supported in R1.0) Possible values are IPV4, IPV6, .

        """
        self._ip_type = value

    ip_type = property(_get_ip_type, _set_ip_type)
    
    def _get_description(self):
        """ Get attribute description

            A description of the Zone template

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the Zone template

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_associated_multicast_channel_map_id(self):
        """ Get attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this zone/zone template is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        return self._associated_multicast_channel_map_id

    def _set_associated_multicast_channel_map_id(self, value):
        """ Set attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this zone/zone template is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        self._associated_multicast_channel_map_id = value

    associated_multicast_channel_map_id = property(_get_associated_multicast_channel_map_id, _set_associated_multicast_channel_map_id)
    
    def _get_netmask(self):
        """ Get attribute netmask

            Netmask of the subnet defined

        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set attribute netmask

            Netmask of the subnet defined

        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_multicast(self):
        """ Get attribute multicast

            multicast is enum that indicates multicast policy on zone/zone template. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        return self._multicast

    def _set_multicast(self, value):
        """ Set attribute multicast

            multicast is enum that indicates multicast policy on zone/zone template. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        self._multicast = value

    multicast = property(_get_multicast, _set_multicast)
    
    def _get_address(self):
        """ Get attribute address

            IP address of the subnet defined. In case of zone, this is an optional field for and allows users to allocate an IP address range to a zone. The VSD will auto-assign IP addresses to subnets from this range if a specific IP address is not defined for the subnet

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            IP address of the subnet defined. In case of zone, this is an optional field for and allows users to allocate an IP address range to a zone. The VSD will auto-assign IP addresses to subnets from this range if a specific IP address is not defined for the subnet

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_number_of_hosts_in_subnets(self):
        """ Get attribute number_of_hosts_in_subnets

            Number of hosts in the subnets where IP addresses are automatically assigned from the zone IP pool

        """
        return self._number_of_hosts_in_subnets

    def _set_number_of_hosts_in_subnets(self, value):
        """ Set attribute number_of_hosts_in_subnets

            Number of hosts in the subnets where IP addresses are automatically assigned from the zone IP pool

        """
        self._number_of_hosts_in_subnets = value

    number_of_hosts_in_subnets = property(_get_number_of_hosts_in_subnets, _set_number_of_hosts_in_subnets)
    
    def _get_name(self):
        """ Get attribute name

            Name of the current entity(Zone or zone template or subnet etc..) Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the current entity(Zone or zone template or subnet etc..) Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"zonetemplate"
