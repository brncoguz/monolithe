# -*- coding: utf-8 -*-
"""

NUGateway
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUJobsFetcher
from ..fetchers import NUWANServicesFetcher
from ..fetchers import NUPortsFetcher
from ..fetchers import NUBootstrapsFetcher
from ..fetchers import NUInfrastructureConfigsFetcher
from ..fetchers import NUBootstrapActivationsFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NULocationsFetcher
from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUPATNATPoolsFetcher
from ..fetchers import NUAlarmsFetcher


class NUGateway(NURESTObject):
    """ Represents a Gateway object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUGateway instance """

        super(NUGateway, self).__init__()

        # Read/Write Attributes
        self.template_id = None  #  The ID of the template that this Gateway was created from. This should be set when instantiating a Gateway - int
        self.auto_disc_gateway_id = None  #  The Auto Discovered Gateway associated with this Gateway Instance - int
        self.bootstrap_id = None  #  The bootstrap details associated with this gateway - int
        self.config_reload_type = None  #   - int
        self.datapath_id = None  #   - int
        self.enterprise_id = None  #  The enterprise associated with this Gateway. This is a read only attribute - int
        self.location_id = None  #  The Gateway's Location - int
        self.pending = None  #  Indicates that this gateway is pending state or state. When in pending state it cannot be modified from REST. - int
        self.permitted_action = None  #  The permitted  action to USE/EXTEND  this Gateway - int
        self.redundancy_group_id = None  #  The Redundancy Gateway Group associated with this Gateway Instance. This is a read only attribute - int
        self.system_id = None  #  Identifier of the Gateway, cannot be modified after creation - int
        self.description = None  #  A description of the Gateway - int
        self.infrastructure_profile_id = None  #  The ID of the infrastructure gateway profile this instance of a Gateway is associated with. - int
        self.name = None  #  Name of the Gateway - int
        self.personality = None  #  Personality of the Gateway - VSG,VRSG,NSG,NONE,OTHER, cannot be changed after creation. - int
        
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=int)
        self.expose_attribute(local_name=u"auto_disc_gateway_id", remote_name=u"autoDiscGatewayID", attribute_type=int)
        self.expose_attribute(local_name=u"bootstrap_id", remote_name=u"bootstrapID", attribute_type=int)
        self.expose_attribute(local_name=u"config_reload_type", remote_name=u"configReloadType", attribute_type=int)
        self.expose_attribute(local_name=u"datapath_id", remote_name=u"datapathID", attribute_type=int)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=int)
        self.expose_attribute(local_name=u"location_id", remote_name=u"locationID", attribute_type=int)
        self.expose_attribute(local_name=u"pending", remote_name=u"pending", attribute_type=int)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=int)
        self.expose_attribute(local_name=u"redundancy_group_id", remote_name=u"redundancyGroupID", attribute_type=int)
        self.expose_attribute(local_name=u"system_id", remote_name=u"systemID", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"infrastructure_profile_id", remote_name=u"infrastructureProfileID", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"personality", remote_name=u"personality", attribute_type=int)
        
        # Fetchers
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_object(nurest_object=self, local_name=u"jobs")
        self.wan_services = []
        self.wan_services_fetcher = NUWANServicesFetcher.fetcher_with_object(nurest_object=self, local_name=u"wan_services")
        self.ports = []
        self.ports_fetcher = NUPortsFetcher.fetcher_with_object(nurest_object=self, local_name=u"ports")
        self.bootstraps = []
        self.bootstraps_fetcher = NUBootstrapsFetcher.fetcher_with_object(nurest_object=self, local_name=u"bootstraps")
        self.infrastructure_configs = []
        self.infrastructure_configs_fetcher = NUInfrastructureConfigsFetcher.fetcher_with_object(nurest_object=self, local_name=u"infrastructure_configs")
        self.bootstrap_activations = []
        self.bootstrap_activations_fetcher = NUBootstrapActivationsFetcher.fetcher_with_object(nurest_object=self, local_name=u"bootstrap_activations")
        self.permitted_actions = []
        self.permitted_actions_fetcher = NUPermittedActionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"permitted_actions")
        self.locations = []
        self.locations_fetcher = NULocationsFetcher.fetcher_with_object(nurest_object=self, local_name=u"locations")
        self.enterprise_permissions = []
        self.enterprise_permissions_fetcher = NUEnterprisePermissionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"enterprise_permissions")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.patnat_pools = []
        self.patnat_pools_fetcher = NUPATNATPoolsFetcher.fetcher_with_object(nurest_object=self, local_name=u"patnat_pools")
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_object(nurest_object=self, local_name=u"alarms")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"gateway"


