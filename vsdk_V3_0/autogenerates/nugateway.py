# -*- coding: utf-8 -*-

"""
NUGateway
Represents Gateway object.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUPATNATPoolsFetcher
from ..fetchers import NUInfrastructureConfigsFetcher
from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NULocationsFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUWANServicesFetcher
from ..fetchers import NUBootstrapActivationsFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUBootstrapsFetcher
from ..fetchers import NUPortsFetcher
from ..fetchers import NUPermittedActionsFetcher
from bambou import NURESTObject


class NUGateway(NURESTObject):
    """ Represents a Gateway object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Gateway instance

        """
        super(NUGateway, self).__init__()

        # Read/Write Attributes
        
        self._infrastructure_profile_id = str()
        self._bootstrap_id = str()
        self._description = str()
        self._auto_disc_gateway_id = str()
        self._location_id = str()
        self._name = str()
        self._enterprise_id = str()
        self._system_id = str()
        self._permitted_action = str()
        self._template_id = str()
        self._redundancy_group_id = str()
        self._config_reload_type = str()
        self._datapath_id = str()
        self._pending = bool()
        self._personality = str()
        
        self.expose_attribute(local_name=u"infrastructure_profile_id", remote_name=u"infrastructureProfileID", attribute_type=str)
        self.expose_attribute(local_name=u"bootstrap_id", remote_name=u"bootstrapID", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"auto_disc_gateway_id", remote_name=u"autoDiscGatewayID", attribute_type=str)
        self.expose_attribute(local_name=u"location_id", remote_name=u"locationID", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str)
        self.expose_attribute(local_name=u"system_id", remote_name=u"systemID", attribute_type=str)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=str, choices=[u'EXTEND', u'INSTANTIATE', u'USE', u'READ', u'ALL'])
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=str)
        self.expose_attribute(local_name=u"redundancy_group_id", remote_name=u"redundancyGroupID", attribute_type=str)
        self.expose_attribute(local_name=u"config_reload_type", remote_name=u"configReloadType", attribute_type=str, choices=[u'APPLIED', u'UNKNOWN', u'PENDING'])
        self.expose_attribute(local_name=u"datapath_id", remote_name=u"datapathID", attribute_type=str)
        self.expose_attribute(local_name=u"pending", remote_name=u"pending", attribute_type=bool)
        self.expose_attribute(local_name=u"personality", remote_name=u"personality", attribute_type=str, choices=[u'DC7X50', u'OTHER', u'VRSG', u'VSG', u'VSA', u'HARDWARE_VTEP', u'NSG'])
        
        # Fetchers
        
        self.patnatpools = []
        self.patnatpools_fetcher = NUPATNATPoolsFetcher.fetcher_with_entity(entity=self, local_name=u"patnatpools")
        
        self.infraconfig = []
        self.infraconfig_fetcher = NUInfrastructureConfigsFetcher.fetcher_with_entity(entity=self, local_name=u"infraconfig")
        
        self.enterprisepermissions = []
        self.enterprisepermissions_fetcher = NUEnterprisePermissionsFetcher.fetcher_with_entity(entity=self, local_name=u"enterprisepermissions")
        
        self.locations = []
        self.locations_fetcher = NULocationsFetcher.fetcher_with_entity(entity=self, local_name=u"locations")
        
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_entity(entity=self, local_name=u"jobs")
        
        self.services = []
        self.services_fetcher = NUWANServicesFetcher.fetcher_with_entity(entity=self, local_name=u"services")
        
        self.bootstrapactivations = []
        self.bootstrapactivations_fetcher = NUBootstrapActivationsFetcher.fetcher_with_entity(entity=self, local_name=u"bootstrapactivations")
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        self.bootstraps = []
        self.bootstraps_fetcher = NUBootstrapsFetcher.fetcher_with_entity(entity=self, local_name=u"bootstraps")
        
        self.ports = []
        self.ports_fetcher = NUPortsFetcher.fetcher_with_entity(entity=self, local_name=u"ports")
        
        self.permissions = []
        self.permissions_fetcher = NUPermittedActionsFetcher.fetcher_with_entity(entity=self, local_name=u"permissions")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_infrastructure_profile_id(self):
        """ Get attribute infrastructure_profile_id

            The ID of the infrastructure gateway profile this instance of a Gateway is associated with.

        """
        return self._infrastructure_profile_id

    def _set_infrastructure_profile_id(self, value):
        """ Set attribute infrastructure_profile_id

            The ID of the infrastructure gateway profile this instance of a Gateway is associated with.

        """
        self._infrastructure_profile_id = value

    infrastructure_profile_id = property(_get_infrastructure_profile_id, _set_infrastructure_profile_id)
    
    def _get_bootstrap_id(self):
        """ Get attribute bootstrap_id

            The bootstrap details associated with this gateway

        """
        return self._bootstrap_id

    def _set_bootstrap_id(self, value):
        """ Set attribute bootstrap_id

            The bootstrap details associated with this gateway

        """
        self._bootstrap_id = value

    bootstrap_id = property(_get_bootstrap_id, _set_bootstrap_id)
    
    def _get_description(self):
        """ Get attribute description

            A description of the Gateway

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the Gateway

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_auto_disc_gateway_id(self):
        """ Get attribute auto_disc_gateway_id

            The Auto Discovered Gateway associated with this Gateway Instance

        """
        return self._auto_disc_gateway_id

    def _set_auto_disc_gateway_id(self, value):
        """ Set attribute auto_disc_gateway_id

            The Auto Discovered Gateway associated with this Gateway Instance

        """
        self._auto_disc_gateway_id = value

    auto_disc_gateway_id = property(_get_auto_disc_gateway_id, _set_auto_disc_gateway_id)
    
    def _get_location_id(self):
        """ Get attribute location_id

            The Gateway's Location

        """
        return self._location_id

    def _set_location_id(self, value):
        """ Set attribute location_id

            The Gateway's Location

        """
        self._location_id = value

    location_id = property(_get_location_id, _set_location_id)
    
    def _get_name(self):
        """ Get attribute name

            Name of the Gateway

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the Gateway

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_enterprise_id(self):
        """ Get attribute enterprise_id

            The enterprise associated with this Gateway. This is a read only attribute

        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set attribute enterprise_id

            The enterprise associated with this Gateway. This is a read only attribute

        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_system_id(self):
        """ Get attribute system_id

            Identifier of the Gateway, cannot be modified after creation

        """
        return self._system_id

    def _set_system_id(self, value):
        """ Set attribute system_id

            Identifier of the Gateway, cannot be modified after creation

        """
        self._system_id = value

    system_id = property(_get_system_id, _set_system_id)
    
    def _get_permitted_action(self):
        """ Get attribute permitted_action

            The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        return self._permitted_action

    def _set_permitted_action(self, value):
        """ Set attribute permitted_action

            The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        self._permitted_action = value

    permitted_action = property(_get_permitted_action, _set_permitted_action)
    
    def _get_template_id(self):
        """ Get attribute template_id

            The ID of the template that this Gateway was created from. This should be set when instantiating a Gateway

        """
        return self._template_id

    def _set_template_id(self, value):
        """ Set attribute template_id

            The ID of the template that this Gateway was created from. This should be set when instantiating a Gateway

        """
        self._template_id = value

    template_id = property(_get_template_id, _set_template_id)
    
    def _get_redundancy_group_id(self):
        """ Get attribute redundancy_group_id

            The Redundancy Gateway Group associated with this Gateway Instance. This is a read only attribute

        """
        return self._redundancy_group_id

    def _set_redundancy_group_id(self, value):
        """ Set attribute redundancy_group_id

            The Redundancy Gateway Group associated with this Gateway Instance. This is a read only attribute

        """
        self._redundancy_group_id = value

    redundancy_group_id = property(_get_redundancy_group_id, _set_redundancy_group_id)
    
    def _get_config_reload_type(self):
        """ Get attribute config_reload_type

             Possible values are PENDING, APPLIED, UNKNOWN, .

        """
        return self._config_reload_type

    def _set_config_reload_type(self, value):
        """ Set attribute config_reload_type

             Possible values are PENDING, APPLIED, UNKNOWN, .

        """
        self._config_reload_type = value

    config_reload_type = property(_get_config_reload_type, _set_config_reload_type)
    
    def _get_datapath_id(self):
        """ Get attribute datapath_id

            

        """
        return self._datapath_id

    def _set_datapath_id(self, value):
        """ Set attribute datapath_id

            

        """
        self._datapath_id = value

    datapath_id = property(_get_datapath_id, _set_datapath_id)
    
    def _get_pending(self):
        """ Get attribute pending

            Indicates that this gateway is pending state or state. When in pending state it cannot be modified from REST.

        """
        return self._pending

    def _set_pending(self, value):
        """ Set attribute pending

            Indicates that this gateway is pending state or state. When in pending state it cannot be modified from REST.

        """
        self._pending = value

    pending = property(_get_pending, _set_pending)
    
    def _get_personality(self):
        """ Get attribute personality

            Personality of the Gateway - VSG,VRSG,NSG,NONE,OTHER, cannot be changed after creation. Possible values are VSG, VSA, VRSG, DC7X50, NSG, HARDWARE_VTEP, OTHER, .

        """
        return self._personality

    def _set_personality(self, value):
        """ Set attribute personality

            Personality of the Gateway - VSG,VRSG,NSG,NONE,OTHER, cannot be changed after creation. Possible values are VSG, VSA, VRSG, DC7X50, NSG, HARDWARE_VTEP, OTHER, .

        """
        self._personality = value

    personality = property(_get_personality, _set_personality)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"gateway"
