# -*- coding: utf-8 -*-

"""
NUPortTemplate
Represents Port Template object under a given gateway template object

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVlanTemplatesFetcher
from bambou import NURESTObject


class NUPortTemplate(NURESTObject):
    """ Represents a PortTemplate object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a PortTemplate instance

        """
        super(NUPortTemplate, self).__init__()

        # Read/Write Attributes
        
        self._infrastructure_profile_id = str()
        self._name = str()
        self._physical_name = str()
        self._vlan_range = str()
        self._associated_egress_qos_policy_id = str()
        self._port_type = str()
        self._description = str()
        
        self.expose_attribute(local_name=u"infrastructure_profile_id", remote_name=u"infrastructureProfileID", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"physical_name", remote_name=u"physicalName", attribute_type=str)
        self.expose_attribute(local_name=u"vlan_range", remote_name=u"VLANRange", attribute_type=str)
        self.expose_attribute(local_name=u"associated_egress_qos_policy_id", remote_name=u"associatedEgressQOSPolicyID", attribute_type=str)
        self.expose_attribute(local_name=u"port_type", remote_name=u"portType", attribute_type=str, choices=[u'ACCESS', u'NETWORK'])
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        
        # Fetchers
        
        self.vlantemplates = []
        self.vlantemplates_fetcher = NUVlanTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"vlantemplates")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_infrastructure_profile_id(self):
        """ Get attribute infrastructure_profile_id

            The ID of the infrastructure profile this is associated to

        """
        return self._infrastructure_profile_id

    def _set_infrastructure_profile_id(self, value):
        """ Set attribute infrastructure_profile_id

            The ID of the infrastructure profile this is associated to

        """
        self._infrastructure_profile_id = value

    infrastructure_profile_id = property(_get_infrastructure_profile_id, _set_infrastructure_profile_id)
    
    def _get_name(self):
        """ Get attribute name

            Name of the Port

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the Port

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_physical_name(self):
        """ Get attribute physical_name

            Identifier of the Port

        """
        return self._physical_name

    def _set_physical_name(self, value):
        """ Set attribute physical_name

            Identifier of the Port

        """
        self._physical_name = value

    physical_name = property(_get_physical_name, _set_physical_name)
    
    def _get_vlan_range(self):
        """ Get attribute vlan_range

            VLAN Range of the Port

        """
        return self._vlan_range

    def _set_vlan_range(self, value):
        """ Set attribute vlan_range

            VLAN Range of the Port

        """
        self._vlan_range = value

    vlan_range = property(_get_vlan_range, _set_vlan_range)
    
    def _get_associated_egress_qos_policy_id(self):
        """ Get attribute associated_egress_qos_policy_id

            ID of the Egress QOS Policy associated with this Vlan.

        """
        return self._associated_egress_qos_policy_id

    def _set_associated_egress_qos_policy_id(self, value):
        """ Set attribute associated_egress_qos_policy_id

            ID of the Egress QOS Policy associated with this Vlan.

        """
        self._associated_egress_qos_policy_id = value

    associated_egress_qos_policy_id = property(_get_associated_egress_qos_policy_id, _set_associated_egress_qos_policy_id)
    
    def _get_port_type(self):
        """ Get attribute port_type

            Type of the Port - NETWORK,ACCESS Possible values are ACCESS, NETWORK, .

        """
        return self._port_type

    def _set_port_type(self, value):
        """ Set attribute port_type

            Type of the Port - NETWORK,ACCESS Possible values are ACCESS, NETWORK, .

        """
        self._port_type = value

    port_type = property(_get_port_type, _set_port_type)
    
    def _get_description(self):
        """ Get attribute description

            A description of the Port

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the Port

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"porttemplate"
