# -*- coding: utf-8 -*-
"""

NUEnterpriseProfile
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUEnterprisesFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUMultiCastChannelMapsFetcher


class NUEnterpriseProfile(NURESTObject):
    """ Represents a EnterpriseProfile object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUEnterpriseProfile instance """

        super(NUEnterpriseProfile, self).__init__()

        # Read/Write Attributes
        self.allow_advanced_qos_configuration = None  #  Controls whether this enterprise has access to advanced QoS settings - int
        self.allowed_forwarding_classes = None  #  Allowed Forwarding Classes for this enterprise. They are A,B,C,D,E,G,H. - int
        self.allow_gateway_management = None  #  If set to true lets the enterprise admin create gateway templates and instances. - int
        self.allow_trusted_forwarding_class = None  #  Controls whether QoS policies and templates created under this enterprise set the trusted flag to true - int
        self.description = None  #  A description of the enterprise - int
        self.dhcp_lease_interval = None  #  DHCP Lease Interval (in hrs) to be used by an enterprise. - int
        self.dhcp_mapping_retention_timer = None  #  DHCP Mapping Retention Timer (in secs ) to be used by an enterprise. - int
        self.floating_ips_quota = None  #  Quota set for the number of floating IPs to be used by an enterprise. - int
        self.name = None  #  The unique name of the enterprise. Valid characters are alphabets, numbers, space and hyphen( - ). - int
        
        self.expose_attribute(local_name=u"allow_advanced_qos_configuration", remote_name=u"allowAdvancedQOSConfiguration", attribute_type=int)
        self.expose_attribute(local_name=u"allowed_forwarding_classes", remote_name=u"allowedForwardingClasses", attribute_type=int)
        self.expose_attribute(local_name=u"allow_gateway_management", remote_name=u"allowGatewayManagement", attribute_type=int)
        self.expose_attribute(local_name=u"allow_trusted_forwarding_class", remote_name=u"allowTrustedForwardingClass", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"dhcp_lease_interval", remote_name=u"DHCPLeaseInterval", attribute_type=int)
        self.expose_attribute(local_name=u"dhcp_mapping_retention_timer", remote_name=u"DHCPMappingRetentionTimer", attribute_type=int)
        self.expose_attribute(local_name=u"floating_ips_quota", remote_name=u"floatingIPsQuota", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        
        # Fetchers
        self.enterprises = []
        self.enterprises_fetcher = NUEnterprisesFetcher.fetcher_with_object(nurest_object=self, local_name=u"enterprises")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.multi_cast_channel_maps = []
        self.multi_cast_channel_maps_fetcher = NUMultiCastChannelMapsFetcher.fetcher_with_object(nurest_object=self, local_name=u"multi_cast_channel_maps")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"enterpriseprofile"


