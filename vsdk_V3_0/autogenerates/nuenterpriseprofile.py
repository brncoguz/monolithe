# -*- coding: utf-8 -*-

"""
NUEnterpriseProfile
Enterprise profile, used to store an enterprise's policies, quota etc

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUMultiCastChannelMapsFetcher
from ..fetchers import NUEnterprisesFetcher
from bambou import NURESTObject


class NUEnterpriseProfile(NURESTObject):
    """ Represents a EnterpriseProfile object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a EnterpriseProfile instance

        """
        super(NUEnterpriseProfile, self).__init__()

        # Read/Write Attributes
        
        self._dhcp_mapping_retention_timer = int()
        self._allow_gateway_management = bool()
        self._name = str()
        self._dhcp_lease_interval = int()
        self._floating_ips_quota = int()
        self._allowed_forwarding_classes = str()
        self._allow_trusted_forwarding_class = bool()
        self._allow_advanced_qos_configuration = bool()
        self._description = str()
        
        self.expose_attribute(local_name=u"dhcp_mapping_retention_timer", remote_name=u"DHCPMappingRetentionTimer", attribute_type=int)
        self.expose_attribute(local_name=u"allow_gateway_management", remote_name=u"allowGatewayManagement", attribute_type=bool)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"dhcp_lease_interval", remote_name=u"DHCPLeaseInterval", attribute_type=int)
        self.expose_attribute(local_name=u"floating_ips_quota", remote_name=u"floatingIPsQuota", attribute_type=int)
        self.expose_attribute(local_name=u"allowed_forwarding_classes", remote_name=u"allowedForwardingClasses", attribute_type=str, choices=[u'D', u'E', u'F', u'G', u'A', u'B', u'C', u'H', u'NONE'])
        self.expose_attribute(local_name=u"allow_trusted_forwarding_class", remote_name=u"allowTrustedForwardingClass", attribute_type=bool)
        self.expose_attribute(local_name=u"allow_advanced_qos_configuration", remote_name=u"allowAdvancedQOSConfiguration", attribute_type=bool)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        
        # Fetchers
        
        self.multicastchannelmaps = []
        self.multicastchannelmaps_fetcher = NUMultiCastChannelMapsFetcher.fetcher_with_entity(entity=self, local_name=u"multicastchannelmaps")
        
        self.enterprises = []
        self.enterprises_fetcher = NUEnterprisesFetcher.fetcher_with_entity(entity=self, local_name=u"enterprises")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_dhcp_mapping_retention_timer(self):
        """ Get attribute dhcp_mapping_retention_timer

            DHCP Mapping Retention Timer (in secs ) to be used by an enterprise.

        """
        return self._dhcp_mapping_retention_timer

    def _set_dhcp_mapping_retention_timer(self, value):
        """ Set attribute dhcp_mapping_retention_timer

            DHCP Mapping Retention Timer (in secs ) to be used by an enterprise.

        """
        self._dhcp_mapping_retention_timer = value

    dhcp_mapping_retention_timer = property(_get_dhcp_mapping_retention_timer, _set_dhcp_mapping_retention_timer)
    
    def _get_allow_gateway_management(self):
        """ Get attribute allow_gateway_management

            If set to true lets the enterprise admin create gateway templates and instances.

        """
        return self._allow_gateway_management

    def _set_allow_gateway_management(self, value):
        """ Set attribute allow_gateway_management

            If set to true lets the enterprise admin create gateway templates and instances.

        """
        self._allow_gateway_management = value

    allow_gateway_management = property(_get_allow_gateway_management, _set_allow_gateway_management)
    
    def _get_name(self):
        """ Get attribute name

            The unique name of the enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            The unique name of the enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_dhcp_lease_interval(self):
        """ Get attribute dhcp_lease_interval

            DHCP Lease Interval (in hrs) to be used by an enterprise.

        """
        return self._dhcp_lease_interval

    def _set_dhcp_lease_interval(self, value):
        """ Set attribute dhcp_lease_interval

            DHCP Lease Interval (in hrs) to be used by an enterprise.

        """
        self._dhcp_lease_interval = value

    dhcp_lease_interval = property(_get_dhcp_lease_interval, _set_dhcp_lease_interval)
    
    def _get_floating_ips_quota(self):
        """ Get attribute floating_ips_quota

            Quota set for the number of floating IPs to be used by an enterprise.

        """
        return self._floating_ips_quota

    def _set_floating_ips_quota(self, value):
        """ Set attribute floating_ips_quota

            Quota set for the number of floating IPs to be used by an enterprise.

        """
        self._floating_ips_quota = value

    floating_ips_quota = property(_get_floating_ips_quota, _set_floating_ips_quota)
    
    def _get_allowed_forwarding_classes(self):
        """ Get attribute allowed_forwarding_classes

            Allowed Forwarding Classes for this enterprise. Possible values are NONE, A, B, C, D, E, F, G, H, .

        """
        return self._allowed_forwarding_classes

    def _set_allowed_forwarding_classes(self, value):
        """ Set attribute allowed_forwarding_classes

            Allowed Forwarding Classes for this enterprise. Possible values are NONE, A, B, C, D, E, F, G, H, .

        """
        self._allowed_forwarding_classes = value

    allowed_forwarding_classes = property(_get_allowed_forwarding_classes, _set_allowed_forwarding_classes)
    
    def _get_allow_trusted_forwarding_class(self):
        """ Get attribute allow_trusted_forwarding_class

            Controls whether QoS policies and templates created under this enterprise set the trusted flag to true

        """
        return self._allow_trusted_forwarding_class

    def _set_allow_trusted_forwarding_class(self, value):
        """ Set attribute allow_trusted_forwarding_class

            Controls whether QoS policies and templates created under this enterprise set the trusted flag to true

        """
        self._allow_trusted_forwarding_class = value

    allow_trusted_forwarding_class = property(_get_allow_trusted_forwarding_class, _set_allow_trusted_forwarding_class)
    
    def _get_allow_advanced_qos_configuration(self):
        """ Get attribute allow_advanced_qos_configuration

            Controls whether this enterprise has access to advanced QoS settings

        """
        return self._allow_advanced_qos_configuration

    def _set_allow_advanced_qos_configuration(self, value):
        """ Set attribute allow_advanced_qos_configuration

            Controls whether this enterprise has access to advanced QoS settings

        """
        self._allow_advanced_qos_configuration = value

    allow_advanced_qos_configuration = property(_get_allow_advanced_qos_configuration, _set_allow_advanced_qos_configuration)
    
    def _get_description(self):
        """ Get attribute description

            A description of the enterprise

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the enterprise

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"enterpriseprofile"
