# -*- coding: utf-8 -*-
"""

NURedundantGWGrp
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUWANServicesFetcher
from ..fetchers import NUPortsFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUGatewaysFetcher
from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUAlarmsFetcher


class NURedundantGWGrp(NURESTObject):
    """ Represents a RedundantGWGrp object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NURedundantGWGrp instance """

        super(NURedundantGWGrp, self).__init__()

        # Read/Write Attributes
        self.gateway_peer1_autodiscovered_gateway_id = None  #  The Auto Discovered Gateway configuration owner in this Redundant Group.  - int
        self.gateway_peer2_autodiscovered_gateway_id = None  #  The Auto Discovered Gateway  peer in this Redundant Group - int
        self.description = None  #   Description of the Redundancy Group - int
        self.enterprise_id = None  #  The enterprise associated with this Redundant Group. This is a read only attribute - int
        self.redundant_gateway_status = None  #  The status of  Redundant Group, possible values are FAILED, SUCCESS - int
        self.gateway_peer1_id = None  #  The gateway configuration owner in this Redundant Group. when Redundant Group is deleted this gateway will recieve vport associations  - int
        self.gateway_peer1_name = None  #  The gateway   configuration owner name in this Redundant Group - int
        self.gateway_peer2_id = None  #  The gateway peer in this Redundant Group. when Redundant Group is deleted this gateway will not recieve vport associations  - int
        self.gateway_peer2_name = None  #  The gateway peer name in this Redundant Group - int
        self.name = None  #  Name of the Redundancy Group  - int
        self.permitted_action = None  #  The permitted  action to USE/EXTEND  this Gateway - int
        self.personality = None  #  derived personality of the Redundancy Group - VSG,VRSG,NSG,OTHER - int
        
        self.expose_attribute(local_name=u"gateway_peer1_autodiscovered_gateway_id", remote_name=u"gatewayPeer1AutodiscoveredGatewayID", attribute_type=int)
        self.expose_attribute(local_name=u"gateway_peer2_autodiscovered_gateway_id", remote_name=u"gatewayPeer2AutodiscoveredGatewayID", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=int)
        self.expose_attribute(local_name=u"redundant_gateway_status", remote_name=u"redundantGatewayStatus", attribute_type=int)
        self.expose_attribute(local_name=u"gateway_peer1_id", remote_name=u"gatewayPeer1ID", attribute_type=int)
        self.expose_attribute(local_name=u"gateway_peer1_name", remote_name=u"gatewayPeer1Name", attribute_type=int)
        self.expose_attribute(local_name=u"gateway_peer2_id", remote_name=u"gatewayPeer2ID", attribute_type=int)
        self.expose_attribute(local_name=u"gateway_peer2_name", remote_name=u"gatewayPeer2Name", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=int)
        self.expose_attribute(local_name=u"personality", remote_name=u"personality", attribute_type=int)
        
        # Fetchers
        self.wan_services = []
        self.wan_services_fetcher = NUWANServicesFetcher.fetcher_with_object(nurest_object=self, local_name=u"wan_services")
        self.ports = []
        self.ports_fetcher = NUPortsFetcher.fetcher_with_object(nurest_object=self, local_name=u"ports")
        self.permitted_actions = []
        self.permitted_actions_fetcher = NUPermittedActionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"permitted_actions")
        self.gateways = []
        self.gateways_fetcher = NUGatewaysFetcher.fetcher_with_object(nurest_object=self, local_name=u"gateways")
        self.enterprise_permissions = []
        self.enterprise_permissions_fetcher = NUEnterprisePermissionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"enterprise_permissions")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_object(nurest_object=self, local_name=u"alarms")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"redundantgwgrp"


