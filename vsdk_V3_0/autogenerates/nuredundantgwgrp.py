# -*- coding: utf-8 -*-

"""
NURedundantGWGrp
Represents Redundant Group formed by two Gateways

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUWANServicesFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUPortsFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUGatewaysFetcher
from bambou import NURESTObject


class NURedundantGWGrp(NURESTObject):
    """ Represents a RedundantGWGrp object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a RedundantGWGrp instance

        """
        super(NURedundantGWGrp, self).__init__()

        # Read/Write Attributes
        
        self._gateway_peer2_name = str()
        self._redundant_gateway_status = str()
        self._name = str()
        self._gateway_peer2_autodiscovered_gateway_id = str()
        self._enterprise_id = str()
        self._permitted_action = str()
        self._gateway_peer1_id = str()
        self._gateway_peer1_autodiscovered_gateway_id = str()
        self._personality = str()
        self._gateway_peer2_id = str()
        self._gateway_peer1_name = str()
        self._description = str()
        
        self.expose_attribute(local_name=u"gateway_peer2_name", remote_name=u"gatewayPeer2Name", attribute_type=str)
        self.expose_attribute(local_name=u"redundant_gateway_status", remote_name=u"redundantGatewayStatus", attribute_type=str, choices=[u'SUCCESS', u'FAILED'])
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"gateway_peer2_autodiscovered_gateway_id", remote_name=u"gatewayPeer2AutodiscoveredGatewayID", attribute_type=str)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=str, choices=[u'EXTEND', u'INSTANTIATE', u'USE', u'READ', u'ALL'])
        self.expose_attribute(local_name=u"gateway_peer1_id", remote_name=u"gatewayPeer1ID", attribute_type=str)
        self.expose_attribute(local_name=u"gateway_peer1_autodiscovered_gateway_id", remote_name=u"gatewayPeer1AutodiscoveredGatewayID", attribute_type=str)
        self.expose_attribute(local_name=u"personality", remote_name=u"personality", attribute_type=str, choices=[u'DC7X50', u'OTHER', u'VRSG', u'VSG', u'VSA', u'HARDWARE_VTEP', u'NSG'])
        self.expose_attribute(local_name=u"gateway_peer2_id", remote_name=u"gatewayPeer2ID", attribute_type=str)
        self.expose_attribute(local_name=u"gateway_peer1_name", remote_name=u"gatewayPeer1Name", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        
        # Fetchers
        
        self.enterprisepermissions = []
        self.enterprisepermissions_fetcher = NUEnterprisePermissionsFetcher.fetcher_with_entity(entity=self, local_name=u"enterprisepermissions")
        
        self.services = []
        self.services_fetcher = NUWANServicesFetcher.fetcher_with_entity(entity=self, local_name=u"services")
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        self.ports = []
        self.ports_fetcher = NUPortsFetcher.fetcher_with_entity(entity=self, local_name=u"ports")
        
        self.permissions = []
        self.permissions_fetcher = NUPermittedActionsFetcher.fetcher_with_entity(entity=self, local_name=u"permissions")
        
        self.gateways = []
        self.gateways_fetcher = NUGatewaysFetcher.fetcher_with_entity(entity=self, local_name=u"gateways")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_gateway_peer2_name(self):
        """ Get attribute gateway_peer2_name

            The gateway peer name in this Redundant Group

        """
        return self._gateway_peer2_name

    def _set_gateway_peer2_name(self, value):
        """ Set attribute gateway_peer2_name

            The gateway peer name in this Redundant Group

        """
        self._gateway_peer2_name = value

    gateway_peer2_name = property(_get_gateway_peer2_name, _set_gateway_peer2_name)
    
    def _get_redundant_gateway_status(self):
        """ Get attribute redundant_gateway_status

            The status of  Redundant Group, possible values are FAILED, SUCCESS Possible values are FAILED, SUCCESS, .

        """
        return self._redundant_gateway_status

    def _set_redundant_gateway_status(self, value):
        """ Set attribute redundant_gateway_status

            The status of  Redundant Group, possible values are FAILED, SUCCESS Possible values are FAILED, SUCCESS, .

        """
        self._redundant_gateway_status = value

    redundant_gateway_status = property(_get_redundant_gateway_status, _set_redundant_gateway_status)
    
    def _get_name(self):
        """ Get attribute name

            Name of the Redundancy Group 

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the Redundancy Group 

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_gateway_peer2_autodiscovered_gateway_id(self):
        """ Get attribute gateway_peer2_autodiscovered_gateway_id

            The Auto Discovered Gateway  peer in this Redundant Group

        """
        return self._gateway_peer2_autodiscovered_gateway_id

    def _set_gateway_peer2_autodiscovered_gateway_id(self, value):
        """ Set attribute gateway_peer2_autodiscovered_gateway_id

            The Auto Discovered Gateway  peer in this Redundant Group

        """
        self._gateway_peer2_autodiscovered_gateway_id = value

    gateway_peer2_autodiscovered_gateway_id = property(_get_gateway_peer2_autodiscovered_gateway_id, _set_gateway_peer2_autodiscovered_gateway_id)
    
    def _get_enterprise_id(self):
        """ Get attribute enterprise_id

            The enterprise associated with this Redundant Group. This is a read only attribute

        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set attribute enterprise_id

            The enterprise associated with this Redundant Group. This is a read only attribute

        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_permitted_action(self):
        """ Get attribute permitted_action

            The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        return self._permitted_action

    def _set_permitted_action(self, value):
        """ Set attribute permitted_action

            The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        self._permitted_action = value

    permitted_action = property(_get_permitted_action, _set_permitted_action)
    
    def _get_gateway_peer1_id(self):
        """ Get attribute gateway_peer1_id

            The gateway configuration owner in this Redundant Group. when Redundant Group is deleted this gateway will recieve vport associations 

        """
        return self._gateway_peer1_id

    def _set_gateway_peer1_id(self, value):
        """ Set attribute gateway_peer1_id

            The gateway configuration owner in this Redundant Group. when Redundant Group is deleted this gateway will recieve vport associations 

        """
        self._gateway_peer1_id = value

    gateway_peer1_id = property(_get_gateway_peer1_id, _set_gateway_peer1_id)
    
    def _get_gateway_peer1_autodiscovered_gateway_id(self):
        """ Get attribute gateway_peer1_autodiscovered_gateway_id

            The Auto Discovered Gateway configuration owner in this Redundant Group. 

        """
        return self._gateway_peer1_autodiscovered_gateway_id

    def _set_gateway_peer1_autodiscovered_gateway_id(self, value):
        """ Set attribute gateway_peer1_autodiscovered_gateway_id

            The Auto Discovered Gateway configuration owner in this Redundant Group. 

        """
        self._gateway_peer1_autodiscovered_gateway_id = value

    gateway_peer1_autodiscovered_gateway_id = property(_get_gateway_peer1_autodiscovered_gateway_id, _set_gateway_peer1_autodiscovered_gateway_id)
    
    def _get_personality(self):
        """ Get attribute personality

            derived personality of the Redundancy Group - VSG,VRSG,NSG,OTHER Possible values are VSG, VSA, VRSG, DC7X50, NSG, HARDWARE_VTEP, OTHER, .

        """
        return self._personality

    def _set_personality(self, value):
        """ Set attribute personality

            derived personality of the Redundancy Group - VSG,VRSG,NSG,OTHER Possible values are VSG, VSA, VRSG, DC7X50, NSG, HARDWARE_VTEP, OTHER, .

        """
        self._personality = value

    personality = property(_get_personality, _set_personality)
    
    def _get_gateway_peer2_id(self):
        """ Get attribute gateway_peer2_id

            The gateway peer in this Redundant Group. when Redundant Group is deleted this gateway will not recieve vport associations 

        """
        return self._gateway_peer2_id

    def _set_gateway_peer2_id(self, value):
        """ Set attribute gateway_peer2_id

            The gateway peer in this Redundant Group. when Redundant Group is deleted this gateway will not recieve vport associations 

        """
        self._gateway_peer2_id = value

    gateway_peer2_id = property(_get_gateway_peer2_id, _set_gateway_peer2_id)
    
    def _get_gateway_peer1_name(self):
        """ Get attribute gateway_peer1_name

            The gateway   configuration owner name in this Redundant Group

        """
        return self._gateway_peer1_name

    def _set_gateway_peer1_name(self, value):
        """ Set attribute gateway_peer1_name

            The gateway   configuration owner name in this Redundant Group

        """
        self._gateway_peer1_name = value

    gateway_peer1_name = property(_get_gateway_peer1_name, _set_gateway_peer1_name)
    
    def _get_description(self):
        """ Get attribute description

             Description of the Redundancy Group

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

             Description of the Redundancy Group

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"redundancygroup"
