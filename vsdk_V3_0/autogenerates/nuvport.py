# -*- coding: utf-8 -*-
"""

NUVPort
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUBridgeInterfacesFetcher
from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUHostInterfacesFetcher
from ..fetchers import NUVMInterfacesFetcher
from ..fetchers import NUVRSsFetcher
from ..fetchers import NURedirectionTargetsFetcher
from ..fetchers import NUVPortMirrorsFetcher
from ..fetchers import NUPolicyGroupsFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUQosPrimitivesFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUEventLogsFetcher


class NUVPort(NURESTObject):
    """ Represents a VPort object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUVPort instance """

        super(NUVPort, self).__init__()

        # Read/Write Attributes
        self.active = None  #  Indicates if this vport is up or down - int
        self.address_spoofing = None  #  Indicates if address spoofing is ENABLED/DISABLED/INHERITED for this vport - int
        self.vlanid = None  #  associated Vlan of this vport - applicable for type host/bridge - int
        self.description = None  #  Description for this vport - int
        self.domain_id = None  #  ID the Domain associated with the VPort - int
        self.multicast = None  #  multicast is enum that indicates multicast policy on Vport. Possible values are ENABLED ,DISABLED  and INHERITED - int
        self.associated_floating_ipid = None  #  Id of Floating IP address associated to this vport - int
        self.has_attached_interfaces = None  #  Indicates that this vport has attached interfaces - int
        self.associated_multicast_channel_map_id = None  #  The ID of the Multi Cast Channel Map  this Vport is associated with. This has to be set when  enableMultiCast is set to ENABLED - int
        self.multi_nicv_port_id = None  #  ID of the Multi NIC VPort associated with the VPort - int
        self.name = None  #  Name of the vport. Valid characters are alphabets, numbers, space and hyphen( - ). - int
        self.operational_state = None  #  Operational State of the VPort - RUNNING/SHUTDOWN - int
        self.system_type = None  #  Indicates what system it is - SOFTWARE/HARDWARE_VTEP/HARDWARE/ (possible values)  - int
        self.type = None  #  Type of vport - possible values VM/HOST/BRIDGE - int
        self.zone_id = None  #  ID the Zone associated with the VPort - int
        
        self.expose_attribute(local_name=u"active", remote_name=u"active", attribute_type=int)
        self.expose_attribute(local_name=u"address_spoofing", remote_name=u"addressSpoofing", attribute_type=int)
        self.expose_attribute(local_name=u"vlanid", remote_name=u"VLANID", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"domain_id", remote_name=u"domainID", attribute_type=int)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=int)
        self.expose_attribute(local_name=u"associated_floating_ipid", remote_name=u"associatedFloatingIPID", attribute_type=int)
        self.expose_attribute(local_name=u"has_attached_interfaces", remote_name=u"hasAttachedInterfaces", attribute_type=int)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=int)
        self.expose_attribute(local_name=u"multi_nicv_port_id", remote_name=u"multiNICVPortID", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"operational_state", remote_name=u"operationalState", attribute_type=int)
        self.expose_attribute(local_name=u"system_type", remote_name=u"systemType", attribute_type=int)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=int)
        self.expose_attribute(local_name=u"zone_id", remote_name=u"zoneID", attribute_type=int)
        
        # Fetchers
        self.bridge_interfaces = []
        self.bridge_interfaces_fetcher = NUBridgeInterfacesFetcher.fetcher_with_object(nurest_object=self, local_name=u"bridge_interfaces")
        self.statisticss = []
        self.statisticss_fetcher = NUStatisticssFetcher.fetcher_with_object(nurest_object=self, local_name=u"statisticss")
        self.host_interfaces = []
        self.host_interfaces_fetcher = NUHostInterfacesFetcher.fetcher_with_object(nurest_object=self, local_name=u"host_interfaces")
        self.vm_interfaces = []
        self.vm_interfaces_fetcher = NUVMInterfacesFetcher.fetcher_with_object(nurest_object=self, local_name=u"vm_interfaces")
        self.vrss = []
        self.vrss_fetcher = NUVRSsFetcher.fetcher_with_object(nurest_object=self, local_name=u"vrss")
        self.redirection_targets = []
        self.redirection_targets_fetcher = NURedirectionTargetsFetcher.fetcher_with_object(nurest_object=self, local_name=u"redirection_targets")
        self.v_port_mirrors = []
        self.v_port_mirrors_fetcher = NUVPortMirrorsFetcher.fetcher_with_object(nurest_object=self, local_name=u"v_port_mirrors")
        self.policy_groups = []
        self.policy_groups_fetcher = NUPolicyGroupsFetcher.fetcher_with_object(nurest_object=self, local_name=u"policy_groups")
        self.virtual_machines = []
        self.virtual_machines_fetcher = NUVirtualMachinesFetcher.fetcher_with_object(nurest_object=self, local_name=u"virtual_machines")
        self.statistics_policies = []
        self.statistics_policies_fetcher = NUStatisticsPoliciesFetcher.fetcher_with_object(nurest_object=self, local_name=u"statistics_policies")
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_object(nurest_object=self, local_name=u"alarms")
        self.qos_primitives = []
        self.qos_primitives_fetcher = NUQosPrimitivesFetcher.fetcher_with_object(nurest_object=self, local_name=u"qos_primitives")
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_object(nurest_object=self, local_name=u"tcas")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"vport"


