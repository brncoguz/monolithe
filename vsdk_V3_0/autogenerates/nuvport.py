# -*- coding: utf-8 -*-

"""
NUVPort
VPorts are a new level in the domain hierarchy, intended to provide more granular configuration than at subnet, and also support a split workflow, where the vPort is configured and associated with a VM port (or gateway port) before the port exists on the hypervisor or gateway

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUVRSsFetcher
from ..fetchers import NUVMInterfacesFetcher
from ..fetchers import NUHostInterfacesFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from ..fetchers import NUPolicyGroupsFetcher
from ..fetchers import NUBridgeInterfacesFetcher
from ..fetchers import NURedirectionTargetsFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUQosPrimitivesFetcher
from ..fetchers import NUVPortMirrorsFetcher
from bambou import NURESTObject


class NUVPort(NURESTObject):
    """ Represents a VPort object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a VPort instance

        """
        super(NUVPort, self).__init__()

        # Read/Write Attributes
        
        self._has_attached_interfaces = bool()
        self._domain_id = str()
        self._description = str()
        self._system_type = str()
        self._associated_floating_ipid = str()
        self._vlanid = str()
        self._zone_id = str()
        self._associated_multicast_channel_map_id = str()
        self._multicast = str()
        self._address_spoofing = str()
        self._multi_nicv_port_id = str()
        self._active = bool()
        self._operational_state = str()
        self._type = str()
        self._name = str()
        
        self.expose_attribute(local_name=u"has_attached_interfaces", remote_name=u"hasAttachedInterfaces", attribute_type=bool)
        self.expose_attribute(local_name=u"domain_id", remote_name=u"domainID", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"system_type", remote_name=u"systemType", attribute_type=str, choices=[u'HARDWARE', u'NUAGE_VRSG', u'NUAGE_2', u'NUAGE_1', u'HARDWARE_VTEP', u'SOFTWARE'])
        self.expose_attribute(local_name=u"associated_floating_ipid", remote_name=u"associatedFloatingIPID", attribute_type=str)
        self.expose_attribute(local_name=u"vlanid", remote_name=u"VLANID", attribute_type=str)
        self.expose_attribute(local_name=u"zone_id", remote_name=u"zoneID", attribute_type=str)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=str)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=str, choices=[u'ENABLED', u'INHERITED', u'DISABLED'])
        self.expose_attribute(local_name=u"address_spoofing", remote_name=u"addressSpoofing", attribute_type=str, choices=[u'ENABLED', u'INHERITED', u'DISABLED'])
        self.expose_attribute(local_name=u"multi_nicv_port_id", remote_name=u"multiNICVPortID", attribute_type=str)
        self.expose_attribute(local_name=u"active", remote_name=u"active", attribute_type=bool)
        self.expose_attribute(local_name=u"operational_state", remote_name=u"operationalState", attribute_type=str, choices=[u'DOWN', u'UP', u'INIT'])
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, choices=[u'HOST', u'BRIDGE', u'VM'])
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.vms = []
        self.vms_fetcher = NUVirtualMachinesFetcher.fetcher_with_entity(entity=self, local_name=u"vms")
        
        self.statistics = []
        self.statistics_fetcher = NUStatisticssFetcher.fetcher_with_entity(entity=self, local_name=u"statistics")
        
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_entity(entity=self, local_name=u"tcas")
        
        self.vrss = []
        self.vrss_fetcher = NUVRSsFetcher.fetcher_with_entity(entity=self, local_name=u"vrss")
        
        self.vminterfaces = []
        self.vminterfaces_fetcher = NUVMInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"vminterfaces")
        
        self.hostinterfaces = []
        self.hostinterfaces_fetcher = NUHostInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"hostinterfaces")
        
        self.statisticspolicies = []
        self.statisticspolicies_fetcher = NUStatisticsPoliciesFetcher.fetcher_with_entity(entity=self, local_name=u"statisticspolicies")
        
        self.policygroups = []
        self.policygroups_fetcher = NUPolicyGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"policygroups")
        
        self.bridgeinterfaces = []
        self.bridgeinterfaces_fetcher = NUBridgeInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"bridgeinterfaces")
        
        self.redirectiontargets = []
        self.redirectiontargets_fetcher = NURedirectionTargetsFetcher.fetcher_with_entity(entity=self, local_name=u"redirectiontargets")
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        self.qos = []
        self.qos_fetcher = NUQosPrimitivesFetcher.fetcher_with_entity(entity=self, local_name=u"qos")
        
        self.vportmirrors = []
        self.vportmirrors_fetcher = NUVPortMirrorsFetcher.fetcher_with_entity(entity=self, local_name=u"vportmirrors")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_has_attached_interfaces(self):
        """ Get attribute has_attached_interfaces

            Indicates that this vport has attached interfaces

        """
        return self._has_attached_interfaces

    def _set_has_attached_interfaces(self, value):
        """ Set attribute has_attached_interfaces

            Indicates that this vport has attached interfaces

        """
        self._has_attached_interfaces = value

    has_attached_interfaces = property(_get_has_attached_interfaces, _set_has_attached_interfaces)
    
    def _get_domain_id(self):
        """ Get attribute domain_id

            ID the Domain associated with the VPort

        """
        return self._domain_id

    def _set_domain_id(self, value):
        """ Set attribute domain_id

            ID the Domain associated with the VPort

        """
        self._domain_id = value

    domain_id = property(_get_domain_id, _set_domain_id)
    
    def _get_description(self):
        """ Get attribute description

            Description for this vport

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description for this vport

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_system_type(self):
        """ Get attribute system_type

            Indicates what system it is - SOFTWARE/HARDWARE_VTEP/HARDWARE/ (possible values)  Possible values are HARDWARE, SOFTWARE, HARDWARE_VTEP, NUAGE_1, NUAGE_2, NUAGE_VRSG, .

        """
        return self._system_type

    def _set_system_type(self, value):
        """ Set attribute system_type

            Indicates what system it is - SOFTWARE/HARDWARE_VTEP/HARDWARE/ (possible values)  Possible values are HARDWARE, SOFTWARE, HARDWARE_VTEP, NUAGE_1, NUAGE_2, NUAGE_VRSG, .

        """
        self._system_type = value

    system_type = property(_get_system_type, _set_system_type)
    
    def _get_associated_floating_ipid(self):
        """ Get attribute associated_floating_ipid

            Id of Floating IP address associated to this vport

        """
        return self._associated_floating_ipid

    def _set_associated_floating_ipid(self, value):
        """ Set attribute associated_floating_ipid

            Id of Floating IP address associated to this vport

        """
        self._associated_floating_ipid = value

    associated_floating_ipid = property(_get_associated_floating_ipid, _set_associated_floating_ipid)
    
    def _get_vlanid(self):
        """ Get attribute vlanid

            associated Vlan of this vport - applicable for type host/bridge

        """
        return self._vlanid

    def _set_vlanid(self, value):
        """ Set attribute vlanid

            associated Vlan of this vport - applicable for type host/bridge

        """
        self._vlanid = value

    vlanid = property(_get_vlanid, _set_vlanid)
    
    def _get_zone_id(self):
        """ Get attribute zone_id

            ID the Zone associated with the VPort

        """
        return self._zone_id

    def _set_zone_id(self, value):
        """ Set attribute zone_id

            ID the Zone associated with the VPort

        """
        self._zone_id = value

    zone_id = property(_get_zone_id, _set_zone_id)
    
    def _get_associated_multicast_channel_map_id(self):
        """ Get attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this Vport is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        return self._associated_multicast_channel_map_id

    def _set_associated_multicast_channel_map_id(self, value):
        """ Set attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this Vport is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        self._associated_multicast_channel_map_id = value

    associated_multicast_channel_map_id = property(_get_associated_multicast_channel_map_id, _set_associated_multicast_channel_map_id)
    
    def _get_multicast(self):
        """ Get attribute multicast

            multicast is enum that indicates multicast policy on Vport. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        return self._multicast

    def _set_multicast(self, value):
        """ Set attribute multicast

            multicast is enum that indicates multicast policy on Vport. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        self._multicast = value

    multicast = property(_get_multicast, _set_multicast)
    
    def _get_address_spoofing(self):
        """ Get attribute address_spoofing

            Indicates if address spoofing is ENABLED/DISABLED/INHERITED for this vport Possible values are INHERITED, ENABLED, DISABLED, .

        """
        return self._address_spoofing

    def _set_address_spoofing(self, value):
        """ Set attribute address_spoofing

            Indicates if address spoofing is ENABLED/DISABLED/INHERITED for this vport Possible values are INHERITED, ENABLED, DISABLED, .

        """
        self._address_spoofing = value

    address_spoofing = property(_get_address_spoofing, _set_address_spoofing)
    
    def _get_multi_nicv_port_id(self):
        """ Get attribute multi_nicv_port_id

            ID of the Multi NIC VPort associated with the VPort

        """
        return self._multi_nicv_port_id

    def _set_multi_nicv_port_id(self, value):
        """ Set attribute multi_nicv_port_id

            ID of the Multi NIC VPort associated with the VPort

        """
        self._multi_nicv_port_id = value

    multi_nicv_port_id = property(_get_multi_nicv_port_id, _set_multi_nicv_port_id)
    
    def _get_active(self):
        """ Get attribute active

            Indicates if this vport is up or down

        """
        return self._active

    def _set_active(self, value):
        """ Set attribute active

            Indicates if this vport is up or down

        """
        self._active = value

    active = property(_get_active, _set_active)
    
    def _get_operational_state(self):
        """ Get attribute operational_state

            Operational State of the VPort - RUNNING/SHUTDOWN Possible values are INIT, UP, DOWN, .

        """
        return self._operational_state

    def _set_operational_state(self, value):
        """ Set attribute operational_state

            Operational State of the VPort - RUNNING/SHUTDOWN Possible values are INIT, UP, DOWN, .

        """
        self._operational_state = value

    operational_state = property(_get_operational_state, _set_operational_state)
    
    def _get_type(self):
        """ Get attribute type

            Type of vport - possible values VM/HOST/BRIDGE Possible values are VM, HOST, BRIDGE, .

        """
        return self._type

    def _set_type(self, value):
        """ Set attribute type

            Type of vport - possible values VM/HOST/BRIDGE Possible values are VM, HOST, BRIDGE, .

        """
        self._type = value

    type = property(_get_type, _set_type)
    
    def _get_name(self):
        """ Get attribute name

            Name of the vport. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the vport. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"vport"
