# -*- coding: utf-8 -*-

"""
NUStatsCollectorInfo
Identifies the IP address of the stats collector entity that must be used

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUStatsCollectorInfo(NURESTObject):
    """ Represents a StatsCollectorInfo object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a StatsCollectorInfo instance

        """
        super(NUStatsCollectorInfo, self).__init__()

        # Read/Write Attributes
        
        self._address_type = str()
        self._ip_address = str()
        self._port = str()
        
        self.expose_attribute(local_name=u"address_type", remote_name=u"addressType", attribute_type=str, choices=[])
        self.expose_attribute(local_name=u"ip_address", remote_name=u"ipAddress", attribute_type=str)
        self.expose_attribute(local_name=u"port", remote_name=u"port", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_address_type(self):
        """ Get attribute address_type

            Type for stats collector address Possible values are .

        """
        return self._address_type

    def _set_address_type(self, value):
        """ Set attribute address_type

            Type for stats collector address Possible values are .

        """
        self._address_type = value

    address_type = property(_get_address_type, _set_address_type)
    
    def _get_ip_address(self):
        """ Get attribute ip_address

            IP address(es) of the stats collector process

        """
        return self._ip_address

    def _set_ip_address(self, value):
        """ Set attribute ip_address

            IP address(es) of the stats collector process

        """
        self._ip_address = value

    ip_address = property(_get_ip_address, _set_ip_address)
    
    def _get_port(self):
        """ Get attribute port

            Port(s) of the stats collector process

        """
        return self._port

    def _set_port(self, value):
        """ Set attribute port

            Port(s) of the stats collector process

        """
        self._port = value

    port = property(_get_port, _set_port)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"statisticscollecto"
