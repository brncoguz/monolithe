# -*- coding: utf-8 -*-

"""
NUStatistics
Retrieves the statistics for a particular domain, zone, subnet, or VM

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUStatistics(NURESTObject):
    """ Represents a Statistics object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Statistics instance

        """
        super(NUStatistics, self).__init__()

        # Read/Write Attributes
        
        self._stats_data = str()
        self._number_of_data_points = int()
        self._version = str()
        self._start_time = str()
        self._end_time = str()
        
        self.expose_attribute(local_name=u"stats_data", remote_name=u"statsData", attribute_type=str)
        self.expose_attribute(local_name=u"number_of_data_points", remote_name=u"numberOfDataPoints", attribute_type=int)
        self.expose_attribute(local_name=u"version", remote_name=u"version", attribute_type=str)
        self.expose_attribute(local_name=u"start_time", remote_name=u"startTime", attribute_type=str)
        self.expose_attribute(local_name=u"end_time", remote_name=u"endTime", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_stats_data(self):
        """ Get attribute stats_data

            Map&lt;TCAMetric, Long[]&gt; TCAMetric is an Enum. Possible values are packets_in, bytes_in, packets_in_dropped, packets_in_errors, packets_out, bytes_out, packets_out_dropped, packets_out_errors, packets_dropped_rate_limit

        """
        return self._stats_data

    def _set_stats_data(self, value):
        """ Set attribute stats_data

            Map&lt;TCAMetric, Long[]&gt; TCAMetric is an Enum. Possible values are packets_in, bytes_in, packets_in_dropped, packets_in_errors, packets_out, bytes_out, packets_out_dropped, packets_out_errors, packets_dropped_rate_limit

        """
        self._stats_data = value

    stats_data = property(_get_stats_data, _set_stats_data)
    
    def _get_number_of_data_points(self):
        """ Get attribute number_of_data_points

            Number of data points between start time and end time

        """
        return self._number_of_data_points

    def _set_number_of_data_points(self, value):
        """ Set attribute number_of_data_points

            Number of data points between start time and end time

        """
        self._number_of_data_points = value

    number_of_data_points = property(_get_number_of_data_points, _set_number_of_data_points)
    
    def _get_version(self):
        """ Get attribute version

            Version of this Sequence number.

        """
        return self._version

    def _set_version(self, value):
        """ Set attribute version

            Version of this Sequence number.

        """
        self._version = value

    version = property(_get_version, _set_version)
    
    def _get_start_time(self):
        """ Get attribute start_time

            Start time for the statistics to be retrieved

        """
        return self._start_time

    def _set_start_time(self, value):
        """ Set attribute start_time

            Start time for the statistics to be retrieved

        """
        self._start_time = value

    start_time = property(_get_start_time, _set_start_time)
    
    def _get_end_time(self):
        """ Get attribute end_time

            End time for the statistics to be retrieved

        """
        return self._end_time

    def _set_end_time(self, value):
        """ Set attribute end_time

            End time for the statistics to be retrieved

        """
        self._end_time = value

    end_time = property(_get_end_time, _set_end_time)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"statistic"
