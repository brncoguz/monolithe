# -*- coding: utf-8 -*-
"""

NUStatistics
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject



class NUStatistics(NURESTObject):
    """ Represents a Statistics object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUStatistics instance """

        super(NUStatistics, self).__init__()

        # Read/Write Attributes
        self.end_time = None  #  End time for the statistics to be retrieved - long
        self.number_of_data_points = None  #  Number of data points between start time and end time - int
        self.start_time = None  #  Start time for the statistics to be retrieved - long
        self.stats_data = None  #  Map&amp;lt;TCAMetric, Long[]&amp;gt; TCAMetric is an Enum. Possible values are packets_in, bytes_in, packets_in_dropped, packets_in_errors, packets_out, bytes_out, packets_out_dropped, packets_out_errors, packets_dropped_rate_limit - int
        self.version = None  #  Version of this Sequence number. - long
        
        self.expose_attribute(local_name=u"end_time", remote_name=u"endTime", attribute_type=long)
        self.expose_attribute(local_name=u"number_of_data_points", remote_name=u"numberOfDataPoints", attribute_type=int)
        self.expose_attribute(local_name=u"start_time", remote_name=u"startTime", attribute_type=long)
        self.expose_attribute(local_name=u"stats_data", remote_name=u"statsData", attribute_type=int)
        self.expose_attribute(local_name=u"version", remote_name=u"version", attribute_type=long)
        
        # Fetchers
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"statistics"


