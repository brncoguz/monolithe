# -*- coding: utf-8 -*-

"""
NURateLimiter
Rate Limiter object that contains peak, burst and cir. Can be associated with Egress QOS policy objects.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NURateLimiter(NURESTObject):
    """ Represents a RateLimiter object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a RateLimiter instance

        """
        super(NURateLimiter, self).__init__()

        # Read/Write Attributes
        
        self._committed_information_rate = str()
        self._description = str()
        self._peak_information_rate = str()
        self._name = str()
        self._peak_burst_size = str()
        
        self.expose_attribute(local_name=u"committed_information_rate", remote_name=u"committedInformationRate", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"peak_information_rate", remote_name=u"peakInformationRate", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"peak_burst_size", remote_name=u"peakBurstSize", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_committed_information_rate(self):
        """ Get attribute committed_information_rate

            Committed bandwidth that is allowed

        """
        return self._committed_information_rate

    def _set_committed_information_rate(self, value):
        """ Set attribute committed_information_rate

            Committed bandwidth that is allowed

        """
        self._committed_information_rate = value

    committed_information_rate = property(_get_committed_information_rate, _set_committed_information_rate)
    
    def _get_description(self):
        """ Get attribute description

            A description of the Rate Limiter object

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the Rate Limiter object

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_peak_information_rate(self):
        """ Get attribute peak_information_rate

            Peak bandwidth  allowed

        """
        return self._peak_information_rate

    def _set_peak_information_rate(self, value):
        """ Set attribute peak_information_rate

            Peak bandwidth  allowed

        """
        self._peak_information_rate = value

    peak_information_rate = property(_get_peak_information_rate, _set_peak_information_rate)
    
    def _get_name(self):
        """ Get attribute name

            A unique name of the Rate Limiter object

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            A unique name of the Rate Limiter object

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_peak_burst_size(self):
        """ Get attribute peak_burst_size

            The maximum burst size associated with the rate limiter

        """
        return self._peak_burst_size

    def _set_peak_burst_size(self, value):
        """ Set attribute peak_burst_size

            The maximum burst size associated with the rate limiter

        """
        self._peak_burst_size = value

    peak_burst_size = property(_get_peak_burst_size, _set_peak_burst_size)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"ratelimiter"
