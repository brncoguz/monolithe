# -*- coding: utf-8 -*-

"""
NUVMInterface
Read only API that can retrieve the VM interface associated with a domain, zone or subnet for mediation created VM's for REST created  VM interfaces you need to set the additional proxy header in http request : X-Nuage-ProxyUservalue of the header has to be either :1) enterpriseName@UserName (example :bob@Alcatel Lucent)2) external ID of user in VSD, typically is UUID generally decided by the CMS tool in questionUser needs to have CMS privileges to use proxy user header

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUPolicyDecisionsFetcher
from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUMultiCastChannelMapsFetcher
from ..fetchers import NUStaticRoutesFetcher
from ..fetchers import NUPolicyGroupsFetcher
from ..fetchers import NURedirectionTargetsFetcher
from ..fetchers import NUDHCPOptionsFetcher
from bambou import NURESTObject


class NUVMInterface(NURESTObject):
    """ Represents a VMInterface object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a VMInterface instance

        """
        super(NUVMInterface, self).__init__()

        # Read/Write Attributes
        
        self._mac = str()
        self._v_port_name = str()
        self._name = str()
        self._domain_name = str()
        self._network_name = str()
        self._attached_network_type = str()
        self._associated_floating_ip_address = str()
        self._zone_id = str()
        self._v_port_id = str()
        self._netmask = str()
        self._domain_id = str()
        self._attached_network_id = str()
        self._tier_id = str()
        self._multi_nicv_port_name = str()
        self._vmuuid = str()
        self._zone_name = str()
        self._ip_address = str()
        self._gateway = str()
        self._policy_decision_id = str()
        
        self.expose_attribute(local_name=u"mac", remote_name=u"MAC", attribute_type=str)
        self.expose_attribute(local_name=u"v_port_name", remote_name=u"VPortName", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"domain_name", remote_name=u"domainName", attribute_type=str)
        self.expose_attribute(local_name=u"network_name", remote_name=u"networkName", attribute_type=str)
        self.expose_attribute(local_name=u"attached_network_type", remote_name=u"attachedNetworkType", attribute_type=str)
        self.expose_attribute(local_name=u"associated_floating_ip_address", remote_name=u"associatedFloatingIPAddress", attribute_type=str)
        self.expose_attribute(local_name=u"zone_id", remote_name=u"zoneID", attribute_type=str)
        self.expose_attribute(local_name=u"v_port_id", remote_name=u"VPortID", attribute_type=str)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str)
        self.expose_attribute(local_name=u"domain_id", remote_name=u"domainID", attribute_type=str)
        self.expose_attribute(local_name=u"attached_network_id", remote_name=u"attachedNetworkID", attribute_type=str)
        self.expose_attribute(local_name=u"tier_id", remote_name=u"tierID", attribute_type=str)
        self.expose_attribute(local_name=u"multi_nicv_port_name", remote_name=u"multiNICVPortName", attribute_type=str)
        self.expose_attribute(local_name=u"vmuuid", remote_name=u"VMUUID", attribute_type=str)
        self.expose_attribute(local_name=u"zone_name", remote_name=u"zoneName", attribute_type=str)
        self.expose_attribute(local_name=u"ip_address", remote_name=u"IPAddress", attribute_type=str)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str)
        self.expose_attribute(local_name=u"policy_decision_id", remote_name=u"policyDecisionID", attribute_type=str)
        
        # Fetchers
        
        self.policydecisions = []
        self.policydecisions_fetcher = NUPolicyDecisionsFetcher.fetcher_with_entity(entity=self, local_name=u"policydecisions")
        
        self.statistics = []
        self.statistics_fetcher = NUStatisticssFetcher.fetcher_with_entity(entity=self, local_name=u"statistics")
        
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_entity(entity=self, local_name=u"tcas")
        
        self.multicastchannelmaps = []
        self.multicastchannelmaps_fetcher = NUMultiCastChannelMapsFetcher.fetcher_with_entity(entity=self, local_name=u"multicastchannelmaps")
        
        self.staticroutes = []
        self.staticroutes_fetcher = NUStaticRoutesFetcher.fetcher_with_entity(entity=self, local_name=u"staticroutes")
        
        self.policygroups = []
        self.policygroups_fetcher = NUPolicyGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"policygroups")
        
        self.redirectiontargets = []
        self.redirectiontargets_fetcher = NURedirectionTargetsFetcher.fetcher_with_entity(entity=self, local_name=u"redirectiontargets")
        
        self.dhcpoptions = []
        self.dhcpoptions_fetcher = NUDHCPOptionsFetcher.fetcher_with_entity(entity=self, local_name=u"dhcpoptions")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_mac(self):
        """ Get attribute mac

            MAC address of the  interface

        """
        return self._mac

    def _set_mac(self, value):
        """ Set attribute mac

            MAC address of the  interface

        """
        self._mac = value

    mac = property(_get_mac, _set_mac)
    
    def _get_v_port_name(self):
        """ Get attribute v_port_name

            Name of the vport that the VM is attached to

        """
        return self._v_port_name

    def _set_v_port_name(self, value):
        """ Set attribute v_port_name

            Name of the vport that the VM is attached to

        """
        self._v_port_name = value

    v_port_name = property(_get_v_port_name, _set_v_port_name)
    
    def _get_name(self):
        """ Get attribute name

            Device name associated with this interface

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Device name associated with this interface

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_domain_name(self):
        """ Get attribute domain_name

            Name of the domain that the VM is attached to

        """
        return self._domain_name

    def _set_domain_name(self, value):
        """ Set attribute domain_name

            Name of the domain that the VM is attached to

        """
        self._domain_name = value

    domain_name = property(_get_domain_name, _set_domain_name)
    
    def _get_network_name(self):
        """ Get attribute network_name

            Name of the network that the VM is attached to

        """
        return self._network_name

    def _set_network_name(self, value):
        """ Set attribute network_name

            Name of the network that the VM is attached to

        """
        self._network_name = value

    network_name = property(_get_network_name, _set_network_name)
    
    def _get_attached_network_type(self):
        """ Get attribute attached_network_type

            l2 domain or Subnet that the interface is attached to

        """
        return self._attached_network_type

    def _set_attached_network_type(self, value):
        """ Set attribute attached_network_type

            l2 domain or Subnet that the interface is attached to

        """
        self._attached_network_type = value

    attached_network_type = property(_get_attached_network_type, _set_attached_network_type)
    
    def _get_associated_floating_ip_address(self):
        """ Get attribute associated_floating_ip_address

            Floating Ip Address of this network interface eg: 10.1.2.1

        """
        return self._associated_floating_ip_address

    def _set_associated_floating_ip_address(self, value):
        """ Set attribute associated_floating_ip_address

            Floating Ip Address of this network interface eg: 10.1.2.1

        """
        self._associated_floating_ip_address = value

    associated_floating_ip_address = property(_get_associated_floating_ip_address, _set_associated_floating_ip_address)
    
    def _get_zone_id(self):
        """ Get attribute zone_id

            ID of the zone that the interface is attached to

        """
        return self._zone_id

    def _set_zone_id(self, value):
        """ Set attribute zone_id

            ID of the zone that the interface is attached to

        """
        self._zone_id = value

    zone_id = property(_get_zone_id, _set_zone_id)
    
    def _get_v_port_id(self):
        """ Get attribute v_port_id

            ID of the vport that the interface is attached to

        """
        return self._v_port_id

    def _set_v_port_id(self, value):
        """ Set attribute v_port_id

            ID of the vport that the interface is attached to

        """
        self._v_port_id = value

    v_port_id = property(_get_v_port_id, _set_v_port_id)
    
    def _get_netmask(self):
        """ Get attribute netmask

            Netmask of the subnet that the VM is attached to

        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set attribute netmask

            Netmask of the subnet that the VM is attached to

        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_domain_id(self):
        """ Get attribute domain_id

            ID of the domain that the VM is attached to

        """
        return self._domain_id

    def _set_domain_id(self, value):
        """ Set attribute domain_id

            ID of the domain that the VM is attached to

        """
        self._domain_id = value

    domain_id = property(_get_domain_id, _set_domain_id)
    
    def _get_attached_network_id(self):
        """ Get attribute attached_network_id

            ID of the l2 domain or Subnet that the VM is attached to

        """
        return self._attached_network_id

    def _set_attached_network_id(self, value):
        """ Set attribute attached_network_id

            ID of the l2 domain or Subnet that the VM is attached to

        """
        self._attached_network_id = value

    attached_network_id = property(_get_attached_network_id, _set_attached_network_id)
    
    def _get_tier_id(self):
        """ Get attribute tier_id

            ID of the tier that the interface is attached to.

        """
        return self._tier_id

    def _set_tier_id(self, value):
        """ Set attribute tier_id

            ID of the tier that the interface is attached to.

        """
        self._tier_id = value

    tier_id = property(_get_tier_id, _set_tier_id)
    
    def _get_multi_nicv_port_name(self):
        """ Get attribute multi_nicv_port_name

            Name of the Multi NIC VPort associated with this VM Interface

        """
        return self._multi_nicv_port_name

    def _set_multi_nicv_port_name(self, value):
        """ Set attribute multi_nicv_port_name

            Name of the Multi NIC VPort associated with this VM Interface

        """
        self._multi_nicv_port_name = value

    multi_nicv_port_name = property(_get_multi_nicv_port_name, _set_multi_nicv_port_name)
    
    def _get_vmuuid(self):
        """ Get attribute vmuuid

            UUID of the associated virtual machine

        """
        return self._vmuuid

    def _set_vmuuid(self, value):
        """ Set attribute vmuuid

            UUID of the associated virtual machine

        """
        self._vmuuid = value

    vmuuid = property(_get_vmuuid, _set_vmuuid)
    
    def _get_zone_name(self):
        """ Get attribute zone_name

            Name of the zone that the VM is attached to

        """
        return self._zone_name

    def _set_zone_name(self, value):
        """ Set attribute zone_name

            Name of the zone that the VM is attached to

        """
        self._zone_name = value

    zone_name = property(_get_zone_name, _set_zone_name)
    
    def _get_ip_address(self):
        """ Get attribute ip_address

            IP address of the  interface

        """
        return self._ip_address

    def _set_ip_address(self, value):
        """ Set attribute ip_address

            IP address of the  interface

        """
        self._ip_address = value

    ip_address = property(_get_ip_address, _set_ip_address)
    
    def _get_gateway(self):
        """ Get attribute gateway

            Gateway of the subnet that the VM is connected to

        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set attribute gateway

            Gateway of the subnet that the VM is connected to

        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_policy_decision_id(self):
        """ Get attribute policy_decision_id

            The policy decision ID for this particular  interface

        """
        return self._policy_decision_id

    def _set_policy_decision_id(self, value):
        """ Set attribute policy_decision_id

            The policy decision ID for this particular  interface

        """
        self._policy_decision_id = value

    policy_decision_id = property(_get_policy_decision_id, _set_policy_decision_id)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"vminterface"
