# -*- coding: utf-8 -*-

"""
NUAlarm
The alarm API allows the management of system alarms

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUAlarm(NURESTObject):
    """ Represents a Alarm object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Alarm instance

        """
        super(NUAlarm, self).__init__()

        # Read/Write Attributes
        
        self._description = str()
        self._name = str()
        self._timestamp = str()
        self._acknowledged = bool()
        self._reason = str()
        self._error_condition = int()
        self._enterprise_id = str()
        self._target_object = str()
        self._number_of_occurances = int()
        self._severity = str()
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"timestamp", remote_name=u"timestamp", attribute_type=str)
        self.expose_attribute(local_name=u"acknowledged", remote_name=u"acknowledged", attribute_type=bool)
        self.expose_attribute(local_name=u"reason", remote_name=u"reason", attribute_type=str)
        self.expose_attribute(local_name=u"error_condition", remote_name=u"errorCondition", attribute_type=int)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str)
        self.expose_attribute(local_name=u"target_object", remote_name=u"targetObject", attribute_type=str)
        self.expose_attribute(local_name=u"number_of_occurances", remote_name=u"numberOfOccurances", attribute_type=int)
        self.expose_attribute(local_name=u"severity", remote_name=u"severity", attribute_type=str, choices=[u'MINOR', u'MAJOR', u'WARNING', u'CRITICAL', u'INFO'])
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_description(self):
        """ Get attribute description

            Description of the alarm

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of the alarm

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_name(self):
        """ Get attribute name

            The alarm name.  Each type of alarm will generate its own name

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            The alarm name.  Each type of alarm will generate its own name

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_timestamp(self):
        """ Get attribute timestamp

            Indicates the time that the alarm was triggered

        """
        return self._timestamp

    def _set_timestamp(self, value):
        """ Set attribute timestamp

            Indicates the time that the alarm was triggered

        """
        self._timestamp = value

    timestamp = property(_get_timestamp, _set_timestamp)
    
    def _get_acknowledged(self):
        """ Get attribute acknowledged

            Flag to indicate that is already acknowledge or not

        """
        return self._acknowledged

    def _set_acknowledged(self, value):
        """ Set attribute acknowledged

            Flag to indicate that is already acknowledge or not

        """
        self._acknowledged = value

    acknowledged = property(_get_acknowledged, _set_acknowledged)
    
    def _get_reason(self):
        """ Get attribute reason

            Provides a description of the alarm

        """
        return self._reason

    def _set_reason(self, value):
        """ Set attribute reason

            Provides a description of the alarm

        """
        self._reason = value

    reason = property(_get_reason, _set_reason)
    
    def _get_error_condition(self):
        """ Get attribute error_condition

            Identifies the error condition

        """
        return self._error_condition

    def _set_error_condition(self, value):
        """ Set attribute error_condition

            Identifies the error condition

        """
        self._error_condition = value

    error_condition = property(_get_error_condition, _set_error_condition)
    
    def _get_enterprise_id(self):
        """ Get attribute enterprise_id

            Enterprise that this alarm belongs to

        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set attribute enterprise_id

            Enterprise that this alarm belongs to

        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_target_object(self):
        """ Get attribute target_object

            Identifies affected Entity.  Example: Alarm generated by TCA for Domain domain1(Packets towards a VM, Breach)

        """
        return self._target_object

    def _set_target_object(self, value):
        """ Set attribute target_object

            Identifies affected Entity.  Example: Alarm generated by TCA for Domain domain1(Packets towards a VM, Breach)

        """
        self._target_object = value

    target_object = property(_get_target_object, _set_target_object)
    
    def _get_number_of_occurances(self):
        """ Get attribute number_of_occurances

            Number of times that the alarm was triggered

        """
        return self._number_of_occurances

    def _set_number_of_occurances(self, value):
        """ Set attribute number_of_occurances

            Number of times that the alarm was triggered

        """
        self._number_of_occurances = value

    number_of_occurances = property(_get_number_of_occurances, _set_number_of_occurances)
    
    def _get_severity(self):
        """ Get attribute severity

            Severity of the alarm. - MAJOR, MINOR, CRITICAL, INFO, WARNING. Possible values are MAJOR, MINOR, CRITICAL, INFO, WARNING, .

        """
        return self._severity

    def _set_severity(self, value):
        """ Set attribute severity

            Severity of the alarm. - MAJOR, MINOR, CRITICAL, INFO, WARNING. Possible values are MAJOR, MINOR, CRITICAL, INFO, WARNING, .

        """
        self._severity = value

    severity = property(_get_severity, _set_severity)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"alarm"
