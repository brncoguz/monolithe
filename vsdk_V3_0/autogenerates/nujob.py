# -*- coding: utf-8 -*-

"""
NUJob
Represents JOB entity. The job API accepts a command and parameters and executes the job and returns the results. Jobs API are typically used for long running tasks.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUJob(NURESTObject):
    """ Represents a Job object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Job instance

        """
        super(NUJob, self).__init__()

        # Read/Write Attributes
        
        self._status = str()
        self._assoc_entity_type = str()
        self._parameters = str()
        self._command = str()
        self._result = str()
        self._progress = float()
        
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, choices=[u'SUCCESS', u'RUNNING', u'FAILED'])
        self.expose_attribute(local_name=u"assoc_entity_type", remote_name=u"assocEntityType", attribute_type=str, choices=[])
        self.expose_attribute(local_name=u"parameters", remote_name=u"parameters", attribute_type=str)
        self.expose_attribute(local_name=u"command", remote_name=u"command", attribute_type=str, choices=[u'IMPORT', u'GATEWAY_AUDIT', u'EXPORT', u'RELOAD_NSG_CONFIG', u'CERTIFICATE_NSG_RENEW', u'RELOAD', u'CERTIFICATE_NSG_REVOKE', u'NOTIFY_NSG_REGISTRATION'])
        self.expose_attribute(local_name=u"result", remote_name=u"result", attribute_type=str)
        self.expose_attribute(local_name=u"progress", remote_name=u"progress", attribute_type=float)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_status(self):
        """ Get attribute status

            Current status of the job. Possible values are RUNNING, FAILED, SUCCESS, .

        """
        return self._status

    def _set_status(self, value):
        """ Set attribute status

            Current status of the job. Possible values are RUNNING, FAILED, SUCCESS, .

        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_assoc_entity_type(self):
        """ Get attribute assoc_entity_type

            Entity with which this job is associated Refer to API section for supported types.

        """
        return self._assoc_entity_type

    def _set_assoc_entity_type(self, value):
        """ Set attribute assoc_entity_type

            Entity with which this job is associated Refer to API section for supported types.

        """
        self._assoc_entity_type = value

    assoc_entity_type = property(_get_assoc_entity_type, _set_assoc_entity_type)
    
    def _get_parameters(self):
        """ Get attribute parameters

            Additional arguments required for the specific command. Differs based on types of command.

        """
        return self._parameters

    def _set_parameters(self, value):
        """ Set attribute parameters

            Additional arguments required for the specific command. Differs based on types of command.

        """
        self._parameters = value

    parameters = property(_get_parameters, _set_parameters)
    
    def _get_command(self):
        """ Get attribute command

            Name of the command. Possible values are GATEWAY_AUDIT, NOTIFY_NSG_REGISTRATION, CERTIFICATE_NSG_REVOKE, CERTIFICATE_NSG_RENEW, RELOAD_NSG_CONFIG, RELOAD, EXPORT, IMPORT, .

        """
        return self._command

    def _set_command(self, value):
        """ Set attribute command

            Name of the command. Possible values are GATEWAY_AUDIT, NOTIFY_NSG_REGISTRATION, CERTIFICATE_NSG_REVOKE, CERTIFICATE_NSG_RENEW, RELOAD_NSG_CONFIG, RELOAD, EXPORT, IMPORT, .

        """
        self._command = value

    command = property(_get_command, _set_command)
    
    def _get_result(self):
        """ Get attribute result

            Results from the execution of the job

        """
        return self._result

    def _set_result(self, value):
        """ Set attribute result

            Results from the execution of the job

        """
        self._result = value

    result = property(_get_result, _set_result)
    
    def _get_progress(self):
        """ Get attribute progress

            Indicates the progress of the job as a faction. eg : 0.5 means 50% done.

        """
        return self._progress

    def _set_progress(self, value):
        """ Set attribute progress

            Indicates the progress of the job as a faction. eg : 0.5 means 50% done.

        """
        self._progress = value

    progress = property(_get_progress, _set_progress)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"job"
