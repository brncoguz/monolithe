# -*- coding: utf-8 -*-
"""

NUTier
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from ..fetchers import NUVirtualMachinesFetcher


class NUTier(NURESTObject):
    """ Represents a Tier object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUTier instance """

        super(NUTier, self).__init__()

        # Read/Write Attributes
        self.address = None  #  IP address of the tier defined. - int
        self.associated_network_object_id = None  #  The associated network object id. - int
        self.associated_network_object_type = None  #  The associated network object type. - int
        self.description = None  #  Description of the application tier. - int
        self.associated_floating_ip_pool_id = None  #  The associated floating IP Pool ID. - int
        self.gateway = None  #  The IP address of the gateway for this tier. - int
        self.metadata = None  #  Metadata field to store tier related data. - int
        self.name = None  #  Name of the application tier. - int
        self.netmask = None  #  Netmask for the tier. - int
        self.associated_network_macro_id = None  #  The associated network macro ID. - int
        self.type = None  #  Type of the application tier. (Example: STANDARD, NETWORK_MACRO, APPLICATION or APPLICATION_EXTENDED_NETWORK - int
        
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=int)
        self.expose_attribute(local_name=u"associated_network_object_id", remote_name=u"associatedNetworkObjectID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_network_object_type", remote_name=u"associatedNetworkObjectType", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"associated_floating_ip_pool_id", remote_name=u"associatedFloatingIPPoolID", attribute_type=int)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=int)
        self.expose_attribute(local_name=u"metadata", remote_name=u"metadata", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=int)
        self.expose_attribute(local_name=u"associated_network_macro_id", remote_name=u"associatedNetworkMacroID", attribute_type=int)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=int)
        
        # Fetchers
        self.statisticss = []
        self.statisticss_fetcher = NUStatisticssFetcher.fetcher_with_object(nurest_object=self, local_name=u"statisticss")
        self.v_ports = []
        self.v_ports_fetcher = NUVPortsFetcher.fetcher_with_object(nurest_object=self, local_name=u"v_ports")
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_object(nurest_object=self, local_name=u"tcas")
        self.statistics_policies = []
        self.statistics_policies_fetcher = NUStatisticsPoliciesFetcher.fetcher_with_object(nurest_object=self, local_name=u"statistics_policies")
        self.virtual_machines = []
        self.virtual_machines_fetcher = NUVirtualMachinesFetcher.fetcher_with_object(nurest_object=self, local_name=u"virtual_machines")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"tier"


