# -*- coding: utf-8 -*-

"""
NUTier
Tier represents a portion of an application.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from bambou import NURESTObject


class NUTier(NURESTObject):
    """ Represents a Tier object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Tier instance

        """
        super(NUTier, self).__init__()

        # Read/Write Attributes
        
        self._associated_network_macro_id = str()
        self._associated_floating_ip_pool_id = str()
        self._description = str()
        self._associated_network_object_type = str()
        self._associated_network_object_id = str()
        self._netmask = str()
        self._address = str()
        self._metadata = str()
        self._type = str()
        self._gateway = str()
        self._name = str()
        
        self.expose_attribute(local_name=u"associated_network_macro_id", remote_name=u"associatedNetworkMacroID", attribute_type=str)
        self.expose_attribute(local_name=u"associated_floating_ip_pool_id", remote_name=u"associatedFloatingIPPoolID", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"associated_network_object_type", remote_name=u"associatedNetworkObjectType", attribute_type=str, choices=[])
        self.expose_attribute(local_name=u"associated_network_object_id", remote_name=u"associatedNetworkObjectID", attribute_type=str)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        self.expose_attribute(local_name=u"metadata", remote_name=u"metadata", attribute_type=str)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, choices=[u'NETWORK_MACRO', u'APPLICATION', u'STANDARD', u'APPLICATION_EXTENDED_NETWORK'])
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.vms = []
        self.vms_fetcher = NUVirtualMachinesFetcher.fetcher_with_entity(entity=self, local_name=u"vms")
        
        self.statistics = []
        self.statistics_fetcher = NUStatisticssFetcher.fetcher_with_entity(entity=self, local_name=u"statistics")
        
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_entity(entity=self, local_name=u"tcas")
        
        self.vports = []
        self.vports_fetcher = NUVPortsFetcher.fetcher_with_entity(entity=self, local_name=u"vports")
        
        self.statisticspolicies = []
        self.statisticspolicies_fetcher = NUStatisticsPoliciesFetcher.fetcher_with_entity(entity=self, local_name=u"statisticspolicies")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_associated_network_macro_id(self):
        """ Get attribute associated_network_macro_id

            The associated network macro ID.

        """
        return self._associated_network_macro_id

    def _set_associated_network_macro_id(self, value):
        """ Set attribute associated_network_macro_id

            The associated network macro ID.

        """
        self._associated_network_macro_id = value

    associated_network_macro_id = property(_get_associated_network_macro_id, _set_associated_network_macro_id)
    
    def _get_associated_floating_ip_pool_id(self):
        """ Get attribute associated_floating_ip_pool_id

            The associated floating IP Pool ID.

        """
        return self._associated_floating_ip_pool_id

    def _set_associated_floating_ip_pool_id(self, value):
        """ Set attribute associated_floating_ip_pool_id

            The associated floating IP Pool ID.

        """
        self._associated_floating_ip_pool_id = value

    associated_floating_ip_pool_id = property(_get_associated_floating_ip_pool_id, _set_associated_floating_ip_pool_id)
    
    def _get_description(self):
        """ Get attribute description

            Description of the application tier.

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of the application tier.

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_associated_network_object_type(self):
        """ Get attribute associated_network_object_type

            The associated network object type. Refer to API section for supported types.

        """
        return self._associated_network_object_type

    def _set_associated_network_object_type(self, value):
        """ Set attribute associated_network_object_type

            The associated network object type. Refer to API section for supported types.

        """
        self._associated_network_object_type = value

    associated_network_object_type = property(_get_associated_network_object_type, _set_associated_network_object_type)
    
    def _get_associated_network_object_id(self):
        """ Get attribute associated_network_object_id

            The associated network object id.

        """
        return self._associated_network_object_id

    def _set_associated_network_object_id(self, value):
        """ Set attribute associated_network_object_id

            The associated network object id.

        """
        self._associated_network_object_id = value

    associated_network_object_id = property(_get_associated_network_object_id, _set_associated_network_object_id)
    
    def _get_netmask(self):
        """ Get attribute netmask

            Netmask for the tier.

        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set attribute netmask

            Netmask for the tier.

        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_address(self):
        """ Get attribute address

            IP address of the tier defined.

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            IP address of the tier defined.

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_metadata(self):
        """ Get attribute metadata

            Metadata field to store tier related data.

        """
        return self._metadata

    def _set_metadata(self, value):
        """ Set attribute metadata

            Metadata field to store tier related data.

        """
        self._metadata = value

    metadata = property(_get_metadata, _set_metadata)
    
    def _get_type(self):
        """ Get attribute type

            Type of the application tier. (Example: STANDARD, NETWORK_MACRO, APPLICATION or APPLICATION_EXTENDED_NETWORK Possible values are STANDARD, NETWORK_MACRO, APPLICATION, APPLICATION_EXTENDED_NETWORK, .

        """
        return self._type

    def _set_type(self, value):
        """ Set attribute type

            Type of the application tier. (Example: STANDARD, NETWORK_MACRO, APPLICATION or APPLICATION_EXTENDED_NETWORK Possible values are STANDARD, NETWORK_MACRO, APPLICATION, APPLICATION_EXTENDED_NETWORK, .

        """
        self._type = value

    type = property(_get_type, _set_type)
    
    def _get_gateway(self):
        """ Get attribute gateway

            The IP address of the gateway for this tier.

        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set attribute gateway

            The IP address of the gateway for this tier.

        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_name(self):
        """ Get attribute name

            Name of the application tier.

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the application tier.

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"tier"
