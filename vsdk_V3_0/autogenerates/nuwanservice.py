# -*- coding: utf-8 -*-

"""
NUWANService
Represents WAN Service Object.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUPermittedActionsFetcher
from bambou import NURESTObject


class NUWANService(NURESTObject):
    """ Represents a WANService object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a WANService instance

        """
        super(NUWANService, self).__init__()

        # Read/Write Attributes
        
        self._service_type = str()
        self._associated_domain_id = str()
        self._tunnel_type = str()
        self._description = str()
        self._domain_name = str()
        self._user_mnemonic = str()
        self._irb_enabled = bool()
        self._vn_id = str()
        self._orphan = bool()
        self._name = str()
        self._config_type = str()
        self._enterprise_name = str()
        self._external_route_target = str()
        self._permitted_action = str()
        self._wan_service_identifier = str()
        self._use_user_mnemonic = bool()
        self._service_policy = str()
        self._associated_vpn_connect_id = str()
        
        self.expose_attribute(local_name=u"service_type", remote_name=u"serviceType", attribute_type=str, choices=[u'L2', u'L3'])
        self.expose_attribute(local_name=u"associated_domain_id", remote_name=u"associatedDomainID", attribute_type=str)
        self.expose_attribute(local_name=u"tunnel_type", remote_name=u"tunnelType", attribute_type=str, choices=[u'DC_DEFAULT', u'VXLAN', u'GRE'])
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"domain_name", remote_name=u"domainName", attribute_type=str)
        self.expose_attribute(local_name=u"user_mnemonic", remote_name=u"userMnemonic", attribute_type=str)
        self.expose_attribute(local_name=u"irb_enabled", remote_name=u"IRBEnabled", attribute_type=bool)
        self.expose_attribute(local_name=u"vn_id", remote_name=u"vnId", attribute_type=str)
        self.expose_attribute(local_name=u"orphan", remote_name=u"orphan", attribute_type=bool)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"config_type", remote_name=u"configType", attribute_type=str, choices=[u'STATIC', u'DYNAMIC'])
        self.expose_attribute(local_name=u"enterprise_name", remote_name=u"enterpriseName", attribute_type=str)
        self.expose_attribute(local_name=u"external_route_target", remote_name=u"externalRouteTarget", attribute_type=str)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=str, choices=[u'EXTEND', u'INSTANTIATE', u'USE', u'READ', u'ALL'])
        self.expose_attribute(local_name=u"wan_service_identifier", remote_name=u"WANServiceIdentifier", attribute_type=str)
        self.expose_attribute(local_name=u"use_user_mnemonic", remote_name=u"useUserMnemonic", attribute_type=bool)
        self.expose_attribute(local_name=u"service_policy", remote_name=u"servicePolicy", attribute_type=str)
        self.expose_attribute(local_name=u"associated_vpn_connect_id", remote_name=u"associatedVPNConnectID", attribute_type=str)
        
        # Fetchers
        
        self.enterprisepermissions = []
        self.enterprisepermissions_fetcher = NUEnterprisePermissionsFetcher.fetcher_with_entity(entity=self, local_name=u"enterprisepermissions")
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        self.permissions = []
        self.permissions_fetcher = NUPermittedActionsFetcher.fetcher_with_entity(entity=self, local_name=u"permissions")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_service_type(self):
        """ Get attribute service_type

            Type of the SERVICE -  L3,L2 Possible values are L3, L2, .

        """
        return self._service_type

    def _set_service_type(self, value):
        """ Set attribute service_type

            Type of the SERVICE -  L3,L2 Possible values are L3, L2, .

        """
        self._service_type = value

    service_type = property(_get_service_type, _set_service_type)
    
    def _get_associated_domain_id(self):
        """ Get attribute associated_domain_id

            ID of the entity to which the WAN Service is attached to. This could be ID DOMAIN/L2DOMAIN

        """
        return self._associated_domain_id

    def _set_associated_domain_id(self, value):
        """ Set attribute associated_domain_id

            ID of the entity to which the WAN Service is attached to. This could be ID DOMAIN/L2DOMAIN

        """
        self._associated_domain_id = value

    associated_domain_id = property(_get_associated_domain_id, _set_associated_domain_id)
    
    def _get_tunnel_type(self):
        """ Get attribute tunnel_type

            Type of the SERVICE - GRE,VXLAN Possible values are DC_DEFAULT, GRE, VXLAN, .

        """
        return self._tunnel_type

    def _set_tunnel_type(self, value):
        """ Set attribute tunnel_type

            Type of the SERVICE - GRE,VXLAN Possible values are DC_DEFAULT, GRE, VXLAN, .

        """
        self._tunnel_type = value

    tunnel_type = property(_get_tunnel_type, _set_tunnel_type)
    
    def _get_description(self):
        """ Get attribute description

            A description of the WAN Service

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the WAN Service

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_domain_name(self):
        """ Get attribute domain_name

            The associated domain name.

        """
        return self._domain_name

    def _set_domain_name(self, value):
        """ Set attribute domain_name

            The associated domain name.

        """
        self._domain_name = value

    domain_name = property(_get_domain_name, _set_domain_name)
    
    def _get_user_mnemonic(self):
        """ Get attribute user_mnemonic

            user mnemonic of the WAN Service

        """
        return self._user_mnemonic

    def _set_user_mnemonic(self, value):
        """ Set attribute user_mnemonic

            user mnemonic of the WAN Service

        """
        self._user_mnemonic = value

    user_mnemonic = property(_get_user_mnemonic, _set_user_mnemonic)
    
    def _get_irb_enabled(self):
        """ Get attribute irb_enabled

            Determines whether Integrated Routing and Bridging is enabled on the WAN Service

        """
        return self._irb_enabled

    def _set_irb_enabled(self, value):
        """ Set attribute irb_enabled

            Determines whether Integrated Routing and Bridging is enabled on the WAN Service

        """
        self._irb_enabled = value

    irb_enabled = property(_get_irb_enabled, _set_irb_enabled)
    
    def _get_vn_id(self):
        """ Get attribute vn_id

            VNID of the BackHaul Subnet of L3Domain /L2Domain to which this WANService is associated

        """
        return self._vn_id

    def _set_vn_id(self, value):
        """ Set attribute vn_id

            VNID of the BackHaul Subnet of L3Domain /L2Domain to which this WANService is associated

        """
        self._vn_id = value

    vn_id = property(_get_vn_id, _set_vn_id)
    
    def _get_orphan(self):
        """ Get attribute orphan

            Indicates if this WAN Service is orphan or not.

        """
        return self._orphan

    def _set_orphan(self, value):
        """ Set attribute orphan

            Indicates if this WAN Service is orphan or not.

        """
        self._orphan = value

    orphan = property(_get_orphan, _set_orphan)
    
    def _get_name(self):
        """ Get attribute name

            Name of the WAN Service

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the WAN Service

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_config_type(self):
        """ Get attribute config_type

            Type of the CONFIG -  STATIC Possible values are STATIC, DYNAMIC, .

        """
        return self._config_type

    def _set_config_type(self, value):
        """ Set attribute config_type

            Type of the CONFIG -  STATIC Possible values are STATIC, DYNAMIC, .

        """
        self._config_type = value

    config_type = property(_get_config_type, _set_config_type)
    
    def _get_enterprise_name(self):
        """ Get attribute enterprise_name

            The associated enterprise name.

        """
        return self._enterprise_name

    def _set_enterprise_name(self, value):
        """ Set attribute enterprise_name

            The associated enterprise name.

        """
        self._enterprise_name = value

    enterprise_name = property(_get_enterprise_name, _set_enterprise_name)
    
    def _get_external_route_target(self):
        """ Get attribute external_route_target

            Route target associated with the WAN. It is an optional parameterthat can be provided by the user

        """
        return self._external_route_target

    def _set_external_route_target(self, value):
        """ Set attribute external_route_target

            Route target associated with the WAN. It is an optional parameterthat can be provided by the user

        """
        self._external_route_target = value

    external_route_target = property(_get_external_route_target, _set_external_route_target)
    
    def _get_permitted_action(self):
        """ Get attribute permitted_action

            The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        return self._permitted_action

    def _set_permitted_action(self, value):
        """ Set attribute permitted_action

            The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        self._permitted_action = value

    permitted_action = property(_get_permitted_action, _set_permitted_action)
    
    def _get_wan_service_identifier(self):
        """ Get attribute wan_service_identifier

            Identifier of the WAN Service

        """
        return self._wan_service_identifier

    def _set_wan_service_identifier(self, value):
        """ Set attribute wan_service_identifier

            Identifier of the WAN Service

        """
        self._wan_service_identifier = value

    wan_service_identifier = property(_get_wan_service_identifier, _set_wan_service_identifier)
    
    def _get_use_user_mnemonic(self):
        """ Get attribute use_user_mnemonic

            Determines whether to use user mnemonic of the WAN Service

        """
        return self._use_user_mnemonic

    def _set_use_user_mnemonic(self, value):
        """ Set attribute use_user_mnemonic

            Determines whether to use user mnemonic of the WAN Service

        """
        self._use_user_mnemonic = value

    use_user_mnemonic = property(_get_use_user_mnemonic, _set_use_user_mnemonic)
    
    def _get_service_policy(self):
        """ Get attribute service_policy

            Name of 7X50 Policy assoicated with service

        """
        return self._service_policy

    def _set_service_policy(self, value):
        """ Set attribute service_policy

            Name of 7X50 Policy assoicated with service

        """
        self._service_policy = value

    service_policy = property(_get_service_policy, _set_service_policy)
    
    def _get_associated_vpn_connect_id(self):
        """ Get attribute associated_vpn_connect_id

            The associated vpn connect ID.

        """
        return self._associated_vpn_connect_id

    def _set_associated_vpn_connect_id(self, value):
        """ Set attribute associated_vpn_connect_id

            The associated vpn connect ID.

        """
        self._associated_vpn_connect_id = value

    associated_vpn_connect_id = property(_get_associated_vpn_connect_id, _set_associated_vpn_connect_id)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"service"
