# -*- coding: utf-8 -*-
"""

NUWANService
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUAlarmsFetcher


class NUWANService(NURESTObject):
    """ Represents a WANService object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUWANService instance """

        super(NUWANService, self).__init__()

        # Read/Write Attributes
        self.associated_domain_id = None  #  ID of the entity to which the WAN Service is attached to. This could be ID DOMAIN/L2DOMAIN - int
        self.domain_name = None  #  The associated domain name. - int
        self.enterprise_name = None  #  The associated enterprise name. - int
        self.associated_vpn_connect_id = None  #  The associated vpn connect ID. - int
        self.config_type = None  #  Type of the CONFIG -  STATIC - int
        self.description = None  #  A description of the WAN Service - int
        self.external_route_target = None  #  Route target associated with the WAN. It is an optional parameterthat can be provided by the user - int
        self.irb_enabled = None  #  determines whether to use user mnemonic of the WAN Service - int
        self.name = None  #  Name of the WAN Service - int
        self.orphan = None  #  Indicates if this WAN Service is orphan or not. - int
        self.permitted_action = None  #  The permitted  action to USE/EXTEND  this Gateway - int
        self.service_policy = None  #  Name of 7X50 Policy assoicated with service - int
        self.service_type = None  #  Type of the SERVICE -  L3,L2 - int
        self.tunnel_type = None  #  Type of the SERVICE - GRE,VXLAN - int
        self.user_mnemonic = None  #  user mnemonic of the WAN Service - int
        self.use_user_mnemonic = None  #  determines whether to use user mnemonic of the WAN Service - int
        self.vn_id = None  #  VNID of the BackHaul Subnet of L3Domain /L2Domain to which this WANService is associated - long
        self.wan_service_identifier = None  #  Identifier of the WAN Service - int
        
        self.expose_attribute(local_name=u"associated_domain_id", remote_name=u"associatedDomainID", attribute_type=int)
        self.expose_attribute(local_name=u"domain_name", remote_name=u"domainName", attribute_type=int)
        self.expose_attribute(local_name=u"enterprise_name", remote_name=u"enterpriseName", attribute_type=int)
        self.expose_attribute(local_name=u"associated_vpn_connect_id", remote_name=u"associatedVPNConnectID", attribute_type=int)
        self.expose_attribute(local_name=u"config_type", remote_name=u"configType", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"external_route_target", remote_name=u"externalRouteTarget", attribute_type=int)
        self.expose_attribute(local_name=u"irb_enabled", remote_name=u"IRBEnabled", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"orphan", remote_name=u"orphan", attribute_type=int)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=int)
        self.expose_attribute(local_name=u"service_policy", remote_name=u"servicePolicy", attribute_type=int)
        self.expose_attribute(local_name=u"service_type", remote_name=u"serviceType", attribute_type=int)
        self.expose_attribute(local_name=u"tunnel_type", remote_name=u"tunnelType", attribute_type=int)
        self.expose_attribute(local_name=u"user_mnemonic", remote_name=u"userMnemonic", attribute_type=int)
        self.expose_attribute(local_name=u"use_user_mnemonic", remote_name=u"useUserMnemonic", attribute_type=int)
        self.expose_attribute(local_name=u"vn_id", remote_name=u"vnId", attribute_type=long)
        self.expose_attribute(local_name=u"wan_service_identifier", remote_name=u"WANServiceIdentifier", attribute_type=int)
        
        # Fetchers
        self.permitted_actions = []
        self.permitted_actions_fetcher = NUPermittedActionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"permitted_actions")
        self.enterprise_permissions = []
        self.enterprise_permissions_fetcher = NUEnterprisePermissionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"enterprise_permissions")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_object(nurest_object=self, local_name=u"alarms")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"wanservice"


