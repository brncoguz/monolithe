# -*- coding: utf-8 -*-

"""
NUDSCPForwardingClassMapping
Provides the definition of a single DSCP -> Forwarding class mapping that is part of a Table used in QoS policies.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUDSCPForwardingClassMapping(NURESTObject):
    """ Represents a DSCPForwardingClassMapping object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a DSCPForwardingClassMapping instance

        """
        super(NUDSCPForwardingClassMapping, self).__init__()

        # Read/Write Attributes
        
        self._forwarding_class = str()
        self._dscp = str()
        
        self.expose_attribute(local_name=u"forwarding_class", remote_name=u"forwardingClass", attribute_type=str, choices=[u'D', u'E', u'F', u'G', u'A', u'B', u'C', u'H', u'NONE'])
        self.expose_attribute(local_name=u"dscp", remote_name=u"DSCP", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_forwarding_class(self):
        """ Get attribute forwarding_class

            Class of service to be used. Service classes in order of priority are A, B, C, D, E, F, G and H Possible values are NONE, A, B, C, D, E, F, G, H, .

        """
        return self._forwarding_class

    def _set_forwarding_class(self, value):
        """ Set attribute forwarding_class

            Class of service to be used. Service classes in order of priority are A, B, C, D, E, F, G and H Possible values are NONE, A, B, C, D, E, F, G, H, .

        """
        self._forwarding_class = value

    forwarding_class = property(_get_forwarding_class, _set_forwarding_class)
    
    def _get_dscp(self):
        """ Get attribute dscp

            DSCP value range from enumeration of 65 values: *, 0, 1 ... 63

        """
        return self._dscp

    def _set_dscp(self, value):
        """ Set attribute dscp

            DSCP value range from enumeration of 65 values: *, 0, 1 ... 63

        """
        self._dscp = value

    dscp = property(_get_dscp, _set_dscp)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"dscpforwardingclassmapping"
