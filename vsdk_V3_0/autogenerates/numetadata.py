# -*- coding: utf-8 -*-

"""
NUMetadata
Metadata associated to a subnet

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUMetadata(NURESTObject):
    """ Represents a Metadata object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Metadata instance

        """
        super(NUMetadata, self).__init__()

        # Read/Write Attributes
        
        self._resource_type = str()
        self._metadata = str()
        
        self.expose_attribute(local_name=u"resource_type", remote_name=u"resourceType", attribute_type=str)
        self.expose_attribute(local_name=u"metadata", remote_name=u"metadata", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_resource_type(self):
        """ Get attribute resource_type

            Type of the resource that is associated to the Metadata.

        """
        return self._resource_type

    def _set_resource_type(self, value):
        """ Set attribute resource_type

            Type of the resource that is associated to the Metadata.

        """
        self._resource_type = value

    resource_type = property(_get_resource_type, _set_resource_type)
    
    def _get_metadata(self):
        """ Get attribute metadata

            Metadata that describes about the entity attached to it.

        """
        return self._metadata

    def _set_metadata(self, value):
        """ Set attribute metadata

            Metadata that describes about the entity attached to it.

        """
        self._metadata = value

    metadata = property(_get_metadata, _set_metadata)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"metadat"
