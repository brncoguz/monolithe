# -*- coding: utf-8 -*-

"""
NUEnterprise
Definition of the enterprise object. This is the top level object that represents an enterprise or organization.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUServicesFetcher
from ..fetchers import NUEnterpriseNetworkMacrosFetcher
from ..fetchers import NUPATNATPoolsFetcher
from ..fetchers import NUGatewayTemplatesFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NURedundantGWGrpsFetcher
from ..fetchers import NUInfrastructurePortProfilesFetcher
from ..fetchers import NURateLimitersFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUDomainsFetcher
from ..fetchers import NUAppsFetcher
from ..fetchers import NUGroupsFetcher
from ..fetchers import NUL2DomainsFetcher
from ..fetchers import NUInfrastructureGatewayProfilesFetcher
from ..fetchers import NUMultiCastChannelMapsFetcher
from ..fetchers import NUUsersFetcher
from ..fetchers import NUPublicNetworkMacrosFetcher
from ..fetchers import NUDomainTemplatesFetcher
from ..fetchers import NUDSCPForwardingClassTablesFetcher
from ..fetchers import NUL2DomainTemplatesFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUEgressQosPrimitivesFetcher
from ..fetchers import NULDAPConfigurationsFetcher
from ..fetchers import NUGatewaysFetcher
from bambou import NURESTObject


class NUEnterprise(NURESTObject):
    """ Represents a Enterprise object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Enterprise instance

        """
        super(NUEnterprise, self).__init__()

        # Read/Write Attributes
        
        self._dhcp_mapping_retention_timer = int()
        self._allow_gateway_management = bool()
        self._description = str()
        self._dhcp_lease_interval = int()
        self._avatar_data = str()
        self._floating_ips_quota = int()
        self._avatar_type = str()
        self._enterprise_profile_id = str()
        self._floating_ips_used = int()
        self._allowed_forwarding_classes = str()
        self._allow_trusted_forwarding_class = bool()
        self._customer_id = str()
        self._allow_advanced_qos_configuration = bool()
        self._name = str()
        
        self.expose_attribute(local_name=u"dhcp_mapping_retention_timer", remote_name=u"DHCPMappingRetentionTimer", attribute_type=int)
        self.expose_attribute(local_name=u"allow_gateway_management", remote_name=u"allowGatewayManagement", attribute_type=bool)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"dhcp_lease_interval", remote_name=u"DHCPLeaseInterval", attribute_type=int)
        self.expose_attribute(local_name=u"avatar_data", remote_name=u"avatarData", attribute_type=str)
        self.expose_attribute(local_name=u"floating_ips_quota", remote_name=u"floatingIPsQuota", attribute_type=int)
        self.expose_attribute(local_name=u"avatar_type", remote_name=u"avatarType", attribute_type=str, choices=[u'COMPUTEDURL', u'BASE64', u'URL'])
        self.expose_attribute(local_name=u"enterprise_profile_id", remote_name=u"enterpriseProfileID", attribute_type=str)
        self.expose_attribute(local_name=u"floating_ips_used", remote_name=u"floatingIPsUsed", attribute_type=int)
        self.expose_attribute(local_name=u"allowed_forwarding_classes", remote_name=u"allowedForwardingClasses", attribute_type=str, choices=[u'D', u'E', u'F', u'G', u'A', u'B', u'C', u'H', u'NONE'])
        self.expose_attribute(local_name=u"allow_trusted_forwarding_class", remote_name=u"allowTrustedForwardingClass", attribute_type=bool)
        self.expose_attribute(local_name=u"customer_id", remote_name=u"customerID", attribute_type=str)
        self.expose_attribute(local_name=u"allow_advanced_qos_configuration", remote_name=u"allowAdvancedQOSConfiguration", attribute_type=bool)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.applicationservices = []
        self.applicationservices_fetcher = NUServicesFetcher.fetcher_with_entity(entity=self, local_name=u"applicationservices")
        
        self.enterprisenetworks = []
        self.enterprisenetworks_fetcher = NUEnterpriseNetworkMacrosFetcher.fetcher_with_entity(entity=self, local_name=u"enterprisenetworks")
        
        self.patnatpools = []
        self.patnatpools_fetcher = NUPATNATPoolsFetcher.fetcher_with_entity(entity=self, local_name=u"patnatpools")
        
        self.gatewaytemplates = []
        self.gatewaytemplates_fetcher = NUGatewayTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"gatewaytemplates")
        
        self.vms = []
        self.vms_fetcher = NUVirtualMachinesFetcher.fetcher_with_entity(entity=self, local_name=u"vms")
        
        self.redundancygroups = []
        self.redundancygroups_fetcher = NURedundantGWGrpsFetcher.fetcher_with_entity(entity=self, local_name=u"redundancygroups")
        
        self.infrastructureportprofiles = []
        self.infrastructureportprofiles_fetcher = NUInfrastructurePortProfilesFetcher.fetcher_with_entity(entity=self, local_name=u"infrastructureportprofiles")
        
        self.ratelimiters = []
        self.ratelimiters_fetcher = NURateLimitersFetcher.fetcher_with_entity(entity=self, local_name=u"ratelimiters")
        
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_entity(entity=self, local_name=u"jobs")
        
        self.domains = []
        self.domains_fetcher = NUDomainsFetcher.fetcher_with_entity(entity=self, local_name=u"domains")
        
        self.applications = []
        self.applications_fetcher = NUAppsFetcher.fetcher_with_entity(entity=self, local_name=u"applications")
        
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"groups")
        
        self.l2domains = []
        self.l2domains_fetcher = NUL2DomainsFetcher.fetcher_with_entity(entity=self, local_name=u"l2domains")
        
        self.infrastructuregatewayprofiles = []
        self.infrastructuregatewayprofiles_fetcher = NUInfrastructureGatewayProfilesFetcher.fetcher_with_entity(entity=self, local_name=u"infrastructuregatewayprofiles")
        
        self.multicastchannelmaps = []
        self.multicastchannelmaps_fetcher = NUMultiCastChannelMapsFetcher.fetcher_with_entity(entity=self, local_name=u"multicastchannelmaps")
        
        self.users = []
        self.users_fetcher = NUUsersFetcher.fetcher_with_entity(entity=self, local_name=u"users")
        
        self.publicnetworks = []
        self.publicnetworks_fetcher = NUPublicNetworkMacrosFetcher.fetcher_with_entity(entity=self, local_name=u"publicnetworks")
        
        self.domaintemplates = []
        self.domaintemplates_fetcher = NUDomainTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"domaintemplates")
        
        self.dscpforwardingclasstables = []
        self.dscpforwardingclasstables_fetcher = NUDSCPForwardingClassTablesFetcher.fetcher_with_entity(entity=self, local_name=u"dscpforwardingclasstables")
        
        self.l2domaintemplates = []
        self.l2domaintemplates_fetcher = NUL2DomainTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"l2domaintemplates")
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        self.allalarms = []
        self.allalarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"allalarms")
        
        self.egressqospolicies = []
        self.egressqospolicies_fetcher = NUEgressQosPrimitivesFetcher.fetcher_with_entity(entity=self, local_name=u"egressqospolicies")
        
        self.ldapconfigurations = []
        self.ldapconfigurations_fetcher = NULDAPConfigurationsFetcher.fetcher_with_entity(entity=self, local_name=u"ldapconfigurations")
        
        self.gateways = []
        self.gateways_fetcher = NUGatewaysFetcher.fetcher_with_entity(entity=self, local_name=u"gateways")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_dhcp_mapping_retention_timer(self):
        """ Get attribute dhcp_mapping_retention_timer

            DHCP Mapping Retention Timer (in secs ) to be used by an enterprise.

        """
        return self._dhcp_mapping_retention_timer

    def _set_dhcp_mapping_retention_timer(self, value):
        """ Set attribute dhcp_mapping_retention_timer

            DHCP Mapping Retention Timer (in secs ) to be used by an enterprise.

        """
        self._dhcp_mapping_retention_timer = value

    dhcp_mapping_retention_timer = property(_get_dhcp_mapping_retention_timer, _set_dhcp_mapping_retention_timer)
    
    def _get_allow_gateway_management(self):
        """ Get attribute allow_gateway_management

            This flag indicates if the enterprise/organization can manage gateways. If yes then it can create gateway templates, instantiate them etc.

        """
        return self._allow_gateway_management

    def _set_allow_gateway_management(self, value):
        """ Set attribute allow_gateway_management

            This flag indicates if the enterprise/organization can manage gateways. If yes then it can create gateway templates, instantiate them etc.

        """
        self._allow_gateway_management = value

    allow_gateway_management = property(_get_allow_gateway_management, _set_allow_gateway_management)
    
    def _get_description(self):
        """ Get attribute description

            A description of the enterprise

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the enterprise

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_dhcp_lease_interval(self):
        """ Get attribute dhcp_lease_interval

            DHCP Lease Interval (in hrs) to be used by an enterprise.

        """
        return self._dhcp_lease_interval

    def _set_dhcp_lease_interval(self, value):
        """ Set attribute dhcp_lease_interval

            DHCP Lease Interval (in hrs) to be used by an enterprise.

        """
        self._dhcp_lease_interval = value

    dhcp_lease_interval = property(_get_dhcp_lease_interval, _set_dhcp_lease_interval)
    
    def _get_avatar_data(self):
        """ Get attribute avatar_data

            URL to the avatar data associated with the enterprise. If the avatarType is URL then value of avatarData should an URL of the image. If the avatarType BASE64 then avatarData should be BASE64 encoded value of the image

        """
        return self._avatar_data

    def _set_avatar_data(self, value):
        """ Set attribute avatar_data

            URL to the avatar data associated with the enterprise. If the avatarType is URL then value of avatarData should an URL of the image. If the avatarType BASE64 then avatarData should be BASE64 encoded value of the image

        """
        self._avatar_data = value

    avatar_data = property(_get_avatar_data, _set_avatar_data)
    
    def _get_floating_ips_quota(self):
        """ Get attribute floating_ips_quota

            Quota set for the number of floating IPs to be used by an enterprise.

        """
        return self._floating_ips_quota

    def _set_floating_ips_quota(self, value):
        """ Set attribute floating_ips_quota

            Quota set for the number of floating IPs to be used by an enterprise.

        """
        self._floating_ips_quota = value

    floating_ips_quota = property(_get_floating_ips_quota, _set_floating_ips_quota)
    
    def _get_avatar_type(self):
        """ Get attribute avatar_type

            Avatar type - URL or BASE64 Possible values are URL, BASE64, COMPUTEDURL, .

        """
        return self._avatar_type

    def _set_avatar_type(self, value):
        """ Set attribute avatar_type

            Avatar type - URL or BASE64 Possible values are URL, BASE64, COMPUTEDURL, .

        """
        self._avatar_type = value

    avatar_type = property(_get_avatar_type, _set_avatar_type)
    
    def _get_enterprise_profile_id(self):
        """ Get attribute enterprise_profile_id

            Enterprise profile id for this enterprise

        """
        return self._enterprise_profile_id

    def _set_enterprise_profile_id(self, value):
        """ Set attribute enterprise_profile_id

            Enterprise profile id for this enterprise

        """
        self._enterprise_profile_id = value

    enterprise_profile_id = property(_get_enterprise_profile_id, _set_enterprise_profile_id)
    
    def _get_floating_ips_used(self):
        """ Get attribute floating_ips_used

            Number of floating IPs used by the enterprise from the assigned floatingIPsQuota

        """
        return self._floating_ips_used

    def _set_floating_ips_used(self, value):
        """ Set attribute floating_ips_used

            Number of floating IPs used by the enterprise from the assigned floatingIPsQuota

        """
        self._floating_ips_used = value

    floating_ips_used = property(_get_floating_ips_used, _set_floating_ips_used)
    
    def _get_allowed_forwarding_classes(self):
        """ Get attribute allowed_forwarding_classes

            Allowed Forwarding Classes for this enterprise. Possible values are NONE, A, B, C, D, E, F, G, H, .

        """
        return self._allowed_forwarding_classes

    def _set_allowed_forwarding_classes(self, value):
        """ Set attribute allowed_forwarding_classes

            Allowed Forwarding Classes for this enterprise. Possible values are NONE, A, B, C, D, E, F, G, H, .

        """
        self._allowed_forwarding_classes = value

    allowed_forwarding_classes = property(_get_allowed_forwarding_classes, _set_allowed_forwarding_classes)
    
    def _get_allow_trusted_forwarding_class(self):
        """ Get attribute allow_trusted_forwarding_class

            Controls whether QoS policies and templates created under this enterprise set the trusted flag to true

        """
        return self._allow_trusted_forwarding_class

    def _set_allow_trusted_forwarding_class(self, value):
        """ Set attribute allow_trusted_forwarding_class

            Controls whether QoS policies and templates created under this enterprise set the trusted flag to true

        """
        self._allow_trusted_forwarding_class = value

    allow_trusted_forwarding_class = property(_get_allow_trusted_forwarding_class, _set_allow_trusted_forwarding_class)
    
    def _get_customer_id(self):
        """ Get attribute customer_id

            CustomerID that is used by VSC to identify this enterprise. This is a read only attribute.

        """
        return self._customer_id

    def _set_customer_id(self, value):
        """ Set attribute customer_id

            CustomerID that is used by VSC to identify this enterprise. This is a read only attribute.

        """
        self._customer_id = value

    customer_id = property(_get_customer_id, _set_customer_id)
    
    def _get_allow_advanced_qos_configuration(self):
        """ Get attribute allow_advanced_qos_configuration

            Controls whether this enterprise has access to advanced QoS settings

        """
        return self._allow_advanced_qos_configuration

    def _set_allow_advanced_qos_configuration(self, value):
        """ Set attribute allow_advanced_qos_configuration

            Controls whether this enterprise has access to advanced QoS settings

        """
        self._allow_advanced_qos_configuration = value

    allow_advanced_qos_configuration = property(_get_allow_advanced_qos_configuration, _set_allow_advanced_qos_configuration)
    
    def _get_name(self):
        """ Get attribute name

            The unique name of the enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            The unique name of the enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"enterprise"
