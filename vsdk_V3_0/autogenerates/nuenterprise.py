# -*- coding: utf-8 -*-
"""

NUEnterprise
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUUsersFetcher
from ..fetchers import NUServicesFetcher
from ..fetchers import NUInfrastructureVlanProfilesFetcher
from ..fetchers import NUGatewayTemplatesFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUGroupsFetcher
from ..fetchers import NURedundantGWGrpsFetcher
from ..fetchers import NUL2DomainTemplatesFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUInfrastructureGatewayProfilesFetcher
from ..fetchers import NUInfrastructurePortProfilesFetcher
from ..fetchers import NUDomainsFetcher
from ..fetchers import NUEnterpriseNetworkMacrosFetcher
from ..fetchers import NUEgressQosPrimitivesFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NULDAPConfigurationsFetcher
from ..fetchers import NUDomainTemplatesFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUDSCPForwardingClassTablesFetcher
from ..fetchers import NURateLimitersFetcher
from ..fetchers import NUAppsFetcher
from ..fetchers import NUGatewaysFetcher
from ..fetchers import NUL2DomainsFetcher
from ..fetchers import NUPublicNetworkMacrosFetcher
from ..fetchers import NUMultiCastChannelMapsFetcher
from ..fetchers import NUPATNATPoolsFetcher


class NUEnterprise(NURESTObject):
    """ Represents a Enterprise object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUEnterprise instance """

        super(NUEnterprise, self).__init__()

        # Read/Write Attributes
        self.allow_advanced_qos_configuration = None  #  Controls whether this enterprise has access to advanced QoS settings - int
        self.allowed_forwarding_classes = None  #  Allowed Forwarding Classes for this enterprise. They are A,B,C,D,E,G,H - int
        self.allow_gateway_management = None  #  This flag indicates if the enterprise/organization can manage gateways. If yes then it can create gateway templates, instantiate them etc. - int
        self.allow_trusted_forwarding_class = None  #  Controls whether QoS policies and templates created under this enterprise set the trusted flag to true - int
        self.avatar_data = None  #  URL to the avatar data associated with the enterprise. If the avatarType is URL then value of avatarData should an URL of the image. If the avatarType BASE64 then avatarData should be BASE64 encoded value of the image - int
        self.avatar_type = None  #  Avatar type - URL or BASE64 - int
        self.customer_id = None  #  CustomerID that is used by VSC to identify this enterprise. This is a read only attribute. - long
        self.description = None  #  A description of the enterprise - int
        self.dhcp_lease_interval = None  #  DHCP Lease Interval (in hrs) to be used by an enterprise. - int
        self.dhcp_mapping_retention_timer = None  #  DHCP Mapping Retention Timer (in secs ) to be used by an enterprise. - int
        self.enterprise_profile_id = None  #  Enterprise profile id for this enterprise - int
        self.floating_ips_quota = None  #  Quota set for the number of floating IPs to be used by an enterprise. - int
        self.floating_ips_used = None  #  Number of floating IPs used by the enterprise from the assigned floatingIPsQuota - int
        self.name = None  #  The unique name of the enterprise. Valid characters are alphabets, numbers, space and hyphen( - ). - int
        
        self.expose_attribute(local_name=u"allow_advanced_qos_configuration", remote_name=u"allowAdvancedQOSConfiguration", attribute_type=int)
        self.expose_attribute(local_name=u"allowed_forwarding_classes", remote_name=u"allowedForwardingClasses", attribute_type=int)
        self.expose_attribute(local_name=u"allow_gateway_management", remote_name=u"allowGatewayManagement", attribute_type=int)
        self.expose_attribute(local_name=u"allow_trusted_forwarding_class", remote_name=u"allowTrustedForwardingClass", attribute_type=int)
        self.expose_attribute(local_name=u"avatar_data", remote_name=u"avatarData", attribute_type=int)
        self.expose_attribute(local_name=u"avatar_type", remote_name=u"avatarType", attribute_type=int)
        self.expose_attribute(local_name=u"customer_id", remote_name=u"customerID", attribute_type=long)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"dhcp_lease_interval", remote_name=u"DHCPLeaseInterval", attribute_type=int)
        self.expose_attribute(local_name=u"dhcp_mapping_retention_timer", remote_name=u"DHCPMappingRetentionTimer", attribute_type=int)
        self.expose_attribute(local_name=u"enterprise_profile_id", remote_name=u"enterpriseProfileID", attribute_type=int)
        self.expose_attribute(local_name=u"floating_ips_quota", remote_name=u"floatingIPsQuota", attribute_type=int)
        self.expose_attribute(local_name=u"floating_ips_used", remote_name=u"floatingIPsUsed", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        
        # Fetchers
        self.users = []
        self.users_fetcher = NUUsersFetcher.fetcher_with_object(nurest_object=self, local_name=u"users")
        self.services = []
        self.services_fetcher = NUServicesFetcher.fetcher_with_object(nurest_object=self, local_name=u"services")
        self.infrastructure_vlan_profiles = []
        self.infrastructure_vlan_profiles_fetcher = NUInfrastructureVlanProfilesFetcher.fetcher_with_object(nurest_object=self, local_name=u"infrastructure_vlan_profiles")
        self.gateway_templates = []
        self.gateway_templates_fetcher = NUGatewayTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"gateway_templates")
        self.virtual_machines = []
        self.virtual_machines_fetcher = NUVirtualMachinesFetcher.fetcher_with_object(nurest_object=self, local_name=u"virtual_machines")
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_object(nurest_object=self, local_name=u"groups")
        self.redundant_gw_grps = []
        self.redundant_gw_grps_fetcher = NURedundantGWGrpsFetcher.fetcher_with_object(nurest_object=self, local_name=u"redundant_gw_grps")
        self.l2_domain_templates = []
        self.l2_domain_templates_fetcher = NUL2DomainTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"l2_domain_templates")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.infrastructure_gateway_profiles = []
        self.infrastructure_gateway_profiles_fetcher = NUInfrastructureGatewayProfilesFetcher.fetcher_with_object(nurest_object=self, local_name=u"infrastructure_gateway_profiles")
        self.infrastructure_port_profiles = []
        self.infrastructure_port_profiles_fetcher = NUInfrastructurePortProfilesFetcher.fetcher_with_object(nurest_object=self, local_name=u"infrastructure_port_profiles")
        self.domains = []
        self.domains_fetcher = NUDomainsFetcher.fetcher_with_object(nurest_object=self, local_name=u"domains")
        self.enterprise_network_macros = []
        self.enterprise_network_macros_fetcher = NUEnterpriseNetworkMacrosFetcher.fetcher_with_object(nurest_object=self, local_name=u"enterprise_network_macros")
        self.egress_qos_primitives = []
        self.egress_qos_primitives_fetcher = NUEgressQosPrimitivesFetcher.fetcher_with_object(nurest_object=self, local_name=u"egress_qos_primitives")
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_object(nurest_object=self, local_name=u"alarms")
        self.ldap_configurations = []
        self.ldap_configurations_fetcher = NULDAPConfigurationsFetcher.fetcher_with_object(nurest_object=self, local_name=u"ldap_configurations")
        self.domain_templates = []
        self.domain_templates_fetcher = NUDomainTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"domain_templates")
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_object(nurest_object=self, local_name=u"jobs")
        self.dscp_forwarding_class_tables = []
        self.dscp_forwarding_class_tables_fetcher = NUDSCPForwardingClassTablesFetcher.fetcher_with_object(nurest_object=self, local_name=u"dscp_forwarding_class_tables")
        self.rate_limiters = []
        self.rate_limiters_fetcher = NURateLimitersFetcher.fetcher_with_object(nurest_object=self, local_name=u"rate_limiters")
        self.apps = []
        self.apps_fetcher = NUAppsFetcher.fetcher_with_object(nurest_object=self, local_name=u"apps")
        self.gateways = []
        self.gateways_fetcher = NUGatewaysFetcher.fetcher_with_object(nurest_object=self, local_name=u"gateways")
        self.l2_domains = []
        self.l2_domains_fetcher = NUL2DomainsFetcher.fetcher_with_object(nurest_object=self, local_name=u"l2_domains")
        self.public_network_macros = []
        self.public_network_macros_fetcher = NUPublicNetworkMacrosFetcher.fetcher_with_object(nurest_object=self, local_name=u"public_network_macros")
        self.multi_cast_channel_maps = []
        self.multi_cast_channel_maps_fetcher = NUMultiCastChannelMapsFetcher.fetcher_with_object(nurest_object=self, local_name=u"multi_cast_channel_maps")
        self.patnat_pools = []
        self.patnat_pools_fetcher = NUPATNATPoolsFetcher.fetcher_with_object(nurest_object=self, local_name=u"patnat_pools")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"enterprise"


