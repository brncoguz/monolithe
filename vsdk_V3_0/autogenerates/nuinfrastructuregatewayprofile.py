# -*- coding: utf-8 -*-

"""
NUInfrastructureGatewayProfile
Represents Infrastructure Gateway Profile

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUInfrastructureGatewayProfile(NURESTObject):
    """ Represents a InfrastructureGatewayProfile object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a InfrastructureGatewayProfile instance

        """
        super(NUInfrastructureGatewayProfile, self).__init__()

        # Read/Write Attributes
        
        self._upgrade_action = str()
        self._remote_log_mode = str()
        self._remote_log_server_address = str()
        self._remote_log_dir_path = str()
        self._gateway = str()
        self._ntp_server_key_id = int()
        self._system_sync_window = str()
        self._system_sync_scheduler = str()
        self._enterprise_id = str()
        self._metadata_upgrade_path = str()
        self._remote_log_username = str()
        self._standby_controller = str()
        self._description = str()
        self._dead_timer = str()
        self._ntp_server_key = str()
        self._name = str()
        self._active_controller = str()
        self._proxy_dns_name = str()
        self._remote_log_server_port = int()
        self._remote_log_password = str()
        self._use_two_factor = bool()
        self._ports = str()
        
        self.expose_attribute(local_name=u"upgrade_action", remote_name=u"upgradeAction", attribute_type=str, choices=[u'DOWNLOAD_AND_UPGRADE_NOW', u'UPGRADE_NOW', u'NONE', u'DOWNLOAD_AND_UPGRADE_AT_WINDOW', u'DOWNLOAD_ONLY'])
        self.expose_attribute(local_name=u"remote_log_mode", remote_name=u"remoteLogMode", attribute_type=str, choices=[u'SCP', u'RSYSLOG', u'SFTP', u'DISABLED'])
        self.expose_attribute(local_name=u"remote_log_server_address", remote_name=u"remoteLogServerAddress", attribute_type=str)
        self.expose_attribute(local_name=u"remote_log_dir_path", remote_name=u"remoteLogDirPath", attribute_type=str)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str)
        self.expose_attribute(local_name=u"ntp_server_key_id", remote_name=u"NTPServerKeyID", attribute_type=int)
        self.expose_attribute(local_name=u"system_sync_window", remote_name=u"systemSyncWindow", attribute_type=str, choices=[u'THREE_HOURS', u'THIRTY_MINUTES', u'TEN_MINUTES', u'ONE_HOUR', u'FOUR_HOURS', u'SIX_HOURS', u'MAXIMUM_DURATION', u'TWO_HOURS', u'FIVE_HOURS', u'NONE'])
        self.expose_attribute(local_name=u"system_sync_scheduler", remote_name=u"systemSyncScheduler", attribute_type=str)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str)
        self.expose_attribute(local_name=u"metadata_upgrade_path", remote_name=u"metadataUpgradePath", attribute_type=str)
        self.expose_attribute(local_name=u"remote_log_username", remote_name=u"remoteLogUsername", attribute_type=str)
        self.expose_attribute(local_name=u"standby_controller", remote_name=u"standbyController", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"dead_timer", remote_name=u"deadTimer", attribute_type=str, choices=[u'THREE_HOURS', u'THIRTY_MINUTES', u'TEN_MINUTES', u'ONE_HOUR', u'FOUR_HOURS', u'SIX_HOURS', u'MAXIMUM_DURATION', u'TWO_HOURS', u'FIVE_HOURS', u'NONE'])
        self.expose_attribute(local_name=u"ntp_server_key", remote_name=u"NTPServerKey", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"active_controller", remote_name=u"activeController", attribute_type=str)
        self.expose_attribute(local_name=u"proxy_dns_name", remote_name=u"proxyDNSName", attribute_type=str)
        self.expose_attribute(local_name=u"remote_log_server_port", remote_name=u"remoteLogServerPort", attribute_type=int)
        self.expose_attribute(local_name=u"remote_log_password", remote_name=u"remoteLogPassword", attribute_type=str)
        self.expose_attribute(local_name=u"use_two_factor", remote_name=u"useTwoFactor", attribute_type=bool)
        self.expose_attribute(local_name=u"ports", remote_name=u"ports", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_upgrade_action(self):
        """ Get attribute upgrade_action

            Upgrade action for NSG associated with this Infrastructure Gateway Profile instance.  By default, there is no upgrade. Possible values are DOWNLOAD_ONLY, DOWNLOAD_AND_UPGRADE_AT_WINDOW, DOWNLOAD_AND_UPGRADE_NOW, UPGRADE_NOW, NONE, .

        """
        return self._upgrade_action

    def _set_upgrade_action(self, value):
        """ Set attribute upgrade_action

            Upgrade action for NSG associated with this Infrastructure Gateway Profile instance.  By default, there is no upgrade. Possible values are DOWNLOAD_ONLY, DOWNLOAD_AND_UPGRADE_AT_WINDOW, DOWNLOAD_AND_UPGRADE_NOW, UPGRADE_NOW, NONE, .

        """
        self._upgrade_action = value

    upgrade_action = property(_get_upgrade_action, _set_upgrade_action)
    
    def _get_remote_log_mode(self):
        """ Get attribute remote_log_mode

            Type of Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Valid values are SCP, SFTP, RSyslog, and Disabled.  This field is set to Disabled by default. Possible values are SCP, SFTP, RSYSLOG, DISABLED, .

        """
        return self._remote_log_mode

    def _set_remote_log_mode(self, value):
        """ Set attribute remote_log_mode

            Type of Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Valid values are SCP, SFTP, RSyslog, and Disabled.  This field is set to Disabled by default. Possible values are SCP, SFTP, RSYSLOG, DISABLED, .

        """
        self._remote_log_mode = value

    remote_log_mode = property(_get_remote_log_mode, _set_remote_log_mode)
    
    def _get_remote_log_server_address(self):
        """ Get attribute remote_log_server_address

            Primary Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Can be an IP address or a URL.  This field is optional.

        """
        return self._remote_log_server_address

    def _set_remote_log_server_address(self, value):
        """ Set attribute remote_log_server_address

            Primary Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Can be an IP address or a URL.  This field is optional.

        """
        self._remote_log_server_address = value

    remote_log_server_address = property(_get_remote_log_server_address, _set_remote_log_server_address)
    
    def _get_remote_log_dir_path(self):
        """ Get attribute remote_log_dir_path

            Path on the remote log server where the logs generated by the NSG are to be stored.  This field is only useful for SCP and SFTP.

        """
        return self._remote_log_dir_path

    def _set_remote_log_dir_path(self, value):
        """ Set attribute remote_log_dir_path

            Path on the remote log server where the logs generated by the NSG are to be stored.  This field is only useful for SCP and SFTP.

        """
        self._remote_log_dir_path = value

    remote_log_dir_path = property(_get_remote_log_dir_path, _set_remote_log_dir_path)
    
    def _get_gateway(self):
        """ Get attribute gateway

            Gateway :  Instance of the NSG on which this profile belongs.

        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set attribute gateway

            Gateway :  Instance of the NSG on which this profile belongs.

        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_ntp_server_key_id(self):
        """ Get attribute ntp_server_key_id

            Correspond to the key ID on the NTP server that matches the ntpServerKey value.  Valid values are from 1 to 255 as specified by SR-OS and 0 to specify unused (VSD/NSG only).

        """
        return self._ntp_server_key_id

    def _set_ntp_server_key_id(self, value):
        """ Set attribute ntp_server_key_id

            Correspond to the key ID on the NTP server that matches the ntpServerKey value.  Valid values are from 1 to 255 as specified by SR-OS and 0 to specify unused (VSD/NSG only).

        """
        self._ntp_server_key_id = value

    ntp_server_key_id = property(_get_ntp_server_key_id, _set_ntp_server_key_id)
    
    def _get_system_sync_window(self):
        """ Get attribute system_sync_window

            Length of time, in seconds, given to a Gateway to apply a configuration change.  This property is closely linked to systemSyncScheduler.  Default value is 1 hour (3600 s) Possible values are NONE, TEN_MINUTES, THIRTY_MINUTES, ONE_HOUR, TWO_HOURS, THREE_HOURS, FOUR_HOURS, FIVE_HOURS, SIX_HOURS, MAXIMUM_DURATION, .

        """
        return self._system_sync_window

    def _set_system_sync_window(self, value):
        """ Set attribute system_sync_window

            Length of time, in seconds, given to a Gateway to apply a configuration change.  This property is closely linked to systemSyncScheduler.  Default value is 1 hour (3600 s) Possible values are NONE, TEN_MINUTES, THIRTY_MINUTES, ONE_HOUR, TWO_HOURS, THREE_HOURS, FOUR_HOURS, FIVE_HOURS, SIX_HOURS, MAXIMUM_DURATION, .

        """
        self._system_sync_window = value

    system_sync_window = property(_get_system_sync_window, _set_system_sync_window)
    
    def _get_system_sync_scheduler(self):
        """ Get attribute system_sync_scheduler

            Time in a Cron format when configuration update are being applied on the Gateway (NSG).  This property is linked to systemSyncWindow.  Default value is every midnight (0 0 * * *).  Format:  Minutes Hours DayOfMonth Month DayOfWeek

        """
        return self._system_sync_scheduler

    def _set_system_sync_scheduler(self, value):
        """ Set attribute system_sync_scheduler

            Time in a Cron format when configuration update are being applied on the Gateway (NSG).  This property is linked to systemSyncWindow.  Default value is every midnight (0 0 * * *).  Format:  Minutes Hours DayOfMonth Month DayOfWeek

        """
        self._system_sync_scheduler = value

    system_sync_scheduler = property(_get_system_sync_scheduler, _set_system_sync_scheduler)
    
    def _get_enterprise_id(self):
        """ Get attribute enterprise_id

            Name of the enterprise/organisation associated with this Profile instance.  This is a read only attribute

        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set attribute enterprise_id

            Name of the enterprise/organisation associated with this Profile instance.  This is a read only attribute

        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_metadata_upgrade_path(self):
        """ Get attribute metadata_upgrade_path

            Path/URL to retrieve the NSG Upgrade information meta data files.  From that meta data, the NSG will be able to retrieve the upgrade package files and perform some validations.  It is expected that the meta data file is in JSON format.  RFC 2616 states that there are no 'official' maximum length for a URL but different browsers and servers have limits.  Our friendly Internet Explorer has a maximum of 'around' 2048 characters, we shall use this as a limit here.

        """
        return self._metadata_upgrade_path

    def _set_metadata_upgrade_path(self, value):
        """ Set attribute metadata_upgrade_path

            Path/URL to retrieve the NSG Upgrade information meta data files.  From that meta data, the NSG will be able to retrieve the upgrade package files and perform some validations.  It is expected that the meta data file is in JSON format.  RFC 2616 states that there are no 'official' maximum length for a URL but different browsers and servers have limits.  Our friendly Internet Explorer has a maximum of 'around' 2048 characters, we shall use this as a limit here.

        """
        self._metadata_upgrade_path = value

    metadata_upgrade_path = property(_get_metadata_upgrade_path, _set_metadata_upgrade_path)
    
    def _get_remote_log_username(self):
        """ Get attribute remote_log_username

            Username to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP.

        """
        return self._remote_log_username

    def _set_remote_log_username(self, value):
        """ Set attribute remote_log_username

            Username to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP.

        """
        self._remote_log_username = value

    remote_log_username = property(_get_remote_log_username, _set_remote_log_username)
    
    def _get_standby_controller(self):
        """ Get attribute standby_controller

            VSC Standby Controller :  IP Address of the standby VSC system NSG instances associated to this profile will be reaching for.

        """
        return self._standby_controller

    def _set_standby_controller(self, value):
        """ Set attribute standby_controller

            VSC Standby Controller :  IP Address of the standby VSC system NSG instances associated to this profile will be reaching for.

        """
        self._standby_controller = value

    standby_controller = property(_get_standby_controller, _set_standby_controller)
    
    def _get_description(self):
        """ Get attribute description

            A description of the Profile instance created.

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the Profile instance created.

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_dead_timer(self):
        """ Get attribute dead_timer

            Time, in seconds, allowed for a Gateway to be inactive before the VSD revokes its certificates and marks it as untrusted.  Default value is 1 hour (3600) Possible values are NONE, TEN_MINUTES, THIRTY_MINUTES, ONE_HOUR, TWO_HOURS, THREE_HOURS, FOUR_HOURS, FIVE_HOURS, SIX_HOURS, MAXIMUM_DURATION, .

        """
        return self._dead_timer

    def _set_dead_timer(self, value):
        """ Set attribute dead_timer

            Time, in seconds, allowed for a Gateway to be inactive before the VSD revokes its certificates and marks it as untrusted.  Default value is 1 hour (3600) Possible values are NONE, TEN_MINUTES, THIRTY_MINUTES, ONE_HOUR, TWO_HOURS, THREE_HOURS, FOUR_HOURS, FIVE_HOURS, SIX_HOURS, MAXIMUM_DURATION, .

        """
        self._dead_timer = value

    dead_timer = property(_get_dead_timer, _set_dead_timer)
    
    def _get_ntp_server_key(self):
        """ Get attribute ntp_server_key

            If set, this represents the security key for the Gateway to communicate with the NTP server (a VSC).

        """
        return self._ntp_server_key

    def _set_ntp_server_key(self, value):
        """ Set attribute ntp_server_key

            If set, this represents the security key for the Gateway to communicate with the NTP server (a VSC).

        """
        self._ntp_server_key = value

    ntp_server_key = property(_get_ntp_server_key, _set_ntp_server_key)
    
    def _get_name(self):
        """ Get attribute name

            Name of the Infrastructure Profile

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the Infrastructure Profile

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_active_controller(self):
        """ Get attribute active_controller

            VSC Active Controller :  IP Address of the primary VSC system NSG instances associated to this profile will be reaching for.

        """
        return self._active_controller

    def _set_active_controller(self, value):
        """ Set attribute active_controller

            VSC Active Controller :  IP Address of the primary VSC system NSG instances associated to this profile will be reaching for.

        """
        self._active_controller = value

    active_controller = property(_get_active_controller, _set_active_controller)
    
    def _get_proxy_dns_name(self):
        """ Get attribute proxy_dns_name

            Proxy DNS Name :  DNS Name of the system acting as a proxy between the NSG instances and the VSD.

        """
        return self._proxy_dns_name

    def _set_proxy_dns_name(self, value):
        """ Set attribute proxy_dns_name

            Proxy DNS Name :  DNS Name of the system acting as a proxy between the NSG instances and the VSD.

        """
        self._proxy_dns_name = value

    proxy_dns_name = property(_get_proxy_dns_name, _set_proxy_dns_name)
    
    def _get_remote_log_server_port(self):
        """ Get attribute remote_log_server_port

            Port to be used to access the Remote Syslog server.  By default, this is port 514.

        """
        return self._remote_log_server_port

    def _set_remote_log_server_port(self, value):
        """ Set attribute remote_log_server_port

            Port to be used to access the Remote Syslog server.  By default, this is port 514.

        """
        self._remote_log_server_port = value

    remote_log_server_port = property(_get_remote_log_server_port, _set_remote_log_server_port)
    
    def _get_remote_log_password(self):
        """ Get attribute remote_log_password

            Password to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP.

        """
        return self._remote_log_password

    def _set_remote_log_password(self, value):
        """ Set attribute remote_log_password

            Password to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP.

        """
        self._remote_log_password = value

    remote_log_password = property(_get_remote_log_password, _set_remote_log_password)
    
    def _get_use_two_factor(self):
        """ Get attribute use_two_factor

            Use Two Factor :  When set to true, the use of two independent authentication factors will be used to secure the installed NSG.  When set to false, there is an assumption that the NSG is being installed in a secure environment and the installer is also trusted.  The defaut value is true, using 2-factor.

        """
        return self._use_two_factor

    def _set_use_two_factor(self, value):
        """ Set attribute use_two_factor

            Use Two Factor :  When set to true, the use of two independent authentication factors will be used to secure the installed NSG.  When set to false, there is an assumption that the NSG is being installed in a secure environment and the installer is also trusted.  The defaut value is true, using 2-factor.

        """
        self._use_two_factor = value

    use_two_factor = property(_get_use_two_factor, _set_use_two_factor)
    
    def _get_ports(self):
        """ Get attribute ports

            Ports Profiles

        """
        return self._ports

    def _set_ports(self, value):
        """ Set attribute ports

            Ports Profiles

        """
        self._ports = value

    ports = property(_get_ports, _set_ports)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"infrastructuregatewayprofile"
