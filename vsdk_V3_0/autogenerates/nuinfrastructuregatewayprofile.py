# -*- coding: utf-8 -*-
"""

NUInfrastructureGatewayProfile
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject



class NUInfrastructureGatewayProfile(NURESTObject):
    """ Represents a InfrastructureGatewayProfile object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUInfrastructureGatewayProfile instance """

        super(NUInfrastructureGatewayProfile, self).__init__()

        # Read/Write Attributes
        self.active_controller = None  #  VSC Active Controller :  IP Address of the primary VSC system nCPE gateways associated to this profile will be reaching for. - int
        self.dead_timer = None  #  Time, in seconds, allowed for a Gateway to be inactive before the VSD revokes its certificates and marks it as untrusted.  Default value is 1 hour (3600) - int
        self.gateway = None  #  Gateway :  Instance of the nCPE on which this profile belongs. - int
        self.ports = None  #  Ports Profiles - int
        self.meta_data_upgrade_path = None  #  Path/URL to retrieve the NSG Upgrade information meta data files.  From that meta data, the NSG will be able to retrieve the upgrade package files and perform some validations.  It is expected that the meta data file is in JSON format.  RFC 2616 states that there are no 'official' maximum length for a URL but different browsers and servers have limits.  Our friendly Internet Explorer has a maximum of 'around' 2048 characters, we shall use this as a limit here. - int
        self.ntp_server_key = None  #  If set, this represents the security key for the Gateway to communicate with the NTP server (a VSC). - int
        self.ntp_server_key_id = None  #  Correspond to the key ID on the NTP server that matches the ntpServerKey value.  Valid values are from 1 to 255 as specified by SR-OS and 0 to specify unused (VSD/NSG only). - int
        self.proxy_dns_name = None  #  Proxy DNS Name :  DNS Name of the system acting as a proxy between the nCPE instances and the VSD. - int
        self.remote_log_dir_path = None  #  Path on the remote log server where the logs generated by the NSG are to be stored.  This field is only useful for SCP and SFTP. - int
        self.remote_log_mode = None  #  Type of Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Valid values are SCP, SFTP, RSyslog, and Disabled.  This field is set to Disabled by default. - int
        self.remote_log_password = None  #  Password to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP. - int
        self.remote_log_server_address = None  #  Primary Log Server for system logs generated by Gateways associated with this Infrastructure Profile.  Can be an IP address or a URL.  This field is optional. - int
        self.remote_log_server_port = None  #  Port to be used to access the Remote Syslog server.  By default, this is port 514. - int
        self.remote_log_username = None  #  Username to be used when accessing the remote log server via SCP or SFTP.  This field is only useful for SCP and SFTP. - int
        self.standby_controller = None  #  VSC Standby Controller :  IP Address of the standby VSC system nCPE gateways associated to this profile will be reaching for. - int
        self.system_sync_scheduler = None  #  Time in a Cron format when configuration update are being applied on the Gateway (NSG).  This property is linked to systemSyncWindow.  Default value is every midnight (0 0 * * *).  Format:  Minutes Hours DayOfMonth Month DayOfWeek - int
        self.system_sync_window = None  #  Length of time, in seconds, given to a Gateway to apply a configuration change.  This property is closely linked to systemSyncScheduler.  Default value is 1 hour (3600 s) - int
        self.upgrade_action = None  #  Upgrade action for NSG associated with this Infrastructure Gateway Profile instance.  By default, there is no upgrade. - int
        self.use_two_factor = None  #  Use Two Factor :  When set to true, the use of two independent authentication factors will be used to secure the installed nCPE.  When set to false, there is an assumption that the nCPE is being installed in a secure environment and the installer is also trusted.  The defaut value is true, using 2-factor. - int
        self.description = None  #  A description of the Profile instance created. - int
        self.enterprise_id = None  #  Name of the enterprise/organisation associated with this Profile instance.  This is a read only attribute - int
        self.name = None  #  Name of the Infrastructure Profile - int
        
        self.expose_attribute(local_name=u"active_controller", remote_name=u"activeController", attribute_type=int)
        self.expose_attribute(local_name=u"dead_timer", remote_name=u"deadTimer", attribute_type=int)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=int)
        self.expose_attribute(local_name=u"ports", remote_name=u"ports", attribute_type=int)
        self.expose_attribute(local_name=u"meta_data_upgrade_path", remote_name=u"metaDataUpgradePath", attribute_type=int)
        self.expose_attribute(local_name=u"ntp_server_key", remote_name=u"NTPServerKey", attribute_type=int)
        self.expose_attribute(local_name=u"ntp_server_key_id", remote_name=u"NTPServerKeyID", attribute_type=int)
        self.expose_attribute(local_name=u"proxy_dns_name", remote_name=u"proxyDNSName", attribute_type=int)
        self.expose_attribute(local_name=u"remote_log_dir_path", remote_name=u"remoteLogDirPath", attribute_type=int)
        self.expose_attribute(local_name=u"remote_log_mode", remote_name=u"remoteLogMode", attribute_type=int)
        self.expose_attribute(local_name=u"remote_log_password", remote_name=u"remoteLogPassword", attribute_type=int)
        self.expose_attribute(local_name=u"remote_log_server_address", remote_name=u"remoteLogServerAddress", attribute_type=int)
        self.expose_attribute(local_name=u"remote_log_server_port", remote_name=u"remoteLogServerPort", attribute_type=int)
        self.expose_attribute(local_name=u"remote_log_username", remote_name=u"remoteLogUsername", attribute_type=int)
        self.expose_attribute(local_name=u"standby_controller", remote_name=u"standbyController", attribute_type=int)
        self.expose_attribute(local_name=u"system_sync_scheduler", remote_name=u"systemSyncScheduler", attribute_type=int)
        self.expose_attribute(local_name=u"system_sync_window", remote_name=u"systemSyncWindow", attribute_type=int)
        self.expose_attribute(local_name=u"upgrade_action", remote_name=u"upgradeAction", attribute_type=int)
        self.expose_attribute(local_name=u"use_two_factor", remote_name=u"useTwoFactor", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        
        # Fetchers
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"infrastructuregatewayprofile"


