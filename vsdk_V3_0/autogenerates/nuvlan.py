# -*- coding: utf-8 -*-
"""

NUVlan
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUAlarmsFetcher


class NUVlan(NURESTObject):
    """ Represents a Vlan object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUVlan instance """

        super(NUVlan, self).__init__()

        # Read/Write Attributes
        self.template_id = None  #  The ID of the template that this Port was created from - int
        self.gateway_id = None  #  The Gateway associated with this  VLAN  . This is a read only attribute - int
        self.permitted_action = None  #  The permitted  action to USE/EXTEND  this Gateway - int
        self.status = None  #  Status of the VLAN. Possible values are - INITIALIZED, ORPHAN, READY, MISMATCH - int
        self.user_mnemonic = None  #  user mnemonic of the Port - int
        self.use_user_mnemonic = None  #  determines whether to use user mnemonic of the Port - int
        self.value = None  #  value of VLAN - int
        self.vport_id = None  #  The Vport associated with this  VLAN  . This is a read only attribute - int
        self.associated_egress_qos_policy_id = None  #  ID of the Egress QOS Policy associated with this Vlan. - int
        self.description = None  #  A description of the Port - int
        self.infrastructure_profile_id = None  #  The ID of the infrastructure profile this is associated to - int
        
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=int)
        self.expose_attribute(local_name=u"gateway_id", remote_name=u"gatewayID", attribute_type=int)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=int)
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=int)
        self.expose_attribute(local_name=u"user_mnemonic", remote_name=u"userMnemonic", attribute_type=int)
        self.expose_attribute(local_name=u"use_user_mnemonic", remote_name=u"useUserMnemonic", attribute_type=int)
        self.expose_attribute(local_name=u"value", remote_name=u"value", attribute_type=int)
        self.expose_attribute(local_name=u"vport_id", remote_name=u"vportID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_egress_qos_policy_id", remote_name=u"associatedEgressQOSPolicyID", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"infrastructure_profile_id", remote_name=u"infrastructureProfileID", attribute_type=int)
        
        # Fetchers
        self.permitted_actions = []
        self.permitted_actions_fetcher = NUPermittedActionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"permitted_actions")
        self.enterprise_permissions = []
        self.enterprise_permissions_fetcher = NUEnterprisePermissionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"enterprise_permissions")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_object(nurest_object=self, local_name=u"alarms")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"vlan"


