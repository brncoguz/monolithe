# -*- coding: utf-8 -*-

"""
NUVlan
Represents VLAN object under a given PORT object

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUEnterprisePermissionsFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUPermittedActionsFetcher
from bambou import NURESTObject


class NUVlan(NURESTObject):
    """ Represents a Vlan object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Vlan instance

        """
        super(NUVlan, self).__init__()

        # Read/Write Attributes
        
        self._status = str()
        self._description = str()
        self._user_mnemonic = str()
        self._template_id = str()
        self._value = int()
        self._gateway_id = str()
        self._permitted_action = str()
        self._use_user_mnemonic = bool()
        self._associated_egress_qos_policy_id = str()
        self._vport_id = str()
        
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, choices=[u'ORPHAN', u'MISMATCH', u'INITIALIZED', u'READY'])
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"user_mnemonic", remote_name=u"userMnemonic", attribute_type=str)
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=str)
        self.expose_attribute(local_name=u"value", remote_name=u"value", attribute_type=int)
        self.expose_attribute(local_name=u"gateway_id", remote_name=u"gatewayID", attribute_type=str)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=str, choices=[u'EXTEND', u'INSTANTIATE', u'USE', u'READ', u'ALL'])
        self.expose_attribute(local_name=u"use_user_mnemonic", remote_name=u"useUserMnemonic", attribute_type=bool)
        self.expose_attribute(local_name=u"associated_egress_qos_policy_id", remote_name=u"associatedEgressQOSPolicyID", attribute_type=str)
        self.expose_attribute(local_name=u"vport_id", remote_name=u"vportID", attribute_type=str)
        
        # Fetchers
        
        self.enterprisepermissions = []
        self.enterprisepermissions_fetcher = NUEnterprisePermissionsFetcher.fetcher_with_entity(entity=self, local_name=u"enterprisepermissions")
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        self.permissions = []
        self.permissions_fetcher = NUPermittedActionsFetcher.fetcher_with_entity(entity=self, local_name=u"permissions")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_status(self):
        """ Get attribute status

            Status of the VLAN. Possible values are - INITIALIZED, ORPHAN, READY, MISMATCH Possible values are INITIALIZED, ORPHAN, READY, MISMATCH, .

        """
        return self._status

    def _set_status(self, value):
        """ Set attribute status

            Status of the VLAN. Possible values are - INITIALIZED, ORPHAN, READY, MISMATCH Possible values are INITIALIZED, ORPHAN, READY, MISMATCH, .

        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_description(self):
        """ Get attribute description

            A description of the Port

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the Port

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_user_mnemonic(self):
        """ Get attribute user_mnemonic

            user mnemonic of the Port

        """
        return self._user_mnemonic

    def _set_user_mnemonic(self, value):
        """ Set attribute user_mnemonic

            user mnemonic of the Port

        """
        self._user_mnemonic = value

    user_mnemonic = property(_get_user_mnemonic, _set_user_mnemonic)
    
    def _get_template_id(self):
        """ Get attribute template_id

            The ID of the template that this Port was created from

        """
        return self._template_id

    def _set_template_id(self, value):
        """ Set attribute template_id

            The ID of the template that this Port was created from

        """
        self._template_id = value

    template_id = property(_get_template_id, _set_template_id)
    
    def _get_value(self):
        """ Get attribute value

            value of VLAN

        """
        return self._value

    def _set_value(self, value):
        """ Set attribute value

            value of VLAN

        """
        self._value = value

    value = property(_get_value, _set_value)
    
    def _get_gateway_id(self):
        """ Get attribute gateway_id

            The Gateway associated with this  VLAN  . This is a read only attribute

        """
        return self._gateway_id

    def _set_gateway_id(self, value):
        """ Set attribute gateway_id

            The Gateway associated with this  VLAN  . This is a read only attribute

        """
        self._gateway_id = value

    gateway_id = property(_get_gateway_id, _set_gateway_id)
    
    def _get_permitted_action(self):
        """ Get attribute permitted_action

            The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        return self._permitted_action

    def _set_permitted_action(self, value):
        """ Set attribute permitted_action

            The permitted  action to USE/EXTEND  this Gateway Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        self._permitted_action = value

    permitted_action = property(_get_permitted_action, _set_permitted_action)
    
    def _get_use_user_mnemonic(self):
        """ Get attribute use_user_mnemonic

            determines whether to use user mnemonic of the Port

        """
        return self._use_user_mnemonic

    def _set_use_user_mnemonic(self, value):
        """ Set attribute use_user_mnemonic

            determines whether to use user mnemonic of the Port

        """
        self._use_user_mnemonic = value

    use_user_mnemonic = property(_get_use_user_mnemonic, _set_use_user_mnemonic)
    
    def _get_associated_egress_qos_policy_id(self):
        """ Get attribute associated_egress_qos_policy_id

            ID of the Egress QOS Policy associated with this Vlan.

        """
        return self._associated_egress_qos_policy_id

    def _set_associated_egress_qos_policy_id(self, value):
        """ Set attribute associated_egress_qos_policy_id

            ID of the Egress QOS Policy associated with this Vlan.

        """
        self._associated_egress_qos_policy_id = value

    associated_egress_qos_policy_id = property(_get_associated_egress_qos_policy_id, _set_associated_egress_qos_policy_id)
    
    def _get_vport_id(self):
        """ Get attribute vport_id

            The Vport associated with this  VLAN  . This is a read only attribute

        """
        return self._vport_id

    def _set_vport_id(self, value):
        """ Set attribute vport_id

            The Vport associated with this  VLAN  . This is a read only attribute

        """
        self._vport_id = value

    vport_id = property(_get_vport_id, _set_vport_id)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"vlan"
