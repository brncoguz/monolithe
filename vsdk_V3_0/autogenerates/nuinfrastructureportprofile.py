# -*- coding: utf-8 -*-

"""
NUInfrastructurePortProfile
Represents an Infrastructure Port Profile

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUInfrastructurePortProfile(NURESTObject):
    """ Represents a InfrastructurePortProfile object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a InfrastructurePortProfile instance

        """
        super(NUInfrastructurePortProfile, self).__init__()

        # Read/Write Attributes
        
        self._description = str()
        self._duplex = str()
        self._ip_address = str()
        self._mtu = int()
        self._enterprise_id = str()
        self._speed = str()
        self._port = str()
        self._name = str()
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"duplex", remote_name=u"duplex", attribute_type=str, choices=[u'SIMPLEX', u'FULL', u'HALF'])
        self.expose_attribute(local_name=u"ip_address", remote_name=u"ipAddress", attribute_type=str)
        self.expose_attribute(local_name=u"mtu", remote_name=u"mtu", attribute_type=int)
        self.expose_attribute(local_name=u"enterprise_id", remote_name=u"enterpriseID", attribute_type=str)
        self.expose_attribute(local_name=u"speed", remote_name=u"speed", attribute_type=str, choices=[u'BASETX100', u'BASET10', u'AUTONEGOTIATE', u'BASEX10G', u'BASET1000'])
        self.expose_attribute(local_name=u"port", remote_name=u"port", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_description(self):
        """ Get attribute description

            A description of the Profile instance created.

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the Profile instance created.

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_duplex(self):
        """ Get attribute duplex

            Port Duplex :  Supported values are FULL where both parties can communicate to the other simultaneously and HALF where each party can only communicate to each other in one direction at a time. Possible values are FULL, HALF, SIMPLEX, .

        """
        return self._duplex

    def _set_duplex(self, value):
        """ Set attribute duplex

            Port Duplex :  Supported values are FULL where both parties can communicate to the other simultaneously and HALF where each party can only communicate to each other in one direction at a time. Possible values are FULL, HALF, SIMPLEX, .

        """
        self._duplex = value

    duplex = property(_get_duplex, _set_duplex)
    
    def _get_ip_address(self):
        """ Get attribute ip_address

            IP Address (if dhclient disabled)

        """
        return self._ip_address

    def _set_ip_address(self, value):
        """ Set attribute ip_address

            IP Address (if dhclient disabled)

        """
        self._ip_address = value

    ip_address = property(_get_ip_address, _set_ip_address)
    
    def _get_mtu(self):
        """ Get attribute mtu

            Port MTU (Maximum transmission unit) :  The size in octets of the largest protocol data unit (PDU) that the layer can pass on.  The default value is normally 1500 octets for Ethernet v2 and can go up to 9198 for Jumbo Frames.

        """
        return self._mtu

    def _set_mtu(self, value):
        """ Set attribute mtu

            Port MTU (Maximum transmission unit) :  The size in octets of the largest protocol data unit (PDU) that the layer can pass on.  The default value is normally 1500 octets for Ethernet v2 and can go up to 9198 for Jumbo Frames.

        """
        self._mtu = value

    mtu = property(_get_mtu, _set_mtu)
    
    def _get_enterprise_id(self):
        """ Get attribute enterprise_id

            Name of the enterprise/organisation associated with this Profile instance.  This is a read only attribute

        """
        return self._enterprise_id

    def _set_enterprise_id(self, value):
        """ Set attribute enterprise_id

            Name of the enterprise/organisation associated with this Profile instance.  This is a read only attribute

        """
        self._enterprise_id = value

    enterprise_id = property(_get_enterprise_id, _set_enterprise_id)
    
    def _get_speed(self):
        """ Get attribute speed

            Port Speed in Mb/s :  Supported Ethernet speeds are 10 (10Base-T), 100 (Fast-ethernet 100Base-TX), 1000 (Gigabit Ethernet 1000Base-T), 10 000 (10 Gigabit Ethernet 10GBase-X), and Auto-Negotiate. Possible values are BASET10, BASETX100, BASET1000, BASEX10G, AUTONEGOTIATE, .

        """
        return self._speed

    def _set_speed(self, value):
        """ Set attribute speed

            Port Speed in Mb/s :  Supported Ethernet speeds are 10 (10Base-T), 100 (Fast-ethernet 100Base-TX), 1000 (Gigabit Ethernet 1000Base-T), 10 000 (10 Gigabit Ethernet 10GBase-X), and Auto-Negotiate. Possible values are BASET10, BASETX100, BASET1000, BASEX10G, AUTONEGOTIATE, .

        """
        self._speed = value

    speed = property(_get_speed, _set_speed)
    
    def _get_port(self):
        """ Get attribute port

            Port :  Port instance associated with this Profile.

        """
        return self._port

    def _set_port(self, value):
        """ Set attribute port

            Port :  Port instance associated with this Profile.

        """
        self._port = value

    port = property(_get_port, _set_port)
    
    def _get_name(self):
        """ Get attribute name

            Name of the Infrastructure Profile

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the Infrastructure Profile

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"infrastructureportprofile"
