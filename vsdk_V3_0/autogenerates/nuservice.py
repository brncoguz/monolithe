# -*- coding: utf-8 -*-

"""
NUService
Represents a networking communication service.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUService(NURESTObject):
    """ Represents a Service object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Service instance

        """
        super(NUService, self).__init__()

        # Read/Write Attributes
        
        self._direction = str()
        self._protocol = str()
        self._description = str()
        self._ether_type = str()
        self._dscp = str()
        self._destination_port = str()
        self._source_port = str()
        self._name = str()
        
        self.expose_attribute(local_name=u"direction", remote_name=u"direction", attribute_type=str, choices=[u'REFLEXIVE', u'UNIDIRECTIONAL', u'BIDIRECTIONAL'])
        self.expose_attribute(local_name=u"protocol", remote_name=u"protocol", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"ether_type", remote_name=u"etherType", attribute_type=str)
        self.expose_attribute(local_name=u"dscp", remote_name=u"DSCP", attribute_type=str)
        self.expose_attribute(local_name=u"destination_port", remote_name=u"destinationPort", attribute_type=str)
        self.expose_attribute(local_name=u"source_port", remote_name=u"sourcePort", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_direction(self):
        """ Get attribute direction

            Direction of the service. Default is UNIDIRECTIONAL. Possible values are UNIDIRECTIONAL, BIDIRECTIONAL, REFLEXIVE, .

        """
        return self._direction

    def _set_direction(self, value):
        """ Set attribute direction

            Direction of the service. Default is UNIDIRECTIONAL. Possible values are UNIDIRECTIONAL, BIDIRECTIONAL, REFLEXIVE, .

        """
        self._direction = value

    direction = property(_get_direction, _set_direction)
    
    def _get_protocol(self):
        """ Get attribute protocol

            Protocol that must be matched.

        """
        return self._protocol

    def _set_protocol(self, value):
        """ Set attribute protocol

            Protocol that must be matched.

        """
        self._protocol = value

    protocol = property(_get_protocol, _set_protocol)
    
    def _get_description(self):
        """ Get attribute description

            Description of the application service.

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of the application service.

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_ether_type(self):
        """ Get attribute ether_type

            Ether type of the packet to be matched. Ether type can be * or a valid hexadecimal value

        """
        return self._ether_type

    def _set_ether_type(self, value):
        """ Set attribute ether_type

            Ether type of the packet to be matched. Ether type can be * or a valid hexadecimal value

        """
        self._ether_type = value

    ether_type = property(_get_ether_type, _set_ether_type)
    
    def _get_dscp(self):
        """ Get attribute dscp

            DSCP match condition to be set in the rule. It is either * or from 0-63

        """
        return self._dscp

    def _set_dscp(self, value):
        """ Set attribute dscp

            DSCP match condition to be set in the rule. It is either * or from 0-63

        """
        self._dscp = value

    dscp = property(_get_dscp, _set_dscp)
    
    def _get_destination_port(self):
        """ Get attribute destination_port

            The destination port to be matched if protocol is UDP or TCP. Value should be either * or single port number or a port range.

        """
        return self._destination_port

    def _set_destination_port(self, value):
        """ Set attribute destination_port

            The destination port to be matched if protocol is UDP or TCP. Value should be either * or single port number or a port range.

        """
        self._destination_port = value

    destination_port = property(_get_destination_port, _set_destination_port)
    
    def _get_source_port(self):
        """ Get attribute source_port

            Source port to be matched if protocol is UDP or TCP. Value can be either * or single port number or a port range.

        """
        return self._source_port

    def _set_source_port(self, value):
        """ Set attribute source_port

            Source port to be matched if protocol is UDP or TCP. Value can be either * or single port number or a port range.

        """
        self._source_port = value

    source_port = property(_get_source_port, _set_source_port)
    
    def _get_name(self):
        """ Get attribute name

            Name of the application service.

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the application service.

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"applicationservice"
