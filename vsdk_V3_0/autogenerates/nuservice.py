# -*- coding: utf-8 -*-
"""

NUService
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject



class NUService(NURESTObject):
    """ Represents a Service object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUService instance """

        super(NUService, self).__init__()

        # Read/Write Attributes
        self.description = None  #  Description of the application service. - int
        self.destination_port = None  #  The destination port to be matched if protocol is UDP or TCP. Value should be either * or single port number or a port range. - int
        self.direction = None  #  Direction of the service (ex: UNIDIRECTIONAL, BIDIRECTIONAL, REFLEXIVE). Default is UNIDIRECTIONAL. - int
        self.dscp = None  #  DSCP match condition to be set in the rule. It is either * or from 0-63 - int
        self.ether_type = None  #  Ether type of the packet to be matched. Ether type can be * or a valid hexadecimal value - int
        self.name = None  #  Name of the application service. - int
        self.protocol = None  #  Protocol that must be matched. - int
        self.source_port = None  #  Source port to be matched if protocol is UDP or TCP. Value can be either * or single port number or a port range. - int
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"destination_port", remote_name=u"destinationPort", attribute_type=int)
        self.expose_attribute(local_name=u"direction", remote_name=u"direction", attribute_type=int)
        self.expose_attribute(local_name=u"dscp", remote_name=u"DSCP", attribute_type=int)
        self.expose_attribute(local_name=u"ether_type", remote_name=u"etherType", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"protocol", remote_name=u"protocol", attribute_type=int)
        self.expose_attribute(local_name=u"source_port", remote_name=u"sourcePort", attribute_type=int)
        
        # Fetchers
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"service"


