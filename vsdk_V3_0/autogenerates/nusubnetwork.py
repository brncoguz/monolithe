# -*- coding: utf-8 -*-
"""

NUSubNetwork
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUVMResyncsFetcher
from ..fetchers import NUAddressRangesFetcher
from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUIPBindingsFetcher
from ..fetchers import NUDHCPOptionsFetcher
from ..fetchers import NUVMInterfacesFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from ..fetchers import NUQosPrimitivesFetcher
from ..fetchers import NUMetadatasFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUEventLogsFetcher


class NUSubNetwork(NURESTObject):
    """ Represents a SubNetwork object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUSubNetwork instance """

        super(NUSubNetwork, self).__init__()

        # Read/Write Attributes
        self.address = None  #  IP address of the subnet defined. In case of zone, this is an optional field for and allows users to allocate an IP address range to a zone. The VSD will auto-assign IP addresses to subnets from this range if a specific IP address is not defined for the subnet - int
        self.associated_application_id = None  #  The associated application ID. - int
        self.associated_application_object_id = None  #  The associated application object ID. - int
        self.associated_application_object_type = None  #  The associated application object type. - int
        self.associated_shared_network_resource_id = None  #  The ID of public subnet that is associated with this subnet - int
        self.template_id = None  #  The ID of the subnet template that this subnet object was derived from - int
        self.description = None  #  A description field provided by the user that identifies the subnet - int
        self.gateway = None  #  The IP address of the gateway of this subnet - int
        self.gateway_mac_address = None  #   - int
        self.ip_type = None  #  IPv4 or IPv6(only IPv4 is supported in R1.0) - int
        self.maintenance_mode = None  #  maintenanceMode is an enum that indicates if the SubNetwork is accepting VM activation requests. Possible values are DISABLED, ENABLED and ENABLED_INHERITED - int
        self.name = None  #  Name of the current entity(Zone or zone template or subnet etc..) Valid characters are alphabets, numbers, space and hyphen( - ). - int
        self.netmask = None  #  Netmask of the subnet defined - int
        self.pat_enabled = None  #   - int
        self.route_distinguisher = None  #  The Route Distinguisher value assigned by VSD for this subnet that is used by the BGP-EVPN protocol in VSC - int
        self.route_target = None  #  The Route Target value assigned by VSD for this subnet that is used by the BGP-EVPN protocol in VSC - int
        self.service_id = None  #  The service ID used by the VSCs to identify this subnet - long
        self.vn_id = None  #  Current Network's  globally unique  VXLAN network identifier generated by VSD - long
        self.multicast = None  #  multicast is enum that indicates multicast policy on Subnet/Subnet Template. Possible values are ENABLED ,DISABLED  and INHERITED - int
        self.associated_multicast_channel_map_id = None  #  The ID of the Multi Cast Channel Map  this Subnet/Subnet Template is associated with. This has to be set when  enableMultiCast is set to ENABLED - int
        self.proxy_arp = None  #   when set VRS will act as  ARP Proxy - int
        self.split_subnet = None  #  Need to add correct description - int
        
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=int)
        self.expose_attribute(local_name=u"associated_application_id", remote_name=u"associatedApplicationID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_application_object_id", remote_name=u"associatedApplicationObjectID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_application_object_type", remote_name=u"associatedApplicationObjectType", attribute_type=int)
        self.expose_attribute(local_name=u"associated_shared_network_resource_id", remote_name=u"associatedSharedNetworkResourceID", attribute_type=int)
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=int)
        self.expose_attribute(local_name=u"gateway_mac_address", remote_name=u"gatewayMACAddress", attribute_type=int)
        self.expose_attribute(local_name=u"ip_type", remote_name=u"IPType", attribute_type=int)
        self.expose_attribute(local_name=u"maintenance_mode", remote_name=u"maintenanceMode", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=int)
        self.expose_attribute(local_name=u"pat_enabled", remote_name=u"patEnabled", attribute_type=int)
        self.expose_attribute(local_name=u"route_distinguisher", remote_name=u"routeDistinguisher", attribute_type=int)
        self.expose_attribute(local_name=u"route_target", remote_name=u"routeTarget", attribute_type=int)
        self.expose_attribute(local_name=u"service_id", remote_name=u"serviceID", attribute_type=long)
        self.expose_attribute(local_name=u"vn_id", remote_name=u"vnId", attribute_type=long)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=int)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=int)
        self.expose_attribute(local_name=u"proxy_arp", remote_name=u"proxyARP", attribute_type=int)
        self.expose_attribute(local_name=u"split_subnet", remote_name=u"splitSubnet", attribute_type=int)
        
        # Fetchers
        self.vm_resyncs = []
        self.vm_resyncs_fetcher = NUVMResyncsFetcher.fetcher_with_object(nurest_object=self, local_name=u"vm_resyncs")
        self.address_ranges = []
        self.address_ranges_fetcher = NUAddressRangesFetcher.fetcher_with_object(nurest_object=self, local_name=u"address_ranges")
        self.statisticss = []
        self.statisticss_fetcher = NUStatisticssFetcher.fetcher_with_object(nurest_object=self, local_name=u"statisticss")
        self.v_ports = []
        self.v_ports_fetcher = NUVPortsFetcher.fetcher_with_object(nurest_object=self, local_name=u"v_ports")
        self.ip_bindings = []
        self.ip_bindings_fetcher = NUIPBindingsFetcher.fetcher_with_object(nurest_object=self, local_name=u"ip_bindings")
        self.dhcp_options = []
        self.dhcp_options_fetcher = NUDHCPOptionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"dhcp_options")
        self.vm_interfaces = []
        self.vm_interfaces_fetcher = NUVMInterfacesFetcher.fetcher_with_object(nurest_object=self, local_name=u"vm_interfaces")
        self.virtual_machines = []
        self.virtual_machines_fetcher = NUVirtualMachinesFetcher.fetcher_with_object(nurest_object=self, local_name=u"virtual_machines")
        self.statistics_policies = []
        self.statistics_policies_fetcher = NUStatisticsPoliciesFetcher.fetcher_with_object(nurest_object=self, local_name=u"statistics_policies")
        self.qos_primitives = []
        self.qos_primitives_fetcher = NUQosPrimitivesFetcher.fetcher_with_object(nurest_object=self, local_name=u"qos_primitives")
        self.metadatas = []
        self.metadatas_fetcher = NUMetadatasFetcher.fetcher_with_object(nurest_object=self, local_name=u"metadatas")
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_object(nurest_object=self, local_name=u"tcas")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"subnetwork"


