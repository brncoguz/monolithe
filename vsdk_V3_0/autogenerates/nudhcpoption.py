# -*- coding: utf-8 -*-

"""
NUDHCPOption
Allows the definition of one or more DHCP options that will be provided to all VMs that are associated with a given domain. DHCP options are provided as Type- Length-Value (TLV). There is no validation by VSD on whether these options are valid or not. It is up to the user to guarantee that the options make sense for their application

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUDHCPOption(NURESTObject):
    """ Represents a DHCPOption object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a DHCPOption instance

        """
        super(NUDHCPOption, self).__init__()

        # Read/Write Attributes
        
        self._length = str()
        self._type = str()
        self._value = str()
        
        self.expose_attribute(local_name=u"length", remote_name=u"length", attribute_type=str)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str)
        self.expose_attribute(local_name=u"value", remote_name=u"value", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_length(self):
        """ Get attribute length

            DHCP option length. Length should be a hexadecimal value(ie. Hex value 0x04 would be passed as '04')

        """
        return self._length

    def _set_length(self, value):
        """ Set attribute length

            DHCP option length. Length should be a hexadecimal value(ie. Hex value 0x04 would be passed as '04')

        """
        self._length = value

    length = property(_get_length, _set_length)
    
    def _get_type(self):
        """ Get attribute type

            DHCP option type. Type should be a hexadecimal value(ie. Hex value 0x06 would be passed as '06')

        """
        return self._type

    def _set_type(self, value):
        """ Set attribute type

            DHCP option type. Type should be a hexadecimal value(ie. Hex value 0x06 would be passed as '06')

        """
        self._type = value

    type = property(_get_type, _set_type)
    
    def _get_value(self):
        """ Get attribute value

            DHCP option value. Value should be a hexadecimal value(ie. Hex value 0xac40 would be passed as 'ac40')

        """
        return self._value

    def _set_value(self, value):
        """ Set attribute value

            DHCP option value. Value should be a hexadecimal value(ie. Hex value 0xac40 would be passed as 'ac40')

        """
        self._value = value

    value = property(_get_value, _set_value)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"dhcpoption"
