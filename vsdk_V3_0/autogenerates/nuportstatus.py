# -*- coding: utf-8 -*-

"""
NUPortStatus
Encapsulates the port information for system monitor entity.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUPortStatus(NURESTObject):
    """ Represents a PortStatus object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a PortStatus instance

        """
        super(NUPortStatus, self).__init__()

        # Read/Write Attributes
        
        self._last_state_change = str()
        self._description = str()
        self._access = bool()
        self._state = str()
        self._uplink = bool()
        self._name = str()
        
        self.expose_attribute(local_name=u"last_state_change", remote_name=u"lastStateChange", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"access", remote_name=u"access", attribute_type=bool)
        self.expose_attribute(local_name=u"state", remote_name=u"state", attribute_type=str, choices=[u'DEGRADED', u'DOWN', u'UP', u'ADMIN_DOWN'])
        self.expose_attribute(local_name=u"uplink", remote_name=u"uplink", attribute_type=bool)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_last_state_change(self):
        """ Get attribute last_state_change

            Last port state change timestamp.

        """
        return self._last_state_change

    def _set_last_state_change(self, value):
        """ Set attribute last_state_change

            Last port state change timestamp.

        """
        self._last_state_change = value

    last_state_change = property(_get_last_state_change, _set_last_state_change)
    
    def _get_description(self):
        """ Get attribute description

            Optional port description.

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Optional port description.

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_access(self):
        """ Get attribute access

            Flag to indicate that it is a access port or network port.

        """
        return self._access

    def _set_access(self, value):
        """ Set attribute access

            Flag to indicate that it is a access port or network port.

        """
        self._access = value

    access = property(_get_access, _set_access)
    
    def _get_state(self):
        """ Get attribute state

            The current state of the port. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        return self._state

    def _set_state(self, value):
        """ Set attribute state

            The current state of the port. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        self._state = value

    state = property(_get_state, _set_state)
    
    def _get_uplink(self):
        """ Get attribute uplink

            Flag to indicate that is an uplink or downlink port.

        """
        return self._uplink

    def _set_uplink(self, value):
        """ Set attribute uplink

            Flag to indicate that is an uplink or downlink port.

        """
        self._uplink = value

    uplink = property(_get_uplink, _set_uplink)
    
    def _get_name(self):
        """ Get attribute name

            Name for the port.

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name for the port.

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"monitoringport"
