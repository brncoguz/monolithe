# -*- coding: utf-8 -*-

"""
NUStaticRoute
Static routes allow end users to define how traffic is routed through the dVRS in addition to the routes learned by VSC through VM activation. By using static routes, end users can define for example that all traffic with a destination address towards a specific subnet must be forwarded to a specific VM attached in the dVRS and this VM could be a firewall

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUStaticRoute(NURESTObject):
    """ Represents a StaticRoute object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a StaticRoute instance

        """
        super(NUStaticRoute, self).__init__()

        # Read/Write Attributes
        
        self._netmask = str()
        self._ip_type = str()
        self._next_hop_ip = str()
        self._address = str()
        
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str)
        self.expose_attribute(local_name=u"ip_type", remote_name=u"IPType", attribute_type=str, choices=[u'IPV6', u'IPV4'])
        self.expose_attribute(local_name=u"next_hop_ip", remote_name=u"nextHopIp", attribute_type=str)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_netmask(self):
        """ Get attribute netmask

            Netmask associated with the route

        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set attribute netmask

            Netmask associated with the route

        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_ip_type(self):
        """ Get attribute ip_type

            IPv4 or IPv6 (only IPv4 supported in R1.0) Possible values are IPV4, IPV6, .

        """
        return self._ip_type

    def _set_ip_type(self, value):
        """ Set attribute ip_type

            IPv4 or IPv6 (only IPv4 supported in R1.0) Possible values are IPV4, IPV6, .

        """
        self._ip_type = value

    ip_type = property(_get_ip_type, _set_ip_type)
    
    def _get_next_hop_ip(self):
        """ Get attribute next_hop_ip

            IP address of the next hop. This must be a VM attached to the dVRS

        """
        return self._next_hop_ip

    def _set_next_hop_ip(self, value):
        """ Set attribute next_hop_ip

            IP address of the next hop. This must be a VM attached to the dVRS

        """
        self._next_hop_ip = value

    next_hop_ip = property(_get_next_hop_ip, _set_next_hop_ip)
    
    def _get_address(self):
        """ Get attribute address

            IP address of the route

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            IP address of the route

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"staticroute"
