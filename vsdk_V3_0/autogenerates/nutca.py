# -*- coding: utf-8 -*-
"""

NUTCA
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUAlarmsFetcher


class NUTCA(NURESTObject):
    """ Represents a TCA object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUTCA instance """

        super(NUTCA, self).__init__()

        # Read/Write Attributes
        self.description = None  #  Desription of the TCA - int
        self.metric = None  #  The metric associated with the TCA - PACKETS_IN, BYTES_IN, PACKETS_IN_DROPPED, PACKETS_IN_ERROR, PACKETS_OUT, BYTES_OUT PACKETS_OUT_DROPPED, PACKETS_OUT_ERROR and PACKETS_DROPPED_BY_RATE_LIMIT - int
        self.name = None  #  The name of the TCA - int
        self.period = None  #  The averaging period - long
        self.scope = None  #  GLOBAL or LOCAL scope. Global refers to aggregate values across subnets, zones or domains. Local refers to traffic from/to individual VMs - int
        self.threshold = None  #  The threshold that must be exceeded before an alarm is issued - long
        self.type = None  #  Rolling average or sequence of samples over the averaging period - ROLLING_AVERAGE or BREACH - int
        self.url_end_point = None  #  URL endpoint to post Alarm data to when TCA is triggered - int
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"metric", remote_name=u"metric", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"period", remote_name=u"period", attribute_type=long)
        self.expose_attribute(local_name=u"scope", remote_name=u"scope", attribute_type=int)
        self.expose_attribute(local_name=u"threshold", remote_name=u"threshold", attribute_type=long)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=int)
        self.expose_attribute(local_name=u"url_end_point", remote_name=u"URLEndPoint", attribute_type=int)
        
        # Fetchers
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_object(nurest_object=self, local_name=u"alarms")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"tca"


