# -*- coding: utf-8 -*-

"""
NUTCA
Provides the definition of the Threshold Control Alarms

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUAlarmsFetcher
from bambou import NURESTObject


class NUTCA(NURESTObject):
    """ Represents a TCA object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a TCA instance

        """
        super(NUTCA, self).__init__()

        # Read/Write Attributes
        
        self._description = str()
        self._metric = str()
        self._period = str()
        self._url_end_point = str()
        self._threshold = str()
        self._scope = str()
        self._type = str()
        self._name = str()
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"metric", remote_name=u"metric", attribute_type=str, choices=[u'BYTES_IN', u'PACKETS_IN', u'PACKETS_OUT_ERROR', u'PACKETS_DROPPED_BY_RATE_LIMIT', u'PACKETS_IN_ERROR', u'PACKETS_OUT', u'PACKETS_OUT_DROPPED', u'BYTES_OUT', u'PACKETS_IN_DROPPED'])
        self.expose_attribute(local_name=u"period", remote_name=u"period", attribute_type=str)
        self.expose_attribute(local_name=u"url_end_point", remote_name=u"URLEndPoint", attribute_type=str)
        self.expose_attribute(local_name=u"threshold", remote_name=u"threshold", attribute_type=str)
        self.expose_attribute(local_name=u"scope", remote_name=u"scope", attribute_type=str, choices=[u'LOCAL', u'GLOBAL'])
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, choices=[u'ROLLING_AVERAGE', u'BREACH'])
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_description(self):
        """ Get attribute description

            Desription of the TCA

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Desription of the TCA

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_metric(self):
        """ Get attribute metric

            The metric associated with the TCA - PACKETS_IN, BYTES_IN, PACKETS_IN_DROPPED, PACKETS_IN_ERROR, PACKETS_OUT, BYTES_OUT PACKETS_OUT_DROPPED, PACKETS_OUT_ERROR and PACKETS_DROPPED_BY_RATE_LIMIT Possible values are PACKETS_IN, BYTES_IN, PACKETS_IN_DROPPED, PACKETS_IN_ERROR, PACKETS_OUT, BYTES_OUT, PACKETS_OUT_DROPPED, PACKETS_OUT_ERROR, PACKETS_DROPPED_BY_RATE_LIMIT, .

        """
        return self._metric

    def _set_metric(self, value):
        """ Set attribute metric

            The metric associated with the TCA - PACKETS_IN, BYTES_IN, PACKETS_IN_DROPPED, PACKETS_IN_ERROR, PACKETS_OUT, BYTES_OUT PACKETS_OUT_DROPPED, PACKETS_OUT_ERROR and PACKETS_DROPPED_BY_RATE_LIMIT Possible values are PACKETS_IN, BYTES_IN, PACKETS_IN_DROPPED, PACKETS_IN_ERROR, PACKETS_OUT, BYTES_OUT, PACKETS_OUT_DROPPED, PACKETS_OUT_ERROR, PACKETS_DROPPED_BY_RATE_LIMIT, .

        """
        self._metric = value

    metric = property(_get_metric, _set_metric)
    
    def _get_period(self):
        """ Get attribute period

            The averaging period

        """
        return self._period

    def _set_period(self, value):
        """ Set attribute period

            The averaging period

        """
        self._period = value

    period = property(_get_period, _set_period)
    
    def _get_url_end_point(self):
        """ Get attribute url_end_point

            URL endpoint to post Alarm data to when TCA is triggered

        """
        return self._url_end_point

    def _set_url_end_point(self, value):
        """ Set attribute url_end_point

            URL endpoint to post Alarm data to when TCA is triggered

        """
        self._url_end_point = value

    url_end_point = property(_get_url_end_point, _set_url_end_point)
    
    def _get_threshold(self):
        """ Get attribute threshold

            The threshold that must be exceeded before an alarm is issued

        """
        return self._threshold

    def _set_threshold(self, value):
        """ Set attribute threshold

            The threshold that must be exceeded before an alarm is issued

        """
        self._threshold = value

    threshold = property(_get_threshold, _set_threshold)
    
    def _get_scope(self):
        """ Get attribute scope

            GLOBAL or LOCAL scope. Global refers to aggregate values across subnets, zones or domains. Local refers to traffic from/to individual VMs Possible values are GLOBAL, LOCAL, .

        """
        return self._scope

    def _set_scope(self, value):
        """ Set attribute scope

            GLOBAL or LOCAL scope. Global refers to aggregate values across subnets, zones or domains. Local refers to traffic from/to individual VMs Possible values are GLOBAL, LOCAL, .

        """
        self._scope = value

    scope = property(_get_scope, _set_scope)
    
    def _get_type(self):
        """ Get attribute type

            Rolling average or sequence of samples over the averaging period - ROLLING_AVERAGE or BREACH Possible values are ROLLING_AVERAGE, BREACH, .

        """
        return self._type

    def _set_type(self, value):
        """ Set attribute type

            Rolling average or sequence of samples over the averaging period - ROLLING_AVERAGE or BREACH Possible values are ROLLING_AVERAGE, BREACH, .

        """
        self._type = value

    type = property(_get_type, _set_type)
    
    def _get_name(self):
        """ Get attribute name

            The name of the TCA

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            The name of the TCA

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"tca"
