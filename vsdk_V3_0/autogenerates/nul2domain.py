# -*- coding: utf-8 -*-

"""
NUL2Domain
This is the definition of a l2 domain associated with a Enterprise

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUEgressACLTemplatesFetcher
from ..fetchers import NUIngressACLTemplatesFetcher
from ..fetchers import NUMetadatasFetcher
from ..fetchers import NUVPNConnectsFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUAddressRangesFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUGroupsFetcher
from ..fetchers import NUHostInterfacesFetcher
from ..fetchers import NUStaticRoutesFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from ..fetchers import NUPolicyGroupsFetcher
from ..fetchers import NUIngressAdvancedForwardingTemplatesFetcher
from ..fetchers import NUBridgeInterfacesFetcher
from ..fetchers import NURedirectionTargetsFetcher
from ..fetchers import NUDHCPOptionsFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUQosPrimitivesFetcher
from bambou import NURESTObject


class NUL2Domain(NURESTObject):
    """ Represents a L2Domain object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a L2Domain instance

        """
        super(NUL2Domain, self).__init__()

        # Read/Write Attributes
        
        self._associated_shared_network_resource_id = str()
        self._vn_id = str()
        self._ip_type = str()
        self._dhcp_managed = bool()
        self._description = str()
        self._address = str()
        self._name = str()
        self._route_distinguisher = str()
        self._netmask = str()
        self._service_id = str()
        self._gateway_mac_address = str()
        self._multicast = str()
        self._template_id = str()
        self._associated_multicast_channel_map_id = str()
        self._route_target = str()
        self._gateway = str()
        self._maintenance_mode = str()
        
        self.expose_attribute(local_name=u"associated_shared_network_resource_id", remote_name=u"associatedSharedNetworkResourceID", attribute_type=str)
        self.expose_attribute(local_name=u"vn_id", remote_name=u"vnId", attribute_type=str)
        self.expose_attribute(local_name=u"ip_type", remote_name=u"IPType", attribute_type=str, choices=[u'IPV6', u'IPV4'])
        self.expose_attribute(local_name=u"dhcp_managed", remote_name=u"DHCPManaged", attribute_type=bool)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"route_distinguisher", remote_name=u"routeDistinguisher", attribute_type=str)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str)
        self.expose_attribute(local_name=u"service_id", remote_name=u"serviceID", attribute_type=str)
        self.expose_attribute(local_name=u"gateway_mac_address", remote_name=u"gatewayMACAddress", attribute_type=str)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=str, choices=[u'ENABLED', u'INHERITED', u'DISABLED'])
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=str)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=str)
        self.expose_attribute(local_name=u"route_target", remote_name=u"routeTarget", attribute_type=str)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str)
        self.expose_attribute(local_name=u"maintenance_mode", remote_name=u"maintenanceMode", attribute_type=str, choices=[u'ENABLED', u'ENABLED_INHERITED', u'DISABLED'])
        
        # Fetchers
        
        self.egressacltemplates = []
        self.egressacltemplates_fetcher = NUEgressACLTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"egressacltemplates")
        
        self.ingressacltemplates = []
        self.ingressacltemplates_fetcher = NUIngressACLTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"ingressacltemplates")
        
        self.metadata = []
        self.metadata_fetcher = NUMetadatasFetcher.fetcher_with_entity(entity=self, local_name=u"metadata")
        
        self.vpnconnections = []
        self.vpnconnections_fetcher = NUVPNConnectsFetcher.fetcher_with_entity(entity=self, local_name=u"vpnconnections")
        
        self.vms = []
        self.vms_fetcher = NUVirtualMachinesFetcher.fetcher_with_entity(entity=self, local_name=u"vms")
        
        self.statistics = []
        self.statistics_fetcher = NUStatisticssFetcher.fetcher_with_entity(entity=self, local_name=u"statistics")
        
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_entity(entity=self, local_name=u"jobs")
        
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_entity(entity=self, local_name=u"tcas")
        
        self.addressranges = []
        self.addressranges_fetcher = NUAddressRangesFetcher.fetcher_with_entity(entity=self, local_name=u"addressranges")
        
        self.vports = []
        self.vports_fetcher = NUVPortsFetcher.fetcher_with_entity(entity=self, local_name=u"vports")
        
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"groups")
        
        self.hostinterfaces = []
        self.hostinterfaces_fetcher = NUHostInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"hostinterfaces")
        
        self.staticroutes = []
        self.staticroutes_fetcher = NUStaticRoutesFetcher.fetcher_with_entity(entity=self, local_name=u"staticroutes")
        
        self.statisticspolicies = []
        self.statisticspolicies_fetcher = NUStatisticsPoliciesFetcher.fetcher_with_entity(entity=self, local_name=u"statisticspolicies")
        
        self.policygroups = []
        self.policygroups_fetcher = NUPolicyGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"policygroups")
        
        self.ingressadvfwdtemplates = []
        self.ingressadvfwdtemplates_fetcher = NUIngressAdvancedForwardingTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"ingressadvfwdtemplates")
        
        self.bridgeinterfaces = []
        self.bridgeinterfaces_fetcher = NUBridgeInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"bridgeinterfaces")
        
        self.redirectiontargets = []
        self.redirectiontargets_fetcher = NURedirectionTargetsFetcher.fetcher_with_entity(entity=self, local_name=u"redirectiontargets")
        
        self.dhcpoptions = []
        self.dhcpoptions_fetcher = NUDHCPOptionsFetcher.fetcher_with_entity(entity=self, local_name=u"dhcpoptions")
        
        self.permissions = []
        self.permissions_fetcher = NUPermittedActionsFetcher.fetcher_with_entity(entity=self, local_name=u"permissions")
        
        self.qos = []
        self.qos_fetcher = NUQosPrimitivesFetcher.fetcher_with_entity(entity=self, local_name=u"qos")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_associated_shared_network_resource_id(self):
        """ Get attribute associated_shared_network_resource_id

            The ID of the L2 Domain  that this L2 Domain object is pointing to

        """
        return self._associated_shared_network_resource_id

    def _set_associated_shared_network_resource_id(self, value):
        """ Set attribute associated_shared_network_resource_id

            The ID of the L2 Domain  that this L2 Domain object is pointing to

        """
        self._associated_shared_network_resource_id = value

    associated_shared_network_resource_id = property(_get_associated_shared_network_resource_id, _set_associated_shared_network_resource_id)
    
    def _get_vn_id(self):
        """ Get attribute vn_id

            Current Network's  globally unique  VXLAN network identifier generated by VSD

        """
        return self._vn_id

    def _set_vn_id(self, value):
        """ Set attribute vn_id

            Current Network's  globally unique  VXLAN network identifier generated by VSD

        """
        self._vn_id = value

    vn_id = property(_get_vn_id, _set_vn_id)
    
    def _get_ip_type(self):
        """ Get attribute ip_type

            IPv4 or IPv6(only IPv4 is supported in R2.0) Possible values are IPV4, IPV6, .

        """
        return self._ip_type

    def _set_ip_type(self, value):
        """ Set attribute ip_type

            IPv4 or IPv6(only IPv4 is supported in R2.0) Possible values are IPV4, IPV6, .

        """
        self._ip_type = value

    ip_type = property(_get_ip_type, _set_ip_type)
    
    def _get_dhcp_managed(self):
        """ Get attribute dhcp_managed

            decides whether L2Domain / L2Domain template DHCP is managed by VSD

        """
        return self._dhcp_managed

    def _set_dhcp_managed(self, value):
        """ Set attribute dhcp_managed

            decides whether L2Domain / L2Domain template DHCP is managed by VSD

        """
        self._dhcp_managed = value

    dhcp_managed = property(_get_dhcp_managed, _set_dhcp_managed)
    
    def _get_description(self):
        """ Get attribute description

            A description field provided by the user that identifies the L2Domain / L2Domain template.

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description field provided by the user that identifies the L2Domain / L2Domain template.

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_address(self):
        """ Get attribute address

            Network address of the L2Domain / L2Domain template defined. 

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            Network address of the L2Domain / L2Domain template defined. 

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_name(self):
        """ Get attribute name

            Name of the L2Domain / L2Domain template,has to be unique within a Enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the L2Domain / L2Domain template,has to be unique within a Enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_route_distinguisher(self):
        """ Get attribute route_distinguisher

            The Route Distinguisher value assigned by VSD for this subnet that is used by the BGP-EVPN protocol in VSC

        """
        return self._route_distinguisher

    def _set_route_distinguisher(self, value):
        """ Set attribute route_distinguisher

            The Route Distinguisher value assigned by VSD for this subnet that is used by the BGP-EVPN protocol in VSC

        """
        self._route_distinguisher = value

    route_distinguisher = property(_get_route_distinguisher, _set_route_distinguisher)
    
    def _get_netmask(self):
        """ Get attribute netmask

            Netmask of the L2Domain / L2Domain template defined

        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set attribute netmask

            Netmask of the L2Domain / L2Domain template defined

        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_service_id(self):
        """ Get attribute service_id

            The service ID used by the VSCs to identify this subnet

        """
        return self._service_id

    def _set_service_id(self, value):
        """ Set attribute service_id

            The service ID used by the VSCs to identify this subnet

        """
        self._service_id = value

    service_id = property(_get_service_id, _set_service_id)
    
    def _get_gateway_mac_address(self):
        """ Get attribute gateway_mac_address

            The MAC address of the Gateway.

        """
        return self._gateway_mac_address

    def _set_gateway_mac_address(self, value):
        """ Set attribute gateway_mac_address

            The MAC address of the Gateway.

        """
        self._gateway_mac_address = value

    gateway_mac_address = property(_get_gateway_mac_address, _set_gateway_mac_address)
    
    def _get_multicast(self):
        """ Get attribute multicast

            multicast is enum that indicates multicast policy on L2Domain / L2Domain template. Possible values are ENABLED and DISABLED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        return self._multicast

    def _set_multicast(self, value):
        """ Set attribute multicast

            multicast is enum that indicates multicast policy on L2Domain / L2Domain template. Possible values are ENABLED and DISABLED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        self._multicast = value

    multicast = property(_get_multicast, _set_multicast)
    
    def _get_template_id(self):
        """ Get attribute template_id

            The ID of the L2 Domain template that this L2 Domain object was derived from

        """
        return self._template_id

    def _set_template_id(self, value):
        """ Set attribute template_id

            The ID of the L2 Domain template that this L2 Domain object was derived from

        """
        self._template_id = value

    template_id = property(_get_template_id, _set_template_id)
    
    def _get_associated_multicast_channel_map_id(self):
        """ Get attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map this L2Domain / L2Domain template template is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        return self._associated_multicast_channel_map_id

    def _set_associated_multicast_channel_map_id(self, value):
        """ Set attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map this L2Domain / L2Domain template template is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        self._associated_multicast_channel_map_id = value

    associated_multicast_channel_map_id = property(_get_associated_multicast_channel_map_id, _set_associated_multicast_channel_map_id)
    
    def _get_route_target(self):
        """ Get attribute route_target

            The Route Target value assigned by VSD for this subnet that is used by the BGP-EVPN protocol in VSC

        """
        return self._route_target

    def _set_route_target(self, value):
        """ Set attribute route_target

            The Route Target value assigned by VSD for this subnet that is used by the BGP-EVPN protocol in VSC

        """
        self._route_target = value

    route_target = property(_get_route_target, _set_route_target)
    
    def _get_gateway(self):
        """ Get attribute gateway

            The IP address of the gateway of this l2 domain

        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set attribute gateway

            The IP address of the gateway of this l2 domain

        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_maintenance_mode(self):
        """ Get attribute maintenance_mode

            maintenanceMode is an enum that indicates if the L2Domain is accepting VM activation requests. Possible values are DISABLED, ENABLED and ENABLED_INHERITED Possible values are DISABLED, ENABLED, ENABLED_INHERITED, .

        """
        return self._maintenance_mode

    def _set_maintenance_mode(self, value):
        """ Set attribute maintenance_mode

            maintenanceMode is an enum that indicates if the L2Domain is accepting VM activation requests. Possible values are DISABLED, ENABLED and ENABLED_INHERITED Possible values are DISABLED, ENABLED, ENABLED_INHERITED, .

        """
        self._maintenance_mode = value

    maintenance_mode = property(_get_maintenance_mode, _set_maintenance_mode)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"l2domain"
