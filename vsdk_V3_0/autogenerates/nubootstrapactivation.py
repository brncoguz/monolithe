# -*- coding: utf-8 -*-

"""
NUBootstrapActivation
NSG Gateway initiated Bootstrap Activation

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUBootstrapActivation(NURESTObject):
    """ Represents a BootstrapActivation object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a BootstrapActivation instance

        """
        super(NUBootstrapActivation, self).__init__()

        # Read/Write Attributes
        
        self._status = str()
        self._hash = str()
        self._config_url = str()
        self._action = str()
        self._cert = str()
        self._seed = str()
        self._cacert = str()
        self._csr = str()
        
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str)
        self.expose_attribute(local_name=u"hash", remote_name=u"hash", attribute_type=str)
        self.expose_attribute(local_name=u"config_url", remote_name=u"configURL", attribute_type=str)
        self.expose_attribute(local_name=u"action", remote_name=u"action", attribute_type=str)
        self.expose_attribute(local_name=u"cert", remote_name=u"cert", attribute_type=str)
        self.expose_attribute(local_name=u"seed", remote_name=u"seed", attribute_type=str)
        self.expose_attribute(local_name=u"cacert", remote_name=u"cacert", attribute_type=str)
        self.expose_attribute(local_name=u"csr", remote_name=u"csr", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_status(self):
        """ Get attribute status

            The agent status for the request

        """
        return self._status

    def _set_status(self, value):
        """ Set attribute status

            The agent status for the request

        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_hash(self):
        """ Get attribute hash

            The authentication hash of this request

        """
        return self._hash

    def _set_hash(self, value):
        """ Set attribute hash

            The authentication hash of this request

        """
        self._hash = value

    hash = property(_get_hash, _set_hash)
    
    def _get_config_url(self):
        """ Get attribute config_url

            The configuration URL

        """
        return self._config_url

    def _set_config_url(self, value):
        """ Set attribute config_url

            The configuration URL

        """
        self._config_url = value

    config_url = property(_get_config_url, _set_config_url)
    
    def _get_action(self):
        """ Get attribute action

            The bootstrap action to perform

        """
        return self._action

    def _set_action(self, value):
        """ Set attribute action

            The bootstrap action to perform

        """
        self._action = value

    action = property(_get_action, _set_action)
    
    def _get_cert(self):
        """ Get attribute cert

            The signed Certificate

        """
        return self._cert

    def _set_cert(self, value):
        """ Set attribute cert

            The signed Certificate

        """
        self._cert = value

    cert = property(_get_cert, _set_cert)
    
    def _get_seed(self):
        """ Get attribute seed

            The random seed for this request

        """
        return self._seed

    def _set_seed(self, value):
        """ Set attribute seed

            The random seed for this request

        """
        self._seed = value

    seed = property(_get_seed, _set_seed)
    
    def _get_cacert(self):
        """ Get attribute cacert

            The CA Certificate Chain

        """
        return self._cacert

    def _set_cacert(self, value):
        """ Set attribute cacert

            The CA Certificate Chain

        """
        self._cacert = value

    cacert = property(_get_cacert, _set_cacert)
    
    def _get_csr(self):
        """ Get attribute csr

            The CSR of the request

        """
        return self._csr

    def _set_csr(self, value):
        """ Set attribute csr

            The CSR of the request

        """
        self._csr = value

    csr = property(_get_csr, _set_csr)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"bootstrapactivation"
