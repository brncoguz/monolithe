# -*- coding: utf-8 -*-

"""
NUIngressACLTemplate
Defines the template for an Ingress ACL

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUIngressACLTemplateEntriesFetcher
from ..fetchers import NUVirtualMachinesFetcher
from bambou import NURESTObject


class NUIngressACLTemplate(NURESTObject):
    """ Represents a IngressACLTemplate object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a IngressACLTemplate instance

        """
        super(NUIngressACLTemplate, self).__init__()

        # Read/Write Attributes
        
        self._assoc_acl_template_id = str()
        self._description = str()
        self._allow_l2_address_spoof = bool()
        self._default_allow_non_ip = bool()
        self._default_allow_ip = bool()
        self._active = bool()
        self._name = str()
        
        self.expose_attribute(local_name=u"assoc_acl_template_id", remote_name=u"assocAclTemplateId", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"allow_l2_address_spoof", remote_name=u"allowL2AddressSpoof", attribute_type=bool)
        self.expose_attribute(local_name=u"default_allow_non_ip", remote_name=u"defaultAllowNonIP", attribute_type=bool)
        self.expose_attribute(local_name=u"default_allow_ip", remote_name=u"defaultAllowIP", attribute_type=bool)
        self.expose_attribute(local_name=u"active", remote_name=u"active", attribute_type=bool)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.ingressaclentrytemplates = []
        self.ingressaclentrytemplates_fetcher = NUIngressACLTemplateEntriesFetcher.fetcher_with_entity(entity=self, local_name=u"ingressaclentrytemplates")
        
        self.vms = []
        self.vms_fetcher = NUVirtualMachinesFetcher.fetcher_with_entity(entity=self, local_name=u"vms")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_assoc_acl_template_id(self):
        """ Get attribute assoc_acl_template_id

            ID of the ACL template associated with this ACL template

        """
        return self._assoc_acl_template_id

    def _set_assoc_acl_template_id(self, value):
        """ Set attribute assoc_acl_template_id

            ID of the ACL template associated with this ACL template

        """
        self._assoc_acl_template_id = value

    assoc_acl_template_id = property(_get_assoc_acl_template_id, _set_assoc_acl_template_id)
    
    def _get_description(self):
        """ Get attribute description

            A description of the entity

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description of the entity

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_allow_l2_address_spoof(self):
        """ Get attribute allow_l2_address_spoof

            If enabled, it will disable the default anti-spoof ACL for this domain that essentially prevents any VM to send packets that do not originate from that particular VM

        """
        return self._allow_l2_address_spoof

    def _set_allow_l2_address_spoof(self, value):
        """ Set attribute allow_l2_address_spoof

            If enabled, it will disable the default anti-spoof ACL for this domain that essentially prevents any VM to send packets that do not originate from that particular VM

        """
        self._allow_l2_address_spoof = value

    allow_l2_address_spoof = property(_get_allow_l2_address_spoof, _set_allow_l2_address_spoof)
    
    def _get_default_allow_non_ip(self):
        """ Get attribute default_allow_non_ip

            If enabled, non ip traffic will be dropped

        """
        return self._default_allow_non_ip

    def _set_default_allow_non_ip(self, value):
        """ Set attribute default_allow_non_ip

            If enabled, non ip traffic will be dropped

        """
        self._default_allow_non_ip = value

    default_allow_non_ip = property(_get_default_allow_non_ip, _set_default_allow_non_ip)
    
    def _get_default_allow_ip(self):
        """ Get attribute default_allow_ip

            If enabled a default ACL of Allow All is added as the last entry in the list of ACL entries

        """
        return self._default_allow_ip

    def _set_default_allow_ip(self, value):
        """ Set attribute default_allow_ip

            If enabled a default ACL of Allow All is added as the last entry in the list of ACL entries

        """
        self._default_allow_ip = value

    default_allow_ip = property(_get_default_allow_ip, _set_default_allow_ip)
    
    def _get_active(self):
        """ Get attribute active

            If enabled, it means that this ACL or QOS entry is active

        """
        return self._active

    def _set_active(self, value):
        """ Set attribute active

            If enabled, it means that this ACL or QOS entry is active

        """
        self._active = value

    active = property(_get_active, _set_active)
    
    def _get_name(self):
        """ Get attribute name

            The name of the entity

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            The name of the entity

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"ingressacltemplate"
