# -*- coding: utf-8 -*-

"""
NUNetworkLayout
This API defines the AS number that should be used in the data center as well as the IP address of the route reflector

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUNetworkLayout(NURESTObject):
    """ Represents a NetworkLayout object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a NetworkLayout instance

        """
        super(NUNetworkLayout, self).__init__()

        # Read/Write Attributes
        
        self._service_type = str()
        self._route_reflector_ip = str()
        self._autonomous_system_num = int()
        
        self.expose_attribute(local_name=u"service_type", remote_name=u"serviceType", attribute_type=str, choices=[u'ROUTER_SWITCH', u'ROUTER_ONLY', u'SUBNET_ONLY'])
        self.expose_attribute(local_name=u"route_reflector_ip", remote_name=u"routeReflectorIP", attribute_type=str)
        self.expose_attribute(local_name=u"autonomous_system_num", remote_name=u"autonomousSystemNum", attribute_type=int)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_service_type(self):
        """ Get attribute service_type

            Identifies whether L3 or L2 services are supported. Only L3services are supported in R1.0. Possible values are ROUTER_ONLY, ROUTER_SWITCH, SUBNET_ONLY, .

        """
        return self._service_type

    def _set_service_type(self, value):
        """ Set attribute service_type

            Identifies whether L3 or L2 services are supported. Only L3services are supported in R1.0. Possible values are ROUTER_ONLY, ROUTER_SWITCH, SUBNET_ONLY, .

        """
        self._service_type = value

    service_type = property(_get_service_type, _set_service_type)
    
    def _get_route_reflector_ip(self):
        """ Get attribute route_reflector_ip

            The IP address of the route reflector that can be used by the VSCs

        """
        return self._route_reflector_ip

    def _set_route_reflector_ip(self, value):
        """ Set attribute route_reflector_ip

            The IP address of the route reflector that can be used by the VSCs

        """
        self._route_reflector_ip = value

    route_reflector_ip = property(_get_route_reflector_ip, _set_route_reflector_ip)
    
    def _get_autonomous_system_num(self):
        """ Get attribute autonomous_system_num

            The AS number associated with this data center

        """
        return self._autonomous_system_num

    def _set_autonomous_system_num(self, value):
        """ Set attribute autonomous_system_num

            The AS number associated with this data center

        """
        self._autonomous_system_num = value

    autonomous_system_num = property(_get_autonomous_system_num, _set_autonomous_system_num)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"networklayou"
