# -*- coding: utf-8 -*-

"""
NURedirectionTarget
A group/collection of vports that belong to the same domain

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVirtualIPsFetcher
from ..fetchers import NUVPortsFetcher
from bambou import NURESTObject


class NURedirectionTarget(NURESTObject):
    """ Represents a RedirectionTarget object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a RedirectionTarget instance

        """
        super(NURedirectionTarget, self).__init__()

        # Read/Write Attributes
        
        self._redundancy_enabled = bool()
        self._name = str()
        self._trigger_type = str()
        self._end_point_type = str()
        self._template_id = str()
        self._virtual_network_id = str()
        self._esi = str()
        self._description = str()
        
        self.expose_attribute(local_name=u"redundancy_enabled", remote_name=u"redundancyEnabled", attribute_type=bool)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"trigger_type", remote_name=u"triggerType", attribute_type=str, choices=[u'GARP', u'NONE'])
        self.expose_attribute(local_name=u"end_point_type", remote_name=u"endPointType", attribute_type=str, choices=[u'L3', u'VIRTUAL_WIRE', u'NONE'])
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=str)
        self.expose_attribute(local_name=u"virtual_network_id", remote_name=u"virtualNetworkID", attribute_type=str)
        self.expose_attribute(local_name=u"esi", remote_name=u"ESI", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        
        # Fetchers
        
        self.virtualips = []
        self.virtualips_fetcher = NUVirtualIPsFetcher.fetcher_with_entity(entity=self, local_name=u"virtualips")
        
        self.vports = []
        self.vports_fetcher = NUVPortsFetcher.fetcher_with_entity(entity=self, local_name=u"vports")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_redundancy_enabled(self):
        """ Get attribute redundancy_enabled

            Allow/Disallow redundant appliances and VIP

        """
        return self._redundancy_enabled

    def _set_redundancy_enabled(self, value):
        """ Set attribute redundancy_enabled

            Allow/Disallow redundant appliances and VIP

        """
        self._redundancy_enabled = value

    redundancy_enabled = property(_get_redundancy_enabled, _set_redundancy_enabled)
    
    def _get_name(self):
        """ Get attribute name

            Name of this redirection target

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of this redirection target

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_trigger_type(self):
        """ Get attribute trigger_type

            Trigger type, could be - NONE/GARP, THIS IS READ ONLY. Possible values are NONE, GARP, .

        """
        return self._trigger_type

    def _set_trigger_type(self, value):
        """ Set attribute trigger_type

            Trigger type, could be - NONE/GARP, THIS IS READ ONLY. Possible values are NONE, GARP, .

        """
        self._trigger_type = value

    trigger_type = property(_get_trigger_type, _set_trigger_type)
    
    def _get_end_point_type(self):
        """ Get attribute end_point_type

            EndpointType defines the type of header rewrite and forwarding performed by VRS when the endpoint is used as a PBR destination. Possible Values - NONE/L3/VIRTUAL_WIRE Possible values are NONE, L3, VIRTUAL_WIRE, .

        """
        return self._end_point_type

    def _set_end_point_type(self, value):
        """ Set attribute end_point_type

            EndpointType defines the type of header rewrite and forwarding performed by VRS when the endpoint is used as a PBR destination. Possible Values - NONE/L3/VIRTUAL_WIRE Possible values are NONE, L3, VIRTUAL_WIRE, .

        """
        self._end_point_type = value

    end_point_type = property(_get_end_point_type, _set_end_point_type)
    
    def _get_template_id(self):
        """ Get attribute template_id

            Template to which this redirection target belongs to

        """
        return self._template_id

    def _set_template_id(self, value):
        """ Set attribute template_id

            Template to which this redirection target belongs to

        """
        self._template_id = value

    template_id = property(_get_template_id, _set_template_id)
    
    def _get_virtual_network_id(self):
        """ Get attribute virtual_network_id

            Auto Generated by VSD. Each vPortTag with redundancy=enable and EndpointType != none will have a globally unique ESI & VNID generated by VSD

        """
        return self._virtual_network_id

    def _set_virtual_network_id(self, value):
        """ Set attribute virtual_network_id

            Auto Generated by VSD. Each vPortTag with redundancy=enable and EndpointType != none will have a globally unique ESI & VNID generated by VSD

        """
        self._virtual_network_id = value

    virtual_network_id = property(_get_virtual_network_id, _set_virtual_network_id)
    
    def _get_esi(self):
        """ Get attribute esi

            ESI id, globally unique

        """
        return self._esi

    def _set_esi(self, value):
        """ Set attribute esi

            ESI id, globally unique

        """
        self._esi = value

    esi = property(_get_esi, _set_esi)
    
    def _get_description(self):
        """ Get attribute description

            Description of this redirection target

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of this redirection target

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"redirectiontarget"
