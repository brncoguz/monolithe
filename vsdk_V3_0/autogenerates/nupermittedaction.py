# -*- coding: utf-8 -*-

"""
NUPermittedAction
Represents  Permitted action on an  entity for a group

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUPermittedAction(NURESTObject):
    """ Represents a PermittedAction object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a PermittedAction instance

        """
        super(NUPermittedAction, self).__init__()

        # Read/Write Attributes
        
        self._name = str()
        self._permitted_entity_type = str()
        self._permitted_entity_description = str()
        self._permitted_action = str()
        self._permitted_entity_id = str()
        self._permitted_entity_name = str()
        
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"permitted_entity_type", remote_name=u"permittedEntityType", attribute_type=str)
        self.expose_attribute(local_name=u"permitted_entity_description", remote_name=u"permittedEntityDescription", attribute_type=str)
        self.expose_attribute(local_name=u"permitted_action", remote_name=u"permittedAction", attribute_type=str, choices=[u'EXTEND', u'INSTANTIATE', u'USE', u'READ', u'ALL'])
        self.expose_attribute(local_name=u"permitted_entity_id", remote_name=u"permittedEntityID", attribute_type=str, choices=[u'HASHING_SEED', u'CASE_INSENSITIVE_ORDER'])
        self.expose_attribute(local_name=u"permitted_entity_name", remote_name=u"permittedEntityName", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_name(self):
        """ Get attribute name

            Name of the  Permission

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the  Permission

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_permitted_entity_type(self):
        """ Get attribute permitted_entity_type

            Type of the entity for which we have given permission.

        """
        return self._permitted_entity_type

    def _set_permitted_entity_type(self, value):
        """ Set attribute permitted_entity_type

            Type of the entity for which we have given permission.

        """
        self._permitted_entity_type = value

    permitted_entity_type = property(_get_permitted_entity_type, _set_permitted_entity_type)
    
    def _get_permitted_entity_description(self):
        """ Get attribute permitted_entity_description

            Description for the permittedEntity

        """
        return self._permitted_entity_description

    def _set_permitted_entity_description(self, value):
        """ Set attribute permitted_entity_description

            Description for the permittedEntity

        """
        self._permitted_entity_description = value

    permitted_entity_description = property(_get_permitted_entity_description, _set_permitted_entity_description)
    
    def _get_permitted_action(self):
        """ Get attribute permitted_action

            The permitted  action to USE/EXTEND/READ/INSTANTIATE  an entity Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        return self._permitted_action

    def _set_permitted_action(self, value):
        """ Set attribute permitted_action

            The permitted  action to USE/EXTEND/READ/INSTANTIATE  an entity Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, .

        """
        self._permitted_action = value

    permitted_action = property(_get_permitted_action, _set_permitted_action)
    
    def _get_permitted_entity_id(self):
        """ Get attribute permitted_entity_id

            The  entity ID for which this permission action is associated against Possible values are CASE_INSENSITIVE_ORDER, HASHING_SEED, .

        """
        return self._permitted_entity_id

    def _set_permitted_entity_id(self, value):
        """ Set attribute permitted_entity_id

            The  entity ID for which this permission action is associated against Possible values are CASE_INSENSITIVE_ORDER, HASHING_SEED, .

        """
        self._permitted_entity_id = value

    permitted_entity_id = property(_get_permitted_entity_id, _set_permitted_entity_id)
    
    def _get_permitted_entity_name(self):
        """ Get attribute permitted_entity_name

            Name of the entity for which we have given permission.

        """
        return self._permitted_entity_name

    def _set_permitted_entity_name(self, value):
        """ Set attribute permitted_entity_name

            Name of the entity for which we have given permission.

        """
        self._permitted_entity_name = value

    permitted_entity_name = property(_get_permitted_entity_name, _set_permitted_entity_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"permission"
