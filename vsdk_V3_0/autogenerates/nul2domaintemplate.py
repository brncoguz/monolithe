# -*- coding: utf-8 -*-
"""

NUL2DomainTemplate
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUJobsFetcher
from ..fetchers import NUIngressACLTemplatesFetcher
from ..fetchers import NUAddressRangesFetcher
from ..fetchers import NUEgressACLTemplatesFetcher
from ..fetchers import NUPolicyGroupTemplatesFetcher
from ..fetchers import NUIngressAdvancedForwardingTemplatesFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUQosPrimitivesFetcher
from ..fetchers import NUL2DomainsFetcher
from ..fetchers import NURedirectionTargetTemplatesFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUGroupsFetcher


class NUL2DomainTemplate(NURESTObject):
    """ Represents a L2DomainTemplate object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUL2DomainTemplate instance """

        super(NUL2DomainTemplate, self).__init__()

        # Read/Write Attributes
        self.address = None  #  Network address of the L2Domain / L2Domain template defined.  - int
        self.description = None  #  A description field provided by the user that identifies the L2Domain / L2Domain template. - int
        self.dhcp_managed = None  #  decides whether L2Domain / L2Domain template DHCP is managed by VSD - int
        self.gateway = None  #  The IP address of the gateway of this l2 domain - int
        self.ip_type = None  #  IPv4 or IPv6(only IPv4 is supported in R2.0) - int
        self.name = None  #  Name of the L2Domain / L2Domain template,has to be unique within a Enterprise. Valid characters are alphabets, numbers, space and hyphen( - ). - int
        self.netmask = None  #  Netmask of the L2Domain / L2Domain template defined - int
        self.multicast = None  #  multicast is enum that indicates multicast policy on L2Domain / L2Domain template. Possible values are ENABLED and DISABLED - int
        self.associated_multicast_channel_map_id = None  #  The ID of the Multi Cast Channel Map this L2Domain / L2Domain template template is associated with. This has to be set when  enableMultiCast is set to ENABLED - int
        
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"dhcp_managed", remote_name=u"DHCPManaged", attribute_type=int)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=int)
        self.expose_attribute(local_name=u"ip_type", remote_name=u"IPType", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=int)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=int)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=int)
        
        # Fetchers
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_object(nurest_object=self, local_name=u"jobs")
        self.ingress_acl_templates = []
        self.ingress_acl_templates_fetcher = NUIngressACLTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"ingress_acl_templates")
        self.address_ranges = []
        self.address_ranges_fetcher = NUAddressRangesFetcher.fetcher_with_object(nurest_object=self, local_name=u"address_ranges")
        self.egress_acl_templates = []
        self.egress_acl_templates_fetcher = NUEgressACLTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"egress_acl_templates")
        self.policy_group_templates = []
        self.policy_group_templates_fetcher = NUPolicyGroupTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"policy_group_templates")
        self.ingress_advanced_forwarding_templates = []
        self.ingress_advanced_forwarding_templates_fetcher = NUIngressAdvancedForwardingTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"ingress_advanced_forwarding_templates")
        self.permitted_actions = []
        self.permitted_actions_fetcher = NUPermittedActionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"permitted_actions")
        self.qos_primitives = []
        self.qos_primitives_fetcher = NUQosPrimitivesFetcher.fetcher_with_object(nurest_object=self, local_name=u"qos_primitives")
        self.l2_domains = []
        self.l2_domains_fetcher = NUL2DomainsFetcher.fetcher_with_object(nurest_object=self, local_name=u"l2_domains")
        self.redirection_target_templates = []
        self.redirection_target_templates_fetcher = NURedirectionTargetTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"redirection_target_templates")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_object(nurest_object=self, local_name=u"groups")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"l2domaintemplate"


