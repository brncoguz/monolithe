# -*- coding: utf-8 -*-
"""

NUQosPrimitive
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUVirtualMachinesFetcher


class NUQosPrimitive(NURESTObject):
    """ Represents a QosPrimitive object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUQosPrimitive instance """

        super(NUQosPrimitive, self).__init__()

        # Read/Write Attributes
        self.associated_dscp_forwarding_class_table_id = None  #  ID of the DSCP-&gt;Forwarding Class used by this Qos Policy - int
        self.associated_dscp_forwarding_class_table_name = None  #  Name of the DSCP-&gt;Forwarding Class used by this Qos Policy - int
        self.assoc_qos_id = None  #  ID of object associated with this QoS object - int
        self.bum_committed_burst_size = None  #  Committed burst size setting for BUM Shaper - int
        self.bum_committed_information_rate = None  #  Committed information rate setting for BUM Shaper - int
        self.bum_peak_burst_size = None  #  Peak burst size setting for Broadcast/Multicast rate limiting - int
        self.bum_peak_information_rate = None  #  Peak rate setting for Broadcast/Multicast rate limiting - int
        self.bum_rate_limiting_active = None  #  Flag the indicates whether Broadcast/Multicast rate limiting is enabled or disabled - int
        self.burst = None  #  The maximum burst size associated with the rate limiter - int
        self.committed_burst_size = None  #  Committed burst size associated with the rate limiter - int
        self.committed_information_rate = None  #  Committed bandwidth that is allowed from each VM - int
        self.description = None  #  A description of the QoS object - int
        self.name = None  #  A unique name of the QoS object - int
        self.peak = None  #  Peak bandwidth that is allowed from each VM - int
        self.rate_limiting_active = None  #  Identifies if rate limiting must be implemented - int
        self.rewrite_forwarding_class = None  #  Specifies if the rewrite flag is set for the QoS policy / template - int
        self.service_class = None  #  Class of service to be used. Service classes in order of priority are A (1), B (2), C(3), D(4), E(5), F(6), G(7) and H(8) - int
        self.trusted_forwarding_class = None  #  Specifies if the trusted flag is set for the QoS policy / template - int
        self.active = None  #  If enabled, it means that this ACL or QOS entry is active - int
        
        self.expose_attribute(local_name=u"associated_dscp_forwarding_class_table_id", remote_name=u"associatedDSCPForwardingClassTableID", attribute_type=int)
        self.expose_attribute(local_name=u"associated_dscp_forwarding_class_table_name", remote_name=u"associatedDSCPForwardingClassTableName", attribute_type=int)
        self.expose_attribute(local_name=u"assoc_qos_id", remote_name=u"assocQosId", attribute_type=int)
        self.expose_attribute(local_name=u"bum_committed_burst_size", remote_name=u"BUMCommittedBurstSize", attribute_type=int)
        self.expose_attribute(local_name=u"bum_committed_information_rate", remote_name=u"BUMCommittedInformationRate", attribute_type=int)
        self.expose_attribute(local_name=u"bum_peak_burst_size", remote_name=u"BUMPeakBurstSize", attribute_type=int)
        self.expose_attribute(local_name=u"bum_peak_information_rate", remote_name=u"BUMPeakInformationRate", attribute_type=int)
        self.expose_attribute(local_name=u"bum_rate_limiting_active", remote_name=u"BUMRateLimitingActive", attribute_type=int)
        self.expose_attribute(local_name=u"burst", remote_name=u"burst", attribute_type=int)
        self.expose_attribute(local_name=u"committed_burst_size", remote_name=u"committedBurstSize", attribute_type=int)
        self.expose_attribute(local_name=u"committed_information_rate", remote_name=u"committedInformationRate", attribute_type=int)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"peak", remote_name=u"peak", attribute_type=int)
        self.expose_attribute(local_name=u"rate_limiting_active", remote_name=u"rateLimitingActive", attribute_type=int)
        self.expose_attribute(local_name=u"rewrite_forwarding_class", remote_name=u"rewriteForwardingClass", attribute_type=int)
        self.expose_attribute(local_name=u"service_class", remote_name=u"serviceClass", attribute_type=int)
        self.expose_attribute(local_name=u"trusted_forwarding_class", remote_name=u"trustedForwardingClass", attribute_type=int)
        self.expose_attribute(local_name=u"active", remote_name=u"active", attribute_type=int)
        
        # Fetchers
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.virtual_machines = []
        self.virtual_machines_fetcher = NUVirtualMachinesFetcher.fetcher_with_object(nurest_object=self, local_name=u"virtual_machines")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"qosprimitive"


