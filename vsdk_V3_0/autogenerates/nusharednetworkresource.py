# -*- coding: utf-8 -*-

"""
NUSharedNetworkResource
This defines shared infrastructure resources that are created by user with CSPROOT role. These resources can be used by all the enterprises in the data center for various purposes. Examples of  shared resources are public subnet, floating subnet, public L2 domain etc.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVPNConnectsFetcher
from ..fetchers import NUAddressRangesFetcher
from ..fetchers import NUStaticRoutesFetcher
from ..fetchers import NUDHCPOptionsFetcher
from bambou import NURESTObject


class NUSharedNetworkResource(NURESTObject):
    """ Represents a SharedNetworkResource object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a SharedNetworkResource instance

        """
        super(NUSharedNetworkResource, self).__init__()

        # Read/Write Attributes
        
        self._uplink_gw_vlan_attachment_id = str()
        self._description = str()
        self._shared_resource_parent_id = str()
        self._uplink_interface_mac = str()
        self._dhcp_managed = bool()
        self._domain_route_distinguisher = str()
        self._netmask = str()
        self._gateway = str()
        self._address = str()
        self._uplink_v_port_name = str()
        self._vn_id = str()
        self._type = str()
        self._domain_route_target = str()
        self._uplink_interface_ip = str()
        self._name = str()
        
        self.expose_attribute(local_name=u"uplink_gw_vlan_attachment_id", remote_name=u"uplinkGWVlanAttachmentID", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"shared_resource_parent_id", remote_name=u"sharedResourceParentID", attribute_type=str)
        self.expose_attribute(local_name=u"uplink_interface_mac", remote_name=u"uplinkInterfaceMAC", attribute_type=str)
        self.expose_attribute(local_name=u"dhcp_managed", remote_name=u"DHCPManaged", attribute_type=bool)
        self.expose_attribute(local_name=u"domain_route_distinguisher", remote_name=u"domainRouteDistinguisher", attribute_type=str)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        self.expose_attribute(local_name=u"uplink_v_port_name", remote_name=u"uplinkVPortName", attribute_type=str)
        self.expose_attribute(local_name=u"vn_id", remote_name=u"vnID", attribute_type=str)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, choices=[u'REGULAR', u'FLOATING', u'L2DOMAIN', u'PUBLIC', u'UPLINK_SUBNET'])
        self.expose_attribute(local_name=u"domain_route_target", remote_name=u"domainRouteTarget", attribute_type=str)
        self.expose_attribute(local_name=u"uplink_interface_ip", remote_name=u"uplinkInterfaceIP", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.vpnconnections = []
        self.vpnconnections_fetcher = NUVPNConnectsFetcher.fetcher_with_entity(entity=self, local_name=u"vpnconnections")
        
        self.addressranges = []
        self.addressranges_fetcher = NUAddressRangesFetcher.fetcher_with_entity(entity=self, local_name=u"addressranges")
        
        self.staticroutes = []
        self.staticroutes_fetcher = NUStaticRoutesFetcher.fetcher_with_entity(entity=self, local_name=u"staticroutes")
        
        self.dhcpoptions = []
        self.dhcpoptions_fetcher = NUDHCPOptionsFetcher.fetcher_with_entity(entity=self, local_name=u"dhcpoptions")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_uplink_gw_vlan_attachment_id(self):
        """ Get attribute uplink_gw_vlan_attachment_id

            VLAN ID to which this vport must be attached

        """
        return self._uplink_gw_vlan_attachment_id

    def _set_uplink_gw_vlan_attachment_id(self, value):
        """ Set attribute uplink_gw_vlan_attachment_id

            VLAN ID to which this vport must be attached

        """
        self._uplink_gw_vlan_attachment_id = value

    uplink_gw_vlan_attachment_id = property(_get_uplink_gw_vlan_attachment_id, _set_uplink_gw_vlan_attachment_id)
    
    def _get_description(self):
        """ Get attribute description

            Description of the shared resource

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of the shared resource

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_shared_resource_parent_id(self):
        """ Get attribute shared_resource_parent_id

            Parent ID of the floating IP subnet to which this FIP subnet must be attached. If empty it will be created in a new domain.

        """
        return self._shared_resource_parent_id

    def _set_shared_resource_parent_id(self, value):
        """ Set attribute shared_resource_parent_id

            Parent ID of the floating IP subnet to which this FIP subnet must be attached. If empty it will be created in a new domain.

        """
        self._shared_resource_parent_id = value

    shared_resource_parent_id = property(_get_shared_resource_parent_id, _set_shared_resource_parent_id)
    
    def _get_uplink_interface_mac(self):
        """ Get attribute uplink_interface_mac

            MAC address of the host interface

        """
        return self._uplink_interface_mac

    def _set_uplink_interface_mac(self, value):
        """ Set attribute uplink_interface_mac

            MAC address of the host interface

        """
        self._uplink_interface_mac = value

    uplink_interface_mac = property(_get_uplink_interface_mac, _set_uplink_interface_mac)
    
    def _get_dhcp_managed(self):
        """ Get attribute dhcp_managed

            true if DHCP is enabled else it is false. This value is always true for network resource of type PUBLIC or FLOATING.

        """
        return self._dhcp_managed

    def _set_dhcp_managed(self, value):
        """ Set attribute dhcp_managed

            true if DHCP is enabled else it is false. This value is always true for network resource of type PUBLIC or FLOATING.

        """
        self._dhcp_managed = value

    dhcp_managed = property(_get_dhcp_managed, _set_dhcp_managed)
    
    def _get_domain_route_distinguisher(self):
        """ Get attribute domain_route_distinguisher

            Route distinguisher configured on the shared resource

        """
        return self._domain_route_distinguisher

    def _set_domain_route_distinguisher(self, value):
        """ Set attribute domain_route_distinguisher

            Route distinguisher configured on the shared resource

        """
        self._domain_route_distinguisher = value

    domain_route_distinguisher = property(_get_domain_route_distinguisher, _set_domain_route_distinguisher)
    
    def _get_netmask(self):
        """ Get attribute netmask

            Netmask configured on the shared resource

        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set attribute netmask

            Netmask configured on the shared resource

        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_gateway(self):
        """ Get attribute gateway

            Gatemask configured on the shared resource

        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set attribute gateway

            Gatemask configured on the shared resource

        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_address(self):
        """ Get attribute address

            Address configured on the shared resource

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            Address configured on the shared resource

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_uplink_v_port_name(self):
        """ Get attribute uplink_v_port_name

            Name of the uplink vport

        """
        return self._uplink_v_port_name

    def _set_uplink_v_port_name(self, value):
        """ Set attribute uplink_v_port_name

            Name of the uplink vport

        """
        self._uplink_v_port_name = value

    uplink_v_port_name = property(_get_uplink_v_port_name, _set_uplink_v_port_name)
    
    def _get_vn_id(self):
        """ Get attribute vn_id

            VNID of the Shared Resource

        """
        return self._vn_id

    def _set_vn_id(self, value):
        """ Set attribute vn_id

            VNID of the Shared Resource

        """
        self._vn_id = value

    vn_id = property(_get_vn_id, _set_vn_id)
    
    def _get_type(self):
        """ Get attribute type

            Type of the shared resource. This is an enum with possible values PUBLIC/FLOATING/L2DOMAIN/UPLINK_SUBNET Possible values are PUBLIC, FLOATING, L2DOMAIN, UPLINK_SUBNET, REGULAR, .

        """
        return self._type

    def _set_type(self, value):
        """ Set attribute type

            Type of the shared resource. This is an enum with possible values PUBLIC/FLOATING/L2DOMAIN/UPLINK_SUBNET Possible values are PUBLIC, FLOATING, L2DOMAIN, UPLINK_SUBNET, REGULAR, .

        """
        self._type = value

    type = property(_get_type, _set_type)
    
    def _get_domain_route_target(self):
        """ Get attribute domain_route_target

            Route target configured on the shared resource

        """
        return self._domain_route_target

    def _set_domain_route_target(self, value):
        """ Set attribute domain_route_target

            Route target configured on the shared resource

        """
        self._domain_route_target = value

    domain_route_target = property(_get_domain_route_target, _set_domain_route_target)
    
    def _get_uplink_interface_ip(self):
        """ Get attribute uplink_interface_ip

            IP address of the host interface

        """
        return self._uplink_interface_ip

    def _set_uplink_interface_ip(self, value):
        """ Set attribute uplink_interface_ip

            IP address of the host interface

        """
        self._uplink_interface_ip = value

    uplink_interface_ip = property(_get_uplink_interface_ip, _set_uplink_interface_ip)
    
    def _get_name(self):
        """ Get attribute name

            Name of the shared resource. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the shared resource. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"sharednetworkresource"
