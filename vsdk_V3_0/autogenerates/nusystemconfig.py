# -*- coding: utf-8 -*-

"""
NUSystemConfig
The system configuration which can be dynamically managed using rest api.

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUSystemConfig(NURESTObject):
    """ Represents a SystemConfig object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a SystemConfig instance

        """
        super(NUSystemConfig, self).__init__()

        # Read/Write Attributes
        
        self._ncpe_bootstrap_endpoint = str()
        self._vm_unreachable_time = int()
        self._vm_resync_deletion_wait_time = int()
        self._ncpe_local_ui_url = str()
        self._two_factor_code_expiry = int()
        self._customer_key = str()
        self._static_wan_service_purge_time = int()
        self._lru_cache_size_per_subnet = int()
        self._avatar_base_url = str()
        self._offset_customer_id = str()
        self._event_processor_timeout = str()
        self._domain_tunnel_type = str()
        self._evpnbgp_community_tag_as_number = str()
        self._offset_service_id = str()
        self._rt_upper_limit = str()
        self._ad_gateway_purge_time = int()
        self._alarms_max_per_object = int()
        self._avatar_base_path = str()
        self._event_log_cleanup_interval = str()
        self._ejbca_vsp_root_ca = str()
        self._acl_allow_origin = str()
        self._sysmon_probe_response_timeout = str()
        self._stats_number_of_data_points = int()
        self._rd_public_network_upper_limit = str()
        self._reflexive_acl_timeout = str()
        self._event_log_entry_max_age = int()
        self._subnet_resync_outstanding_interval = int()
        self._ldap_trust_store_certifcate = str()
        self._ejbca_ncpe_certificate_profile = str()
        self._as_number = str()
        self._vm_purge_time = int()
        self._event_processor_max_events_count = int()
        self._ncpe_config_endpoint = str()
        self._vnid_lower_limit = int()
        self._stats_min_duration = str()
        self._vnid_public_network_upper_limit = int()
        self._rd_lower_limit = str()
        self._vsd_read_only_mode = bool()
        self._max_response = int()
        self._api_key_validity = str()
        self._customer_id_upper_limit = str()
        self._vm_resync_outstanding_interval = int()
        self._vnid_upper_limit = int()
        self._sysmon_node_presence_timeout = str()
        self._vsc_on_same_version_as_vsd = bool()
        self._ldap_trust_store_password = str()
        self._rd_upper_limit = str()
        self._vnid_public_network_lower_limit = int()
        self._stack_trace_enabled = bool()
        self._rt_lower_limit = str()
        self._rt_public_network_upper_limit = str()
        self._page_size = int()
        self._evpnbgp_community_tag_upper_limit = str()
        self._rt_public_network_lower_limit = str()
        self._api_key_renewal_interval = str()
        self._inactive_timeout = str()
        self._event_processor_interval = str()
        self._vm_unreachable_cleanup_time = int()
        self._sysmon_cleanup_task_interval = str()
        self._dhcp_option_size = int()
        self._vm_cache_size = int()
        self._two_factor_code_seed_length = int()
        self._subnet_resync_interval = int()
        self._stats_collector_address = str()
        self._rd_public_network_lower_limit = str()
        self._two_factor_code_length = int()
        self._stats_tsdb_server_address = str()
        self._post_processor_threads_count = int()
        self._stats_collector_port = str()
        self._service_id_upper_limit = str()
        self._ejbca_ncpe_end_entity_profile = str()
        self._stats_max_data_points = int()
        self._esi_id = int()
        self._page_max_size = int()
        self._evpnbgp_community_tag_lower_limit = str()
        
        self.expose_attribute(local_name=u"ncpe_bootstrap_endpoint", remote_name=u"ncpeBootstrapEndpoint", attribute_type=str)
        self.expose_attribute(local_name=u"vm_unreachable_time", remote_name=u"VMUnreachableTime", attribute_type=int)
        self.expose_attribute(local_name=u"vm_resync_deletion_wait_time", remote_name=u"VMResyncDeletionWaitTime", attribute_type=int)
        self.expose_attribute(local_name=u"ncpe_local_ui_url", remote_name=u"ncpeLocalUiUrl", attribute_type=str)
        self.expose_attribute(local_name=u"two_factor_code_expiry", remote_name=u"twoFactorCodeExpiry", attribute_type=int)
        self.expose_attribute(local_name=u"customer_key", remote_name=u"customerKey", attribute_type=str)
        self.expose_attribute(local_name=u"static_wan_service_purge_time", remote_name=u"staticWANServicePurgeTime", attribute_type=int)
        self.expose_attribute(local_name=u"lru_cache_size_per_subnet", remote_name=u"LRUCacheSizePerSubnet", attribute_type=int)
        self.expose_attribute(local_name=u"avatar_base_url", remote_name=u"avatarBaseURL", attribute_type=str)
        self.expose_attribute(local_name=u"offset_customer_id", remote_name=u"offsetCustomerID", attribute_type=str)
        self.expose_attribute(local_name=u"event_processor_timeout", remote_name=u"eventProcessorTimeout", attribute_type=str)
        self.expose_attribute(local_name=u"domain_tunnel_type", remote_name=u"domainTunnelType", attribute_type=str, choices=[u'DC_DEFAULT', u'VXLAN', u'GRE'])
        self.expose_attribute(local_name=u"evpnbgp_community_tag_as_number", remote_name=u"EVPNBGPCommunityTagASNumber", attribute_type=str)
        self.expose_attribute(local_name=u"offset_service_id", remote_name=u"offsetServiceID", attribute_type=str)
        self.expose_attribute(local_name=u"rt_upper_limit", remote_name=u"RTUpperLimit", attribute_type=str)
        self.expose_attribute(local_name=u"ad_gateway_purge_time", remote_name=u"ADGatewayPurgeTime", attribute_type=int)
        self.expose_attribute(local_name=u"alarms_max_per_object", remote_name=u"alarmsMaxPerObject", attribute_type=int)
        self.expose_attribute(local_name=u"avatar_base_path", remote_name=u"avatarBasePath", attribute_type=str)
        self.expose_attribute(local_name=u"event_log_cleanup_interval", remote_name=u"eventLogCleanupInterval", attribute_type=str)
        self.expose_attribute(local_name=u"ejbca_vsp_root_ca", remote_name=u"ejbcaVspRootCa", attribute_type=str)
        self.expose_attribute(local_name=u"acl_allow_origin", remote_name=u"ACLAllowOrigin", attribute_type=str)
        self.expose_attribute(local_name=u"sysmon_probe_response_timeout", remote_name=u"sysmonProbeResponseTimeout", attribute_type=str)
        self.expose_attribute(local_name=u"stats_number_of_data_points", remote_name=u"statsNumberOfDataPoints", attribute_type=int)
        self.expose_attribute(local_name=u"rd_public_network_upper_limit", remote_name=u"RDPublicNetworkUpperLimit", attribute_type=str)
        self.expose_attribute(local_name=u"reflexive_acl_timeout", remote_name=u"reflexiveACLTimeout", attribute_type=str)
        self.expose_attribute(local_name=u"event_log_entry_max_age", remote_name=u"eventLogEntryMaxAge", attribute_type=int)
        self.expose_attribute(local_name=u"subnet_resync_outstanding_interval", remote_name=u"subnetResyncOutstandingInterval", attribute_type=int)
        self.expose_attribute(local_name=u"ldap_trust_store_certifcate", remote_name=u"LDAPTrustStoreCertifcate", attribute_type=str)
        self.expose_attribute(local_name=u"ejbca_ncpe_certificate_profile", remote_name=u"ejbcaNcpeCertificateProfile", attribute_type=str)
        self.expose_attribute(local_name=u"as_number", remote_name=u"ASNumber", attribute_type=str)
        self.expose_attribute(local_name=u"vm_purge_time", remote_name=u"VMPurgeTime", attribute_type=int)
        self.expose_attribute(local_name=u"event_processor_max_events_count", remote_name=u"eventProcessorMaxEventsCount", attribute_type=int)
        self.expose_attribute(local_name=u"ncpe_config_endpoint", remote_name=u"ncpeConfigEndpoint", attribute_type=str)
        self.expose_attribute(local_name=u"vnid_lower_limit", remote_name=u"VNIDLowerLimit", attribute_type=int)
        self.expose_attribute(local_name=u"stats_min_duration", remote_name=u"statsMinDuration", attribute_type=str)
        self.expose_attribute(local_name=u"vnid_public_network_upper_limit", remote_name=u"VNIDPublicNetworkUpperLimit", attribute_type=int)
        self.expose_attribute(local_name=u"rd_lower_limit", remote_name=u"RDLowerLimit", attribute_type=str)
        self.expose_attribute(local_name=u"vsd_read_only_mode", remote_name=u"VSDReadOnlyMode", attribute_type=bool)
        self.expose_attribute(local_name=u"max_response", remote_name=u"maxResponse", attribute_type=int)
        self.expose_attribute(local_name=u"api_key_validity", remote_name=u"APIKeyValidity", attribute_type=str)
        self.expose_attribute(local_name=u"customer_id_upper_limit", remote_name=u"customerIDUpperLimit", attribute_type=str)
        self.expose_attribute(local_name=u"vm_resync_outstanding_interval", remote_name=u"VMResyncOutstandingInterval", attribute_type=int)
        self.expose_attribute(local_name=u"vnid_upper_limit", remote_name=u"VNIDUpperLimit", attribute_type=int)
        self.expose_attribute(local_name=u"sysmon_node_presence_timeout", remote_name=u"sysmonNodePresenceTimeout", attribute_type=str)
        self.expose_attribute(local_name=u"vsc_on_same_version_as_vsd", remote_name=u"VSCOnSameVersionAsVSD", attribute_type=bool)
        self.expose_attribute(local_name=u"ldap_trust_store_password", remote_name=u"LDAPTrustStorePassword", attribute_type=str)
        self.expose_attribute(local_name=u"rd_upper_limit", remote_name=u"RDUpperLimit", attribute_type=str)
        self.expose_attribute(local_name=u"vnid_public_network_lower_limit", remote_name=u"VNIDPublicNetworkLowerLimit", attribute_type=int)
        self.expose_attribute(local_name=u"stack_trace_enabled", remote_name=u"stackTraceEnabled", attribute_type=bool)
        self.expose_attribute(local_name=u"rt_lower_limit", remote_name=u"RTLowerLimit", attribute_type=str)
        self.expose_attribute(local_name=u"rt_public_network_upper_limit", remote_name=u"RTPublicNetworkUpperLimit", attribute_type=str)
        self.expose_attribute(local_name=u"page_size", remote_name=u"pageSize", attribute_type=int)
        self.expose_attribute(local_name=u"evpnbgp_community_tag_upper_limit", remote_name=u"EVPNBGPCommunityTagUpperLimit", attribute_type=str)
        self.expose_attribute(local_name=u"rt_public_network_lower_limit", remote_name=u"RTPublicNetworkLowerLimit", attribute_type=str)
        self.expose_attribute(local_name=u"api_key_renewal_interval", remote_name=u"APIKeyRenewalInterval", attribute_type=str)
        self.expose_attribute(local_name=u"inactive_timeout", remote_name=u"inactiveTimeout", attribute_type=str)
        self.expose_attribute(local_name=u"event_processor_interval", remote_name=u"eventProcessorInterval", attribute_type=str)
        self.expose_attribute(local_name=u"vm_unreachable_cleanup_time", remote_name=u"VMUnreachableCleanupTime", attribute_type=int)
        self.expose_attribute(local_name=u"sysmon_cleanup_task_interval", remote_name=u"sysmonCleanupTaskInterval", attribute_type=str)
        self.expose_attribute(local_name=u"dhcp_option_size", remote_name=u"DHCPOptionSize", attribute_type=int)
        self.expose_attribute(local_name=u"vm_cache_size", remote_name=u"VMCacheSize", attribute_type=int)
        self.expose_attribute(local_name=u"two_factor_code_seed_length", remote_name=u"twoFactorCodeSeedLength", attribute_type=int)
        self.expose_attribute(local_name=u"subnet_resync_interval", remote_name=u"subnetResyncInterval", attribute_type=int)
        self.expose_attribute(local_name=u"stats_collector_address", remote_name=u"statsCollectorAddress", attribute_type=str)
        self.expose_attribute(local_name=u"rd_public_network_lower_limit", remote_name=u"RDPublicNetworkLowerLimit", attribute_type=str)
        self.expose_attribute(local_name=u"two_factor_code_length", remote_name=u"twoFactorCodeLength", attribute_type=int)
        self.expose_attribute(local_name=u"stats_tsdb_server_address", remote_name=u"statsTSDBServerAddress", attribute_type=str)
        self.expose_attribute(local_name=u"post_processor_threads_count", remote_name=u"postProcessorThreadsCount", attribute_type=int)
        self.expose_attribute(local_name=u"stats_collector_port", remote_name=u"statsCollectorPort", attribute_type=str)
        self.expose_attribute(local_name=u"service_id_upper_limit", remote_name=u"serviceIDUpperLimit", attribute_type=str)
        self.expose_attribute(local_name=u"ejbca_ncpe_end_entity_profile", remote_name=u"ejbcaNcpeEndEntityProfile", attribute_type=str)
        self.expose_attribute(local_name=u"stats_max_data_points", remote_name=u"statsMaxDataPoints", attribute_type=int)
        self.expose_attribute(local_name=u"esi_id", remote_name=u"esiID", attribute_type=int)
        self.expose_attribute(local_name=u"page_max_size", remote_name=u"pageMaxSize", attribute_type=int)
        self.expose_attribute(local_name=u"evpnbgp_community_tag_lower_limit", remote_name=u"EVPNBGPCommunityTagLowerLimit", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_ncpe_bootstrap_endpoint(self):
        """ Get attribute ncpe_bootstrap_endpoint

            NSG Bootstrap Endpoint

        """
        return self._ncpe_bootstrap_endpoint

    def _set_ncpe_bootstrap_endpoint(self, value):
        """ Set attribute ncpe_bootstrap_endpoint

            NSG Bootstrap Endpoint

        """
        self._ncpe_bootstrap_endpoint = value

    ncpe_bootstrap_endpoint = property(_get_ncpe_bootstrap_endpoint, _set_ncpe_bootstrap_endpoint)
    
    def _get_vm_unreachable_time(self):
        """ Get attribute vm_unreachable_time

            Timers in sec for unreachable VMs (min =1800, max = 7200)

        """
        return self._vm_unreachable_time

    def _set_vm_unreachable_time(self, value):
        """ Set attribute vm_unreachable_time

            Timers in sec for unreachable VMs (min =1800, max = 7200)

        """
        self._vm_unreachable_time = value

    vm_unreachable_time = property(_get_vm_unreachable_time, _set_vm_unreachable_time)
    
    def _get_vm_resync_deletion_wait_time(self):
        """ Get attribute vm_resync_deletion_wait_time

            After resync on vm , if no controller returns with a VM request with in the below timeframe then it will get deleted deletion wait time in min (min = 1, max =5)

        """
        return self._vm_resync_deletion_wait_time

    def _set_vm_resync_deletion_wait_time(self, value):
        """ Set attribute vm_resync_deletion_wait_time

            After resync on vm , if no controller returns with a VM request with in the below timeframe then it will get deleted deletion wait time in min (min = 1, max =5)

        """
        self._vm_resync_deletion_wait_time = value

    vm_resync_deletion_wait_time = property(_get_vm_resync_deletion_wait_time, _set_vm_resync_deletion_wait_time)
    
    def _get_ncpe_local_ui_url(self):
        """ Get attribute ncpe_local_ui_url

            NSG Local UI URL - will be redirected on NSG to localhost

        """
        return self._ncpe_local_ui_url

    def _set_ncpe_local_ui_url(self, value):
        """ Set attribute ncpe_local_ui_url

            NSG Local UI URL - will be redirected on NSG to localhost

        """
        self._ncpe_local_ui_url = value

    ncpe_local_ui_url = property(_get_ncpe_local_ui_url, _set_ncpe_local_ui_url)
    
    def _get_two_factor_code_expiry(self):
        """ Get attribute two_factor_code_expiry

            Two Factor Code Expiry in Seconds

        """
        return self._two_factor_code_expiry

    def _set_two_factor_code_expiry(self, value):
        """ Set attribute two_factor_code_expiry

            Two Factor Code Expiry in Seconds

        """
        self._two_factor_code_expiry = value

    two_factor_code_expiry = property(_get_two_factor_code_expiry, _set_two_factor_code_expiry)
    
    def _get_customer_key(self):
        """ Get attribute customer_key

            Customer key associated with the licese

        """
        return self._customer_key

    def _set_customer_key(self, value):
        """ Set attribute customer_key

            Customer key associated with the licese

        """
        self._customer_key = value

    customer_key = property(_get_customer_key, _set_customer_key)
    
    def _get_static_wan_service_purge_time(self):
        """ Get attribute static_wan_service_purge_time

            Timers in sec for unreacheable static WAN Services to be deleted(min =3600, max = 7200)

        """
        return self._static_wan_service_purge_time

    def _set_static_wan_service_purge_time(self, value):
        """ Set attribute static_wan_service_purge_time

            Timers in sec for unreacheable static WAN Services to be deleted(min =3600, max = 7200)

        """
        self._static_wan_service_purge_time = value

    static_wan_service_purge_time = property(_get_static_wan_service_purge_time, _set_static_wan_service_purge_time)
    
    def _get_lru_cache_size_per_subnet(self):
        """ Get attribute lru_cache_size_per_subnet

            LRU Map size per subnet ( to hold the deleted vm's ip addresses min =32, max 256).

        """
        return self._lru_cache_size_per_subnet

    def _set_lru_cache_size_per_subnet(self, value):
        """ Set attribute lru_cache_size_per_subnet

            LRU Map size per subnet ( to hold the deleted vm's ip addresses min =32, max 256).

        """
        self._lru_cache_size_per_subnet = value

    lru_cache_size_per_subnet = property(_get_lru_cache_size_per_subnet, _set_lru_cache_size_per_subnet)
    
    def _get_avatar_base_url(self):
        """ Get attribute avatar_base_url

            Defines the url to read the avatar image files

        """
        return self._avatar_base_url

    def _set_avatar_base_url(self, value):
        """ Set attribute avatar_base_url

            Defines the url to read the avatar image files

        """
        self._avatar_base_url = value

    avatar_base_url = property(_get_avatar_base_url, _set_avatar_base_url)
    
    def _get_offset_customer_id(self):
        """ Get attribute offset_customer_id

            Customer id offset, this value has to be set before jboss starts , after that any change of value is ignored (minexclusive = 0, max = 20000) system wide value

        """
        return self._offset_customer_id

    def _set_offset_customer_id(self, value):
        """ Set attribute offset_customer_id

            Customer id offset, this value has to be set before jboss starts , after that any change of value is ignored (minexclusive = 0, max = 20000) system wide value

        """
        self._offset_customer_id = value

    offset_customer_id = property(_get_offset_customer_id, _set_offset_customer_id)
    
    def _get_event_processor_timeout(self):
        """ Get attribute event_processor_timeout

            Defines the maximum time period in milliseconds for the Rest server to wait before sending the events from the system. Value should be between 25000ms to 100000ms.

        """
        return self._event_processor_timeout

    def _set_event_processor_timeout(self, value):
        """ Set attribute event_processor_timeout

            Defines the maximum time period in milliseconds for the Rest server to wait before sending the events from the system. Value should be between 25000ms to 100000ms.

        """
        self._event_processor_timeout = value

    event_processor_timeout = property(_get_event_processor_timeout, _set_event_processor_timeout)
    
    def _get_domain_tunnel_type(self):
        """ Get attribute domain_tunnel_type

            Default Domain Tunnel Type .Possible values are VXLAN,GRE Possible values are DC_DEFAULT, GRE, VXLAN, .

        """
        return self._domain_tunnel_type

    def _set_domain_tunnel_type(self, value):
        """ Set attribute domain_tunnel_type

            Default Domain Tunnel Type .Possible values are VXLAN,GRE Possible values are DC_DEFAULT, GRE, VXLAN, .

        """
        self._domain_tunnel_type = value

    domain_tunnel_type = property(_get_domain_tunnel_type, _set_domain_tunnel_type)
    
    def _get_evpnbgp_community_tag_as_number(self):
        """ Get attribute evpnbgp_community_tag_as_number

             Autonomous System Number,Used for EVPNBGPCommunityTag auto-generation

        """
        return self._evpnbgp_community_tag_as_number

    def _set_evpnbgp_community_tag_as_number(self, value):
        """ Set attribute evpnbgp_community_tag_as_number

             Autonomous System Number,Used for EVPNBGPCommunityTag auto-generation

        """
        self._evpnbgp_community_tag_as_number = value

    evpnbgp_community_tag_as_number = property(_get_evpnbgp_community_tag_as_number, _set_evpnbgp_community_tag_as_number)
    
    def _get_offset_service_id(self):
        """ Get attribute offset_service_id

            Service id offset, this value has to be set before jboss starts during install time, after that any change of value is ignored (minexclusive = 0, max = 40000) system wide value

        """
        return self._offset_service_id

    def _set_offset_service_id(self, value):
        """ Set attribute offset_service_id

            Service id offset, this value has to be set before jboss starts during install time, after that any change of value is ignored (minexclusive = 0, max = 40000) system wide value

        """
        self._offset_service_id = value

    offset_service_id = property(_get_offset_service_id, _set_offset_service_id)
    
    def _get_rt_upper_limit(self):
        """ Get attribute rt_upper_limit

            route target upper limit

        """
        return self._rt_upper_limit

    def _set_rt_upper_limit(self, value):
        """ Set attribute rt_upper_limit

            route target upper limit

        """
        self._rt_upper_limit = value

    rt_upper_limit = property(_get_rt_upper_limit, _set_rt_upper_limit)
    
    def _get_ad_gateway_purge_time(self):
        """ Get attribute ad_gateway_purge_time

            Timers in sec for undefined vms to be deleted(min =7200, max = 86400).

        """
        return self._ad_gateway_purge_time

    def _set_ad_gateway_purge_time(self, value):
        """ Set attribute ad_gateway_purge_time

            Timers in sec for undefined vms to be deleted(min =7200, max = 86400).

        """
        self._ad_gateway_purge_time = value

    ad_gateway_purge_time = property(_get_ad_gateway_purge_time, _set_ad_gateway_purge_time)
    
    def _get_alarms_max_per_object(self):
        """ Get attribute alarms_max_per_object

            Maximum alarms per object for example max distinct alarms for specific VM (min = 5, max =20)

        """
        return self._alarms_max_per_object

    def _set_alarms_max_per_object(self, value):
        """ Set attribute alarms_max_per_object

            Maximum alarms per object for example max distinct alarms for specific VM (min = 5, max =20)

        """
        self._alarms_max_per_object = value

    alarms_max_per_object = property(_get_alarms_max_per_object, _set_alarms_max_per_object)
    
    def _get_avatar_base_path(self):
        """ Get attribute avatar_base_path

            Defines location where image files needs to be copied. Above URL should be configured to read the file from this location.

        """
        return self._avatar_base_path

    def _set_avatar_base_path(self, value):
        """ Set attribute avatar_base_path

            Defines location where image files needs to be copied. Above URL should be configured to read the file from this location.

        """
        self._avatar_base_path = value

    avatar_base_path = property(_get_avatar_base_path, _set_avatar_base_path)
    
    def _get_event_log_cleanup_interval(self):
        """ Get attribute event_log_cleanup_interval

            Cleanup task run interval in seconds (Min: every hour, Max: every day)

        """
        return self._event_log_cleanup_interval

    def _set_event_log_cleanup_interval(self, value):
        """ Set attribute event_log_cleanup_interval

            Cleanup task run interval in seconds (Min: every hour, Max: every day)

        """
        self._event_log_cleanup_interval = value

    event_log_cleanup_interval = property(_get_event_log_cleanup_interval, _set_event_log_cleanup_interval)
    
    def _get_ejbca_vsp_root_ca(self):
        """ Get attribute ejbca_vsp_root_ca

            EJBCA VSP Root CA

        """
        return self._ejbca_vsp_root_ca

    def _set_ejbca_vsp_root_ca(self, value):
        """ Set attribute ejbca_vsp_root_ca

            EJBCA VSP Root CA

        """
        self._ejbca_vsp_root_ca = value

    ejbca_vsp_root_ca = property(_get_ejbca_vsp_root_ca, _set_ejbca_vsp_root_ca)
    
    def _get_acl_allow_origin(self):
        """ Get attribute acl_allow_origin

            Defines the domains allowed for access control list.

        """
        return self._acl_allow_origin

    def _set_acl_allow_origin(self, value):
        """ Set attribute acl_allow_origin

            Defines the domains allowed for access control list.

        """
        self._acl_allow_origin = value

    acl_allow_origin = property(_get_acl_allow_origin, _set_acl_allow_origin)
    
    def _get_sysmon_probe_response_timeout(self):
        """ Get attribute sysmon_probe_response_timeout

            Probe response timeout in seconds (Min: 5,  Max: 60)

        """
        return self._sysmon_probe_response_timeout

    def _set_sysmon_probe_response_timeout(self, value):
        """ Set attribute sysmon_probe_response_timeout

            Probe response timeout in seconds (Min: 5,  Max: 60)

        """
        self._sysmon_probe_response_timeout = value

    sysmon_probe_response_timeout = property(_get_sysmon_probe_response_timeout, _set_sysmon_probe_response_timeout)
    
    def _get_stats_number_of_data_points(self):
        """ Get attribute stats_number_of_data_points

            Specifies number of data points.

        """
        return self._stats_number_of_data_points

    def _set_stats_number_of_data_points(self, value):
        """ Set attribute stats_number_of_data_points

            Specifies number of data points.

        """
        self._stats_number_of_data_points = value

    stats_number_of_data_points = property(_get_stats_number_of_data_points, _set_stats_number_of_data_points)
    
    def _get_rd_public_network_upper_limit(self):
        """ Get attribute rd_public_network_upper_limit

            route distinguisher public network upper limit

        """
        return self._rd_public_network_upper_limit

    def _set_rd_public_network_upper_limit(self, value):
        """ Set attribute rd_public_network_upper_limit

            route distinguisher public network upper limit

        """
        self._rd_public_network_upper_limit = value

    rd_public_network_upper_limit = property(_get_rd_public_network_upper_limit, _set_rd_public_network_upper_limit)
    
    def _get_reflexive_acl_timeout(self):
        """ Get attribute reflexive_acl_timeout

            Defines the timeout in seconds for reflexive ACLs. This value applies for both TCP and UDP connections. Default value is 180 seconds and the timeout should be between 10 to 86400 seconds.

        """
        return self._reflexive_acl_timeout

    def _set_reflexive_acl_timeout(self, value):
        """ Set attribute reflexive_acl_timeout

            Defines the timeout in seconds for reflexive ACLs. This value applies for both TCP and UDP connections. Default value is 180 seconds and the timeout should be between 10 to 86400 seconds.

        """
        self._reflexive_acl_timeout = value

    reflexive_acl_timeout = property(_get_reflexive_acl_timeout, _set_reflexive_acl_timeout)
    
    def _get_event_log_entry_max_age(self):
        """ Get attribute event_log_entry_max_age

            Maximum age in days for cleanup of the eventlog entries (Min: 1 day, Max: 6 months). On every periodic interval run, any eventlog entries older than the maxage will be deleted.

        """
        return self._event_log_entry_max_age

    def _set_event_log_entry_max_age(self, value):
        """ Set attribute event_log_entry_max_age

            Maximum age in days for cleanup of the eventlog entries (Min: 1 day, Max: 6 months). On every periodic interval run, any eventlog entries older than the maxage will be deleted.

        """
        self._event_log_entry_max_age = value

    event_log_entry_max_age = property(_get_event_log_entry_max_age, _set_event_log_entry_max_age)
    
    def _get_subnet_resync_outstanding_interval(self):
        """ Get attribute subnet_resync_outstanding_interval

            Outstanding subnet resync interval (in secs). (min = 10, max = 50) system wide value

        """
        return self._subnet_resync_outstanding_interval

    def _set_subnet_resync_outstanding_interval(self, value):
        """ Set attribute subnet_resync_outstanding_interval

            Outstanding subnet resync interval (in secs). (min = 10, max = 50) system wide value

        """
        self._subnet_resync_outstanding_interval = value

    subnet_resync_outstanding_interval = property(_get_subnet_resync_outstanding_interval, _set_subnet_resync_outstanding_interval)
    
    def _get_ldap_trust_store_certifcate(self):
        """ Get attribute ldap_trust_store_certifcate

            Location of the truststore which is need to store LDAP server certificates. Default is cacerts located in java.home/lib/security/cacerts. Uncomment below setting if you need to use a different file

        """
        return self._ldap_trust_store_certifcate

    def _set_ldap_trust_store_certifcate(self, value):
        """ Set attribute ldap_trust_store_certifcate

            Location of the truststore which is need to store LDAP server certificates. Default is cacerts located in java.home/lib/security/cacerts. Uncomment below setting if you need to use a different file

        """
        self._ldap_trust_store_certifcate = value

    ldap_trust_store_certifcate = property(_get_ldap_trust_store_certifcate, _set_ldap_trust_store_certifcate)
    
    def _get_ejbca_ncpe_certificate_profile(self):
        """ Get attribute ejbca_ncpe_certificate_profile

            EJBCA NSG Certificate Profile

        """
        return self._ejbca_ncpe_certificate_profile

    def _set_ejbca_ncpe_certificate_profile(self, value):
        """ Set attribute ejbca_ncpe_certificate_profile

            EJBCA NSG Certificate Profile

        """
        self._ejbca_ncpe_certificate_profile = value

    ejbca_ncpe_certificate_profile = property(_get_ejbca_ncpe_certificate_profile, _set_ejbca_ncpe_certificate_profile)
    
    def _get_as_number(self):
        """ Get attribute as_number

             Autonomous System Number,Used for RT/RD auto-generation

        """
        return self._as_number

    def _set_as_number(self, value):
        """ Set attribute as_number

             Autonomous System Number,Used for RT/RD auto-generation

        """
        self._as_number = value

    as_number = property(_get_as_number, _set_as_number)
    
    def _get_vm_purge_time(self):
        """ Get attribute vm_purge_time

            Timers in sec for undefined vms to be deleted(min =60, max = 600).

        """
        return self._vm_purge_time

    def _set_vm_purge_time(self, value):
        """ Set attribute vm_purge_time

            Timers in sec for undefined vms to be deleted(min =60, max = 600).

        """
        self._vm_purge_time = value

    vm_purge_time = property(_get_vm_purge_time, _set_vm_purge_time)
    
    def _get_event_processor_max_events_count(self):
        """ Get attribute event_processor_max_events_count

            Defines the maximum number of events to be collected in case of events burst. Value should be between 100 to 500.

        """
        return self._event_processor_max_events_count

    def _set_event_processor_max_events_count(self, value):
        """ Set attribute event_processor_max_events_count

            Defines the maximum number of events to be collected in case of events burst. Value should be between 100 to 500.

        """
        self._event_processor_max_events_count = value

    event_processor_max_events_count = property(_get_event_processor_max_events_count, _set_event_processor_max_events_count)
    
    def _get_ncpe_config_endpoint(self):
        """ Get attribute ncpe_config_endpoint

            NSG Config Endpoint

        """
        return self._ncpe_config_endpoint

    def _set_ncpe_config_endpoint(self, value):
        """ Set attribute ncpe_config_endpoint

            NSG Config Endpoint

        """
        self._ncpe_config_endpoint = value

    ncpe_config_endpoint = property(_get_ncpe_config_endpoint, _set_ncpe_config_endpoint)
    
    def _get_vnid_lower_limit(self):
        """ Get attribute vnid_lower_limit

            Virtual network ID offset

        """
        return self._vnid_lower_limit

    def _set_vnid_lower_limit(self, value):
        """ Set attribute vnid_lower_limit

            Virtual network ID offset

        """
        self._vnid_lower_limit = value

    vnid_lower_limit = property(_get_vnid_lower_limit, _set_vnid_lower_limit)
    
    def _get_stats_min_duration(self):
        """ Get attribute stats_min_duration

            Default minimum duration for statistics to be displayed in UI is 30 days in seconds.

        """
        return self._stats_min_duration

    def _set_stats_min_duration(self, value):
        """ Set attribute stats_min_duration

            Default minimum duration for statistics to be displayed in UI is 30 days in seconds.

        """
        self._stats_min_duration = value

    stats_min_duration = property(_get_stats_min_duration, _set_stats_min_duration)
    
    def _get_vnid_public_network_upper_limit(self):
        """ Get attribute vnid_public_network_upper_limit

            Virtual network ID public network upper limit

        """
        return self._vnid_public_network_upper_limit

    def _set_vnid_public_network_upper_limit(self, value):
        """ Set attribute vnid_public_network_upper_limit

            Virtual network ID public network upper limit

        """
        self._vnid_public_network_upper_limit = value

    vnid_public_network_upper_limit = property(_get_vnid_public_network_upper_limit, _set_vnid_public_network_upper_limit)
    
    def _get_rd_lower_limit(self):
        """ Get attribute rd_lower_limit

            route distinguisher lower limit

        """
        return self._rd_lower_limit

    def _set_rd_lower_limit(self, value):
        """ Set attribute rd_lower_limit

            route distinguisher lower limit

        """
        self._rd_lower_limit = value

    rd_lower_limit = property(_get_rd_lower_limit, _set_rd_lower_limit)
    
    def _get_vsd_read_only_mode(self):
        """ Get attribute vsd_read_only_mode

            True means VSD readonly mode enabled. False means VSD readonly mode disabled

        """
        return self._vsd_read_only_mode

    def _set_vsd_read_only_mode(self, value):
        """ Set attribute vsd_read_only_mode

            True means VSD readonly mode enabled. False means VSD readonly mode disabled

        """
        self._vsd_read_only_mode = value

    vsd_read_only_mode = property(_get_vsd_read_only_mode, _set_vsd_read_only_mode)
    
    def _get_max_response(self):
        """ Get attribute max_response

            Defines maximum results returned by the REST call (allowed max=5000).

        """
        return self._max_response

    def _set_max_response(self, value):
        """ Set attribute max_response

            Defines maximum results returned by the REST call (allowed max=5000).

        """
        self._max_response = value

    max_response = property(_get_max_response, _set_max_response)
    
    def _get_api_key_validity(self):
        """ Get attribute api_key_validity

            Defines the apiKey validity duration in seconds. Default is 24 hours and minimum value is 10 min.

        """
        return self._api_key_validity

    def _set_api_key_validity(self, value):
        """ Set attribute api_key_validity

            Defines the apiKey validity duration in seconds. Default is 24 hours and minimum value is 10 min.

        """
        self._api_key_validity = value

    api_key_validity = property(_get_api_key_validity, _set_api_key_validity)
    
    def _get_customer_id_upper_limit(self):
        """ Get attribute customer_id_upper_limit

            Customer id upper limit, system wide value

        """
        return self._customer_id_upper_limit

    def _set_customer_id_upper_limit(self, value):
        """ Set attribute customer_id_upper_limit

            Customer id upper limit, system wide value

        """
        self._customer_id_upper_limit = value

    customer_id_upper_limit = property(_get_customer_id_upper_limit, _set_customer_id_upper_limit)
    
    def _get_vm_resync_outstanding_interval(self):
        """ Get attribute vm_resync_outstanding_interval

            Outstanding VM resync interval (in secs). (min = 500, max =2000) system wide value

        """
        return self._vm_resync_outstanding_interval

    def _set_vm_resync_outstanding_interval(self, value):
        """ Set attribute vm_resync_outstanding_interval

            Outstanding VM resync interval (in secs). (min = 500, max =2000) system wide value

        """
        self._vm_resync_outstanding_interval = value

    vm_resync_outstanding_interval = property(_get_vm_resync_outstanding_interval, _set_vm_resync_outstanding_interval)
    
    def _get_vnid_upper_limit(self):
        """ Get attribute vnid_upper_limit

            Virtual network ID upper limit

        """
        return self._vnid_upper_limit

    def _set_vnid_upper_limit(self, value):
        """ Set attribute vnid_upper_limit

            Virtual network ID upper limit

        """
        self._vnid_upper_limit = value

    vnid_upper_limit = property(_get_vnid_upper_limit, _set_vnid_upper_limit)
    
    def _get_sysmon_node_presence_timeout(self):
        """ Get attribute sysmon_node_presence_timeout

            Node presence timeout in seconds if no messages (Min: 600,  Max: 86400)

        """
        return self._sysmon_node_presence_timeout

    def _set_sysmon_node_presence_timeout(self, value):
        """ Set attribute sysmon_node_presence_timeout

            Node presence timeout in seconds if no messages (Min: 600,  Max: 86400)

        """
        self._sysmon_node_presence_timeout = value

    sysmon_node_presence_timeout = property(_get_sysmon_node_presence_timeout, _set_sysmon_node_presence_timeout)
    
    def _get_vsc_on_same_version_as_vsd(self):
        """ Get attribute vsc_on_same_version_as_vsd

            This flag is used to indicate that whether VSC is on the same version as VSD or not.

        """
        return self._vsc_on_same_version_as_vsd

    def _set_vsc_on_same_version_as_vsd(self, value):
        """ Set attribute vsc_on_same_version_as_vsd

            This flag is used to indicate that whether VSC is on the same version as VSD or not.

        """
        self._vsc_on_same_version_as_vsd = value

    vsc_on_same_version_as_vsd = property(_get_vsc_on_same_version_as_vsd, _set_vsc_on_same_version_as_vsd)
    
    def _get_ldap_trust_store_password(self):
        """ Get attribute ldap_trust_store_password

            Password to access the truststore. Uncomment below line to change its value.

        """
        return self._ldap_trust_store_password

    def _set_ldap_trust_store_password(self, value):
        """ Set attribute ldap_trust_store_password

            Password to access the truststore. Uncomment below line to change its value.

        """
        self._ldap_trust_store_password = value

    ldap_trust_store_password = property(_get_ldap_trust_store_password, _set_ldap_trust_store_password)
    
    def _get_rd_upper_limit(self):
        """ Get attribute rd_upper_limit

            route distinguisher upper limit

        """
        return self._rd_upper_limit

    def _set_rd_upper_limit(self, value):
        """ Set attribute rd_upper_limit

            route distinguisher upper limit

        """
        self._rd_upper_limit = value

    rd_upper_limit = property(_get_rd_upper_limit, _set_rd_upper_limit)
    
    def _get_vnid_public_network_lower_limit(self):
        """ Get attribute vnid_public_network_lower_limit

            Virtual network ID public network lower limit

        """
        return self._vnid_public_network_lower_limit

    def _set_vnid_public_network_lower_limit(self, value):
        """ Set attribute vnid_public_network_lower_limit

            Virtual network ID public network lower limit

        """
        self._vnid_public_network_lower_limit = value

    vnid_public_network_lower_limit = property(_get_vnid_public_network_lower_limit, _set_vnid_public_network_lower_limit)
    
    def _get_stack_trace_enabled(self):
        """ Get attribute stack_trace_enabled

            True to enable stacktrace in the REST call.

        """
        return self._stack_trace_enabled

    def _set_stack_trace_enabled(self, value):
        """ Set attribute stack_trace_enabled

            True to enable stacktrace in the REST call.

        """
        self._stack_trace_enabled = value

    stack_trace_enabled = property(_get_stack_trace_enabled, _set_stack_trace_enabled)
    
    def _get_rt_lower_limit(self):
        """ Get attribute rt_lower_limit

            route target lower limit

        """
        return self._rt_lower_limit

    def _set_rt_lower_limit(self, value):
        """ Set attribute rt_lower_limit

            route target lower limit

        """
        self._rt_lower_limit = value

    rt_lower_limit = property(_get_rt_lower_limit, _set_rt_lower_limit)
    
    def _get_rt_public_network_upper_limit(self):
        """ Get attribute rt_public_network_upper_limit

            route target public network upper limit

        """
        return self._rt_public_network_upper_limit

    def _set_rt_public_network_upper_limit(self, value):
        """ Set attribute rt_public_network_upper_limit

            route target public network upper limit

        """
        self._rt_public_network_upper_limit = value

    rt_public_network_upper_limit = property(_get_rt_public_network_upper_limit, _set_rt_public_network_upper_limit)
    
    def _get_page_size(self):
        """ Get attribute page_size

            Defines the page size for the results returned by the REST call.

        """
        return self._page_size

    def _set_page_size(self, value):
        """ Set attribute page_size

            Defines the page size for the results returned by the REST call.

        """
        self._page_size = value

    page_size = property(_get_page_size, _set_page_size)
    
    def _get_evpnbgp_community_tag_upper_limit(self):
        """ Get attribute evpnbgp_community_tag_upper_limit

            EVPNBGPCommunityTag upper limit

        """
        return self._evpnbgp_community_tag_upper_limit

    def _set_evpnbgp_community_tag_upper_limit(self, value):
        """ Set attribute evpnbgp_community_tag_upper_limit

            EVPNBGPCommunityTag upper limit

        """
        self._evpnbgp_community_tag_upper_limit = value

    evpnbgp_community_tag_upper_limit = property(_get_evpnbgp_community_tag_upper_limit, _set_evpnbgp_community_tag_upper_limit)
    
    def _get_rt_public_network_lower_limit(self):
        """ Get attribute rt_public_network_lower_limit

            route target public network lower limit

        """
        return self._rt_public_network_lower_limit

    def _set_rt_public_network_lower_limit(self, value):
        """ Set attribute rt_public_network_lower_limit

            route target public network lower limit

        """
        self._rt_public_network_lower_limit = value

    rt_public_network_lower_limit = property(_get_rt_public_network_lower_limit, _set_rt_public_network_lower_limit)
    
    def _get_api_key_renewal_interval(self):
        """ Get attribute api_key_renewal_interval

            Defines the interval, before the expiry time, that can used to renew the apiKey by making me API call. Minimum value is 1 min and maximum is 5 min.

        """
        return self._api_key_renewal_interval

    def _set_api_key_renewal_interval(self, value):
        """ Set attribute api_key_renewal_interval

            Defines the interval, before the expiry time, that can used to renew the apiKey by making me API call. Minimum value is 1 min and maximum is 5 min.

        """
        self._api_key_renewal_interval = value

    api_key_renewal_interval = property(_get_api_key_renewal_interval, _set_api_key_renewal_interval)
    
    def _get_inactive_timeout(self):
        """ Get attribute inactive_timeout

            Defines the inactive timeout for the client. If the client is inactive for more than timeout, server clears off all the cache/information regarding the client. This value should be greater than event processor max timeout

        """
        return self._inactive_timeout

    def _set_inactive_timeout(self, value):
        """ Set attribute inactive_timeout

            Defines the inactive timeout for the client. If the client is inactive for more than timeout, server clears off all the cache/information regarding the client. This value should be greater than event processor max timeout

        """
        self._inactive_timeout = value

    inactive_timeout = property(_get_inactive_timeout, _set_inactive_timeout)
    
    def _get_event_processor_interval(self):
        """ Get attribute event_processor_interval

            Defines time interval in milliseconds when events collected for a client should be processed. Minimum value is 250ms.

        """
        return self._event_processor_interval

    def _set_event_processor_interval(self, value):
        """ Set attribute event_processor_interval

            Defines time interval in milliseconds when events collected for a client should be processed. Minimum value is 250ms.

        """
        self._event_processor_interval = value

    event_processor_interval = property(_get_event_processor_interval, _set_event_processor_interval)
    
    def _get_vm_unreachable_cleanup_time(self):
        """ Get attribute vm_unreachable_cleanup_time

            Timers in sec for unreachable VMs for cleanup(min = 3600, max = 86400).

        """
        return self._vm_unreachable_cleanup_time

    def _set_vm_unreachable_cleanup_time(self, value):
        """ Set attribute vm_unreachable_cleanup_time

            Timers in sec for unreachable VMs for cleanup(min = 3600, max = 86400).

        """
        self._vm_unreachable_cleanup_time = value

    vm_unreachable_cleanup_time = property(_get_vm_unreachable_cleanup_time, _set_vm_unreachable_cleanup_time)
    
    def _get_sysmon_cleanup_task_interval(self):
        """ Get attribute sysmon_cleanup_task_interval

            Sysmon cleanup task run interval in seconds (Min: 10 secs,  Max: 3600 secs)

        """
        return self._sysmon_cleanup_task_interval

    def _set_sysmon_cleanup_task_interval(self, value):
        """ Set attribute sysmon_cleanup_task_interval

            Sysmon cleanup task run interval in seconds (Min: 10 secs,  Max: 3600 secs)

        """
        self._sysmon_cleanup_task_interval = value

    sysmon_cleanup_task_interval = property(_get_sysmon_cleanup_task_interval, _set_sysmon_cleanup_task_interval)
    
    def _get_dhcp_option_size(self):
        """ Get attribute dhcp_option_size

            Defines total DHCP options that can be set on a domain.

        """
        return self._dhcp_option_size

    def _set_dhcp_option_size(self, value):
        """ Set attribute dhcp_option_size

            Defines total DHCP options that can be set on a domain.

        """
        self._dhcp_option_size = value

    dhcp_option_size = property(_get_dhcp_option_size, _set_dhcp_option_size)
    
    def _get_vm_cache_size(self):
        """ Get attribute vm_cache_size

            LRU Map size for vm (min = 1000, max =100000) this value has to set based on memory given to VSD jvm not finalized.

        """
        return self._vm_cache_size

    def _set_vm_cache_size(self, value):
        """ Set attribute vm_cache_size

            LRU Map size for vm (min = 1000, max =100000) this value has to set based on memory given to VSD jvm not finalized.

        """
        self._vm_cache_size = value

    vm_cache_size = property(_get_vm_cache_size, _set_vm_cache_size)
    
    def _get_two_factor_code_seed_length(self):
        """ Get attribute two_factor_code_seed_length

            Two Factor Seed length in bytes

        """
        return self._two_factor_code_seed_length

    def _set_two_factor_code_seed_length(self, value):
        """ Set attribute two_factor_code_seed_length

            Two Factor Seed length in bytes

        """
        self._two_factor_code_seed_length = value

    two_factor_code_seed_length = property(_get_two_factor_code_seed_length, _set_two_factor_code_seed_length)
    
    def _get_subnet_resync_interval(self):
        """ Get attribute subnet_resync_interval

            After resync on a subnet , another resync on the same subnet is allowed based on the below value subnet resync complete wait time in min (min = 5, max =15)

        """
        return self._subnet_resync_interval

    def _set_subnet_resync_interval(self, value):
        """ Set attribute subnet_resync_interval

            After resync on a subnet , another resync on the same subnet is allowed based on the below value subnet resync complete wait time in min (min = 5, max =15)

        """
        self._subnet_resync_interval = value

    subnet_resync_interval = property(_get_subnet_resync_interval, _set_subnet_resync_interval)
    
    def _get_stats_collector_address(self):
        """ Get attribute stats_collector_address

            Specify the ip address(es) of the stats collector.

        """
        return self._stats_collector_address

    def _set_stats_collector_address(self, value):
        """ Set attribute stats_collector_address

            Specify the ip address(es) of the stats collector.

        """
        self._stats_collector_address = value

    stats_collector_address = property(_get_stats_collector_address, _set_stats_collector_address)
    
    def _get_rd_public_network_lower_limit(self):
        """ Get attribute rd_public_network_lower_limit

            route distinguisher public network lower limit

        """
        return self._rd_public_network_lower_limit

    def _set_rd_public_network_lower_limit(self, value):
        """ Set attribute rd_public_network_lower_limit

            route distinguisher public network lower limit

        """
        self._rd_public_network_lower_limit = value

    rd_public_network_lower_limit = property(_get_rd_public_network_lower_limit, _set_rd_public_network_lower_limit)
    
    def _get_two_factor_code_length(self):
        """ Get attribute two_factor_code_length

            Two Factor Code Length

        """
        return self._two_factor_code_length

    def _set_two_factor_code_length(self, value):
        """ Set attribute two_factor_code_length

            Two Factor Code Length

        """
        self._two_factor_code_length = value

    two_factor_code_length = property(_get_two_factor_code_length, _set_two_factor_code_length)
    
    def _get_stats_tsdb_server_address(self):
        """ Get attribute stats_tsdb_server_address

            Specifies the TSDB server location.

        """
        return self._stats_tsdb_server_address

    def _set_stats_tsdb_server_address(self, value):
        """ Set attribute stats_tsdb_server_address

            Specifies the TSDB server location.

        """
        self._stats_tsdb_server_address = value

    stats_tsdb_server_address = property(_get_stats_tsdb_server_address, _set_stats_tsdb_server_address)
    
    def _get_post_processor_threads_count(self):
        """ Get attribute post_processor_threads_count

            Post processor thread count.

        """
        return self._post_processor_threads_count

    def _set_post_processor_threads_count(self, value):
        """ Set attribute post_processor_threads_count

            Post processor thread count.

        """
        self._post_processor_threads_count = value

    post_processor_threads_count = property(_get_post_processor_threads_count, _set_post_processor_threads_count)
    
    def _get_stats_collector_port(self):
        """ Get attribute stats_collector_port

            Specify the port number(s) of the stats collector.

        """
        return self._stats_collector_port

    def _set_stats_collector_port(self, value):
        """ Set attribute stats_collector_port

            Specify the port number(s) of the stats collector.

        """
        self._stats_collector_port = value

    stats_collector_port = property(_get_stats_collector_port, _set_stats_collector_port)
    
    def _get_service_id_upper_limit(self):
        """ Get attribute service_id_upper_limit

            Service id upper limit system wide value

        """
        return self._service_id_upper_limit

    def _set_service_id_upper_limit(self, value):
        """ Set attribute service_id_upper_limit

            Service id upper limit system wide value

        """
        self._service_id_upper_limit = value

    service_id_upper_limit = property(_get_service_id_upper_limit, _set_service_id_upper_limit)
    
    def _get_ejbca_ncpe_end_entity_profile(self):
        """ Get attribute ejbca_ncpe_end_entity_profile

            EJBCA NSG End Entity Profile

        """
        return self._ejbca_ncpe_end_entity_profile

    def _set_ejbca_ncpe_end_entity_profile(self, value):
        """ Set attribute ejbca_ncpe_end_entity_profile

            EJBCA NSG End Entity Profile

        """
        self._ejbca_ncpe_end_entity_profile = value

    ejbca_ncpe_end_entity_profile = property(_get_ejbca_ncpe_end_entity_profile, _set_ejbca_ncpe_end_entity_profile)
    
    def _get_stats_max_data_points(self):
        """ Get attribute stats_max_data_points

            Specifies the maximum number of data points to support.

        """
        return self._stats_max_data_points

    def _set_stats_max_data_points(self, value):
        """ Set attribute stats_max_data_points

            Specifies the maximum number of data points to support.

        """
        self._stats_max_data_points = value

    stats_max_data_points = property(_get_stats_max_data_points, _set_stats_max_data_points)
    
    def _get_esi_id(self):
        """ Get attribute esi_id

            ESI ID offset

        """
        return self._esi_id

    def _set_esi_id(self, value):
        """ Set attribute esi_id

            ESI ID offset

        """
        self._esi_id = value

    esi_id = property(_get_esi_id, _set_esi_id)
    
    def _get_page_max_size(self):
        """ Get attribute page_max_size

            Defines upper bound for the page size (allowed max=1000). Configured or input page size should be less than this max page size.

        """
        return self._page_max_size

    def _set_page_max_size(self, value):
        """ Set attribute page_max_size

            Defines upper bound for the page size (allowed max=1000). Configured or input page size should be less than this max page size.

        """
        self._page_max_size = value

    page_max_size = property(_get_page_max_size, _set_page_max_size)
    
    def _get_evpnbgp_community_tag_lower_limit(self):
        """ Get attribute evpnbgp_community_tag_lower_limit

            EVPNBGPCommunityTag lower limit

        """
        return self._evpnbgp_community_tag_lower_limit

    def _set_evpnbgp_community_tag_lower_limit(self, value):
        """ Set attribute evpnbgp_community_tag_lower_limit

            EVPNBGPCommunityTag lower limit

        """
        self._evpnbgp_community_tag_lower_limit = value

    evpnbgp_community_tag_lower_limit = property(_get_evpnbgp_community_tag_lower_limit, _set_evpnbgp_community_tag_lower_limit)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"systemconfig"
