# -*- coding: utf-8 -*-

"""
NUVMResync
Provide information about the state of a VM resync request

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUVMResync(NURESTObject):
    """ Represents a VMResync object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a VMResync instance

        """
        super(NUVMResync, self).__init__()

        # Read/Write Attributes
        
        self._status = str()
        self._last_request_timestamp = str()
        self._last_time_resync_initiated = str()
        
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, choices=[u'SUCCESS', u'IN_PROGRESS'])
        self.expose_attribute(local_name=u"last_request_timestamp", remote_name=u"lastRequestTimestamp", attribute_type=str)
        self.expose_attribute(local_name=u"last_time_resync_initiated", remote_name=u"lastTimeResyncInitiated", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_status(self):
        """ Get attribute status

            Status of the resync - IN_PROGRESS, SUCCESS Possible values are IN_PROGRESS, SUCCESS, .

        """
        return self._status

    def _set_status(self, value):
        """ Set attribute status

            Status of the resync - IN_PROGRESS, SUCCESS Possible values are IN_PROGRESS, SUCCESS, .

        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_last_request_timestamp(self):
        """ Get attribute last_request_timestamp

            Time of the last timestamp received

        """
        return self._last_request_timestamp

    def _set_last_request_timestamp(self, value):
        """ Set attribute last_request_timestamp

            Time of the last timestamp received

        """
        self._last_request_timestamp = value

    last_request_timestamp = property(_get_last_request_timestamp, _set_last_request_timestamp)
    
    def _get_last_time_resync_initiated(self):
        """ Get attribute last_time_resync_initiated

            Time that the resync was initiated

        """
        return self._last_time_resync_initiated

    def _set_last_time_resync_initiated(self, value):
        """ Set attribute last_time_resync_initiated

            Time that the resync was initiated

        """
        self._last_time_resync_initiated = value

    last_time_resync_initiated = property(_get_last_time_resync_initiated, _set_last_time_resync_initiated)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"resyn"
