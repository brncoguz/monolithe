# -*- coding: utf-8 -*-

"""
NUBootstrap
Gateway bootstrap details

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUBootstrap(NURESTObject):
    """ Represents a Bootstrap object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Bootstrap instance

        """
        super(NUBootstrap, self).__init__()

        # Read/Write Attributes
        
        self._status = str()
        self._installer_id = str()
        
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, choices=[u'CERTIFICATE_SIGNED', u'NOTIFIED', u'INACTIVE', u'ACTIVE'])
        self.expose_attribute(local_name=u"installer_id", remote_name=u"installerID", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_status(self):
        """ Get attribute status

            Bootstrap status; can be, for example, Active, Inactive, or Notified. Possible values are INACTIVE, NOTIFIED, CERTIFICATE_SIGNED, ACTIVE, .

        """
        return self._status

    def _set_status(self, value):
        """ Set attribute status

            Bootstrap status; can be, for example, Active, Inactive, or Notified. Possible values are INACTIVE, NOTIFIED, CERTIFICATE_SIGNED, ACTIVE, .

        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_installer_id(self):
        """ Get attribute installer_id

            The Installer ID

        """
        return self._installer_id

    def _set_installer_id(self, value):
        """ Set attribute installer_id

            The Installer ID

        """
        self._installer_id = value

    installer_id = property(_get_installer_id, _set_installer_id)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"bootstrap"
