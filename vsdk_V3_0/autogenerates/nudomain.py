# -*- coding: utf-8 -*-
"""

NUDomain
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUBridgeInterfacesFetcher
from ..fetchers import NUEgressACLTemplatesFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUDHCPOptionsFetcher
from ..fetchers import NUHostInterfacesFetcher
from ..fetchers import NUVMInterfacesFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NURedirectionTargetsFetcher
from ..fetchers import NUPolicyGroupsFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUStaticRoutesFetcher
from ..fetchers import NUGroupsFetcher
from ..fetchers import NUIngressACLTemplatesFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUIngressAdvancedForwardingTemplatesFetcher
from ..fetchers import NUSubNetworksFetcher
from ..fetchers import NUQosPrimitivesFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUZonesFetcher
from ..fetchers import NUVPNConnectsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUFloatingIpsFetcher


class NUDomain(NURESTObject):
    """ Represents a Domain object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUDomain instance """

        super(NUDomain, self).__init__()

        # Read/Write Attributes
        self.application_deployment_policy = None  #  Application deployment policy. - int
        self.template_id = None  #  The ID of the template that this domain was created from. This should be set when instantiating a domain - int
        self.back_haul_route_distinguisher = None  #  Route distinguisher associated with the BackHaul Service in dVRS. It is an Read-Only parameter that cannot be provided by the user. System generates this identifier automatically - int
        self.back_haul_route_target = None  #  Route target associated with the BackHaul Service in dVRS. It is an Read-Only parameter that cannot be provided by the user. System generates this identifier automatically - int
        self.back_haul_vnid = None  #  Current BackHaul Network's  globally unique  VXLAN network identifier generated by VSD - long
        self.customer_id = None  #  The customerID that is created in the VSC and identifies this dVRS. This is auto-generated by VSD - long
        self.description = None  #  A description string of the domain that is provided by the user - int
        self.dhcp_behavior = None  #  DHCPBehaviorType is an enum that indicates DHCP Behavior of VRS having VM's under this domain. Possible values are FLOOD, CONSUME ,RELAY - int
        self.dhcp_server_address = None  #  when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set - int
        self.tunnel_type = None  #  Default Domain Tunnel Type .Possible values are VXLAN,GRE - int
        self.multicast = None  #  multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED - int
        self.label_id = None  #  The label associated with the dVRS. This is a read only attribute - long
        self.maintenance_mode = None  #  maintenanceMode is an enum that indicates if the Domain is accepting VM activation requests. Possible values are DISABLED, ENABLED and ENABLED_INHERITED - int
        self.associated_multicast_channel_map_id = None  #  The ID of the Multi Cast Channel Map  this domain is associated with. This has to be set when  enableMultiCast is set to ENABLED - int
        self.name = None  #  The name of the domain. Valid characters are  alphabets, numbers, space and hyphen( - ). - int
        self.pat_enabled = None  #  Indicates whether PAT is enabled for the subnets in this domain - ENABLED/DISABLED - int
        self.route_distinguisher = None  #  Route distinguisher associated with the dVRS. It is an optional parameter that can be provided by the user or auto-managed by VSD. System generates this identifier automatically, if not provided - int
        self.route_target = None  #  Route target associated with the dVRS. It is an optional parameterthat can be provided by the user or auto-managed by VSDSystem generates this identifier automatically, if not provided - int
        self.service_id = None  #  The serviceID of the Virtual Router created in VSC and is associated with this object. This is auto-generated by VSD - long
        
        self.expose_attribute(local_name=u"application_deployment_policy", remote_name=u"applicationDeploymentPolicy", attribute_type=int)
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=int)
        self.expose_attribute(local_name=u"back_haul_route_distinguisher", remote_name=u"backHaulRouteDistinguisher", attribute_type=int)
        self.expose_attribute(local_name=u"back_haul_route_target", remote_name=u"backHaulRouteTarget", attribute_type=int)
        self.expose_attribute(local_name=u"back_haul_vnid", remote_name=u"backHaulVNID", attribute_type=long)
        self.expose_attribute(local_name=u"customer_id", remote_name=u"customerID", attribute_type=long)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"dhcp_behavior", remote_name=u"DHCPBehavior", attribute_type=int)
        self.expose_attribute(local_name=u"dhcp_server_address", remote_name=u"DHCPServerAddress", attribute_type=int)
        self.expose_attribute(local_name=u"tunnel_type", remote_name=u"tunnelType", attribute_type=int)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=int)
        self.expose_attribute(local_name=u"label_id", remote_name=u"labelID", attribute_type=long)
        self.expose_attribute(local_name=u"maintenance_mode", remote_name=u"maintenanceMode", attribute_type=int)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        self.expose_attribute(local_name=u"pat_enabled", remote_name=u"patEnabled", attribute_type=int)
        self.expose_attribute(local_name=u"route_distinguisher", remote_name=u"routeDistinguisher", attribute_type=int)
        self.expose_attribute(local_name=u"route_target", remote_name=u"routeTarget", attribute_type=int)
        self.expose_attribute(local_name=u"service_id", remote_name=u"serviceID", attribute_type=long)
        
        # Fetchers
        self.bridge_interfaces = []
        self.bridge_interfaces_fetcher = NUBridgeInterfacesFetcher.fetcher_with_object(nurest_object=self, local_name=u"bridge_interfaces")
        self.egress_acl_templates = []
        self.egress_acl_templates_fetcher = NUEgressACLTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"egress_acl_templates")
        self.v_ports = []
        self.v_ports_fetcher = NUVPortsFetcher.fetcher_with_object(nurest_object=self, local_name=u"v_ports")
        self.statisticss = []
        self.statisticss_fetcher = NUStatisticssFetcher.fetcher_with_object(nurest_object=self, local_name=u"statisticss")
        self.dhcp_options = []
        self.dhcp_options_fetcher = NUDHCPOptionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"dhcp_options")
        self.host_interfaces = []
        self.host_interfaces_fetcher = NUHostInterfacesFetcher.fetcher_with_object(nurest_object=self, local_name=u"host_interfaces")
        self.vm_interfaces = []
        self.vm_interfaces_fetcher = NUVMInterfacesFetcher.fetcher_with_object(nurest_object=self, local_name=u"vm_interfaces")
        self.permitted_actions = []
        self.permitted_actions_fetcher = NUPermittedActionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"permitted_actions")
        self.redirection_targets = []
        self.redirection_targets_fetcher = NURedirectionTargetsFetcher.fetcher_with_object(nurest_object=self, local_name=u"redirection_targets")
        self.policy_groups = []
        self.policy_groups_fetcher = NUPolicyGroupsFetcher.fetcher_with_object(nurest_object=self, local_name=u"policy_groups")
        self.statistics_policies = []
        self.statistics_policies_fetcher = NUStatisticsPoliciesFetcher.fetcher_with_object(nurest_object=self, local_name=u"statistics_policies")
        self.virtual_machines = []
        self.virtual_machines_fetcher = NUVirtualMachinesFetcher.fetcher_with_object(nurest_object=self, local_name=u"virtual_machines")
        self.static_routes = []
        self.static_routes_fetcher = NUStaticRoutesFetcher.fetcher_with_object(nurest_object=self, local_name=u"static_routes")
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_object(nurest_object=self, local_name=u"groups")
        self.ingress_acl_templates = []
        self.ingress_acl_templates_fetcher = NUIngressACLTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"ingress_acl_templates")
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_object(nurest_object=self, local_name=u"jobs")
        self.ingress_advanced_forwarding_templates = []
        self.ingress_advanced_forwarding_templates_fetcher = NUIngressAdvancedForwardingTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"ingress_advanced_forwarding_templates")
        self.sub_networks = []
        self.sub_networks_fetcher = NUSubNetworksFetcher.fetcher_with_object(nurest_object=self, local_name=u"sub_networks")
        self.qos_primitives = []
        self.qos_primitives_fetcher = NUQosPrimitivesFetcher.fetcher_with_object(nurest_object=self, local_name=u"qos_primitives")
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_object(nurest_object=self, local_name=u"tcas")
        self.zones = []
        self.zones_fetcher = NUZonesFetcher.fetcher_with_object(nurest_object=self, local_name=u"zones")
        self.vpn_connects = []
        self.vpn_connects_fetcher = NUVPNConnectsFetcher.fetcher_with_object(nurest_object=self, local_name=u"vpn_connects")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.floating_ips = []
        self.floating_ips_fetcher = NUFloatingIpsFetcher.fetcher_with_object(nurest_object=self, local_name=u"floating_ips")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"domain"


