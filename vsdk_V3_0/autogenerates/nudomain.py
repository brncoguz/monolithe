# -*- coding: utf-8 -*-

"""
NUDomain
This object is used to manipulate domain state. A domain corresponds to a distributed Virtual Router and Switch (dVRS)

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUEgressACLTemplatesFetcher
from ..fetchers import NUIngressACLTemplatesFetcher
from ..fetchers import NUVPNConnectsFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUStatisticssFetcher
from ..fetchers import NUZonesFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUTCAsFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUGroupsFetcher
from ..fetchers import NUVMInterfacesFetcher
from ..fetchers import NUHostInterfacesFetcher
from ..fetchers import NUStaticRoutesFetcher
from ..fetchers import NUStatisticsPoliciesFetcher
from ..fetchers import NUPolicyGroupsFetcher
from ..fetchers import NUFloatingIpsFetcher
from ..fetchers import NUIngressAdvancedForwardingTemplatesFetcher
from ..fetchers import NUBridgeInterfacesFetcher
from ..fetchers import NURedirectionTargetsFetcher
from ..fetchers import NUSubNetworksFetcher
from ..fetchers import NUDHCPOptionsFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUQosPrimitivesFetcher
from bambou import NURESTObject


class NUDomain(NURESTObject):
    """ Represents a Domain object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a Domain instance

        """
        super(NUDomain, self).__init__()

        # Read/Write Attributes
        
        self._back_haul_vnid = str()
        self._pat_enabled = str()
        self._back_haul_route_target = str()
        self._tunnel_type = str()
        self._dhcp_server_address = str()
        self._label_id = str()
        self._associated_multicast_channel_map_id = str()
        self._description = str()
        self._dhcp_behavior = str()
        self._application_deployment_policy = str()
        self._name = str()
        self._route_distinguisher = str()
        self._service_id = str()
        self._multicast = str()
        self._back_haul_route_distinguisher = str()
        self._template_id = str()
        self._route_target = str()
        self._customer_id = str()
        self._maintenance_mode = str()
        
        self.expose_attribute(local_name=u"back_haul_vnid", remote_name=u"backHaulVNID", attribute_type=str)
        self.expose_attribute(local_name=u"pat_enabled", remote_name=u"patEnabled", attribute_type=str, choices=[u'ENABLED', u'INHERITED', u'DISABLED'])
        self.expose_attribute(local_name=u"back_haul_route_target", remote_name=u"backHaulRouteTarget", attribute_type=str)
        self.expose_attribute(local_name=u"tunnel_type", remote_name=u"tunnelType", attribute_type=str, choices=[u'DC_DEFAULT', u'VXLAN', u'GRE'])
        self.expose_attribute(local_name=u"dhcp_server_address", remote_name=u"DHCPServerAddress", attribute_type=str)
        self.expose_attribute(local_name=u"label_id", remote_name=u"labelID", attribute_type=str)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"dhcp_behavior", remote_name=u"DHCPBehavior", attribute_type=str, choices=[u'CONSUME', u'FLOOD', u'RELAY'])
        self.expose_attribute(local_name=u"application_deployment_policy", remote_name=u"applicationDeploymentPolicy", attribute_type=str, choices=[u'ZONE', u'NONE'])
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"route_distinguisher", remote_name=u"routeDistinguisher", attribute_type=str)
        self.expose_attribute(local_name=u"service_id", remote_name=u"serviceID", attribute_type=str)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=str, choices=[u'ENABLED', u'INHERITED', u'DISABLED'])
        self.expose_attribute(local_name=u"back_haul_route_distinguisher", remote_name=u"backHaulRouteDistinguisher", attribute_type=str)
        self.expose_attribute(local_name=u"template_id", remote_name=u"templateID", attribute_type=str)
        self.expose_attribute(local_name=u"route_target", remote_name=u"routeTarget", attribute_type=str)
        self.expose_attribute(local_name=u"customer_id", remote_name=u"customerID", attribute_type=str)
        self.expose_attribute(local_name=u"maintenance_mode", remote_name=u"maintenanceMode", attribute_type=str, choices=[u'ENABLED', u'ENABLED_INHERITED', u'DISABLED'])
        
        # Fetchers
        
        self.egressacltemplates = []
        self.egressacltemplates_fetcher = NUEgressACLTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"egressacltemplates")
        
        self.ingressacltemplates = []
        self.ingressacltemplates_fetcher = NUIngressACLTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"ingressacltemplates")
        
        self.vpnconnections = []
        self.vpnconnections_fetcher = NUVPNConnectsFetcher.fetcher_with_entity(entity=self, local_name=u"vpnconnections")
        
        self.vms = []
        self.vms_fetcher = NUVirtualMachinesFetcher.fetcher_with_entity(entity=self, local_name=u"vms")
        
        self.statistics = []
        self.statistics_fetcher = NUStatisticssFetcher.fetcher_with_entity(entity=self, local_name=u"statistics")
        
        self.zones = []
        self.zones_fetcher = NUZonesFetcher.fetcher_with_entity(entity=self, local_name=u"zones")
        
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_entity(entity=self, local_name=u"jobs")
        
        self.tcas = []
        self.tcas_fetcher = NUTCAsFetcher.fetcher_with_entity(entity=self, local_name=u"tcas")
        
        self.vports = []
        self.vports_fetcher = NUVPortsFetcher.fetcher_with_entity(entity=self, local_name=u"vports")
        
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"groups")
        
        self.vminterfaces = []
        self.vminterfaces_fetcher = NUVMInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"vminterfaces")
        
        self.hostinterfaces = []
        self.hostinterfaces_fetcher = NUHostInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"hostinterfaces")
        
        self.staticroutes = []
        self.staticroutes_fetcher = NUStaticRoutesFetcher.fetcher_with_entity(entity=self, local_name=u"staticroutes")
        
        self.statisticspolicies = []
        self.statisticspolicies_fetcher = NUStatisticsPoliciesFetcher.fetcher_with_entity(entity=self, local_name=u"statisticspolicies")
        
        self.policygroups = []
        self.policygroups_fetcher = NUPolicyGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"policygroups")
        
        self.floatingips = []
        self.floatingips_fetcher = NUFloatingIpsFetcher.fetcher_with_entity(entity=self, local_name=u"floatingips")
        
        self.ingressadvfwdtemplates = []
        self.ingressadvfwdtemplates_fetcher = NUIngressAdvancedForwardingTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"ingressadvfwdtemplates")
        
        self.bridgeinterfaces = []
        self.bridgeinterfaces_fetcher = NUBridgeInterfacesFetcher.fetcher_with_entity(entity=self, local_name=u"bridgeinterfaces")
        
        self.redirectiontargets = []
        self.redirectiontargets_fetcher = NURedirectionTargetsFetcher.fetcher_with_entity(entity=self, local_name=u"redirectiontargets")
        
        self.subnets = []
        self.subnets_fetcher = NUSubNetworksFetcher.fetcher_with_entity(entity=self, local_name=u"subnets")
        
        self.dhcpoptions = []
        self.dhcpoptions_fetcher = NUDHCPOptionsFetcher.fetcher_with_entity(entity=self, local_name=u"dhcpoptions")
        
        self.permissions = []
        self.permissions_fetcher = NUPermittedActionsFetcher.fetcher_with_entity(entity=self, local_name=u"permissions")
        
        self.qos = []
        self.qos_fetcher = NUQosPrimitivesFetcher.fetcher_with_entity(entity=self, local_name=u"qos")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_back_haul_vnid(self):
        """ Get attribute back_haul_vnid

            Current BackHaul Network's  globally unique  VXLAN network identifier generated by VSD

        """
        return self._back_haul_vnid

    def _set_back_haul_vnid(self, value):
        """ Set attribute back_haul_vnid

            Current BackHaul Network's  globally unique  VXLAN network identifier generated by VSD

        """
        self._back_haul_vnid = value

    back_haul_vnid = property(_get_back_haul_vnid, _set_back_haul_vnid)
    
    def _get_pat_enabled(self):
        """ Get attribute pat_enabled

            Indicates whether PAT is enabled for the subnets in this domain - ENABLED/DISABLED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        return self._pat_enabled

    def _set_pat_enabled(self, value):
        """ Set attribute pat_enabled

            Indicates whether PAT is enabled for the subnets in this domain - ENABLED/DISABLED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        self._pat_enabled = value

    pat_enabled = property(_get_pat_enabled, _set_pat_enabled)
    
    def _get_back_haul_route_target(self):
        """ Get attribute back_haul_route_target

            Route target associated with the BackHaul Service in dVRS. It is an Read-Only parameter that cannot be provided by the user. System generates this identifier automatically

        """
        return self._back_haul_route_target

    def _set_back_haul_route_target(self, value):
        """ Set attribute back_haul_route_target

            Route target associated with the BackHaul Service in dVRS. It is an Read-Only parameter that cannot be provided by the user. System generates this identifier automatically

        """
        self._back_haul_route_target = value

    back_haul_route_target = property(_get_back_haul_route_target, _set_back_haul_route_target)
    
    def _get_tunnel_type(self):
        """ Get attribute tunnel_type

            Default Domain Tunnel Type .Possible values are VXLAN,GRE Possible values are DC_DEFAULT, GRE, VXLAN, .

        """
        return self._tunnel_type

    def _set_tunnel_type(self, value):
        """ Set attribute tunnel_type

            Default Domain Tunnel Type .Possible values are VXLAN,GRE Possible values are DC_DEFAULT, GRE, VXLAN, .

        """
        self._tunnel_type = value

    tunnel_type = property(_get_tunnel_type, _set_tunnel_type)
    
    def _get_dhcp_server_address(self):
        """ Get attribute dhcp_server_address

            when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set

        """
        return self._dhcp_server_address

    def _set_dhcp_server_address(self, value):
        """ Set attribute dhcp_server_address

            when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set

        """
        self._dhcp_server_address = value

    dhcp_server_address = property(_get_dhcp_server_address, _set_dhcp_server_address)
    
    def _get_label_id(self):
        """ Get attribute label_id

            The label associated with the dVRS. This is a read only attribute

        """
        return self._label_id

    def _set_label_id(self, value):
        """ Set attribute label_id

            The label associated with the dVRS. This is a read only attribute

        """
        self._label_id = value

    label_id = property(_get_label_id, _set_label_id)
    
    def _get_associated_multicast_channel_map_id(self):
        """ Get attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this domain is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        return self._associated_multicast_channel_map_id

    def _set_associated_multicast_channel_map_id(self, value):
        """ Set attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this domain is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        self._associated_multicast_channel_map_id = value

    associated_multicast_channel_map_id = property(_get_associated_multicast_channel_map_id, _set_associated_multicast_channel_map_id)
    
    def _get_description(self):
        """ Get attribute description

            A description string of the domain that is provided by the user

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description string of the domain that is provided by the user

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_dhcp_behavior(self):
        """ Get attribute dhcp_behavior

            DHCPBehaviorType is an enum that indicates DHCP Behavior of VRS having VM's under this domain. Possible values are FLOOD, CONSUME ,RELAY Possible values are CONSUME, FLOOD, RELAY, .

        """
        return self._dhcp_behavior

    def _set_dhcp_behavior(self, value):
        """ Set attribute dhcp_behavior

            DHCPBehaviorType is an enum that indicates DHCP Behavior of VRS having VM's under this domain. Possible values are FLOOD, CONSUME ,RELAY Possible values are CONSUME, FLOOD, RELAY, .

        """
        self._dhcp_behavior = value

    dhcp_behavior = property(_get_dhcp_behavior, _set_dhcp_behavior)
    
    def _get_application_deployment_policy(self):
        """ Get attribute application_deployment_policy

            Application deployment policy. Possible values are NONE, ZONE, .

        """
        return self._application_deployment_policy

    def _set_application_deployment_policy(self, value):
        """ Set attribute application_deployment_policy

            Application deployment policy. Possible values are NONE, ZONE, .

        """
        self._application_deployment_policy = value

    application_deployment_policy = property(_get_application_deployment_policy, _set_application_deployment_policy)
    
    def _get_name(self):
        """ Get attribute name

            The name of the domain. Valid characters are  alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            The name of the domain. Valid characters are  alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_route_distinguisher(self):
        """ Get attribute route_distinguisher

            Route distinguisher associated with the dVRS. It is an optional parameter that can be provided by the user or auto-managed by VSD. System generates this identifier automatically, if not provided

        """
        return self._route_distinguisher

    def _set_route_distinguisher(self, value):
        """ Set attribute route_distinguisher

            Route distinguisher associated with the dVRS. It is an optional parameter that can be provided by the user or auto-managed by VSD. System generates this identifier automatically, if not provided

        """
        self._route_distinguisher = value

    route_distinguisher = property(_get_route_distinguisher, _set_route_distinguisher)
    
    def _get_service_id(self):
        """ Get attribute service_id

            The serviceID of the Virtual Router created in VSC and is associated with this object. This is auto-generated by VSD

        """
        return self._service_id

    def _set_service_id(self, value):
        """ Set attribute service_id

            The serviceID of the Virtual Router created in VSC and is associated with this object. This is auto-generated by VSD

        """
        self._service_id = value

    service_id = property(_get_service_id, _set_service_id)
    
    def _get_multicast(self):
        """ Get attribute multicast

            multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        return self._multicast

    def _set_multicast(self, value):
        """ Set attribute multicast

            multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        self._multicast = value

    multicast = property(_get_multicast, _set_multicast)
    
    def _get_back_haul_route_distinguisher(self):
        """ Get attribute back_haul_route_distinguisher

            Route distinguisher associated with the BackHaul Service in dVRS. It is an Read-Only parameter that cannot be provided by the user. System generates this identifier automatically

        """
        return self._back_haul_route_distinguisher

    def _set_back_haul_route_distinguisher(self, value):
        """ Set attribute back_haul_route_distinguisher

            Route distinguisher associated with the BackHaul Service in dVRS. It is an Read-Only parameter that cannot be provided by the user. System generates this identifier automatically

        """
        self._back_haul_route_distinguisher = value

    back_haul_route_distinguisher = property(_get_back_haul_route_distinguisher, _set_back_haul_route_distinguisher)
    
    def _get_template_id(self):
        """ Get attribute template_id

            The ID of the template that this domain was created from. This should be set when instantiating a domain

        """
        return self._template_id

    def _set_template_id(self, value):
        """ Set attribute template_id

            The ID of the template that this domain was created from. This should be set when instantiating a domain

        """
        self._template_id = value

    template_id = property(_get_template_id, _set_template_id)
    
    def _get_route_target(self):
        """ Get attribute route_target

            Route target associated with the dVRS. It is an optional parameterthat can be provided by the user or auto-managed by VSDSystem generates this identifier automatically, if not provided

        """
        return self._route_target

    def _set_route_target(self, value):
        """ Set attribute route_target

            Route target associated with the dVRS. It is an optional parameterthat can be provided by the user or auto-managed by VSDSystem generates this identifier automatically, if not provided

        """
        self._route_target = value

    route_target = property(_get_route_target, _set_route_target)
    
    def _get_customer_id(self):
        """ Get attribute customer_id

            The customerID that is created in the VSC and identifies this dVRS. This is auto-generated by VSD

        """
        return self._customer_id

    def _set_customer_id(self, value):
        """ Set attribute customer_id

            The customerID that is created in the VSC and identifies this dVRS. This is auto-generated by VSD

        """
        self._customer_id = value

    customer_id = property(_get_customer_id, _set_customer_id)
    
    def _get_maintenance_mode(self):
        """ Get attribute maintenance_mode

            maintenanceMode is an enum that indicates if the Domain is accepting VM activation requests. Possible values are DISABLED, ENABLED and ENABLED_INHERITED Possible values are DISABLED, ENABLED, ENABLED_INHERITED, .

        """
        return self._maintenance_mode

    def _set_maintenance_mode(self, value):
        """ Set attribute maintenance_mode

            maintenanceMode is an enum that indicates if the Domain is accepting VM activation requests. Possible values are DISABLED, ENABLED and ENABLED_INHERITED Possible values are DISABLED, ENABLED, ENABLED_INHERITED, .

        """
        self._maintenance_mode = value

    maintenance_mode = property(_get_maintenance_mode, _set_maintenance_mode)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"domain"
