# -*- coding: utf-8 -*-
"""

NUVPortMirror
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject



class NUVPortMirror(NURESTObject):
    """ Represents a VPortMirror object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUVPortMirror instance """

        super(NUVPortMirror, self).__init__()

        # Read/Write Attributes
        self.attached_network_type = None  #  Type of the network attached - L2/L3 - int
        self.domain_name = None  #  Domain name of the vport associated with the mirror destination - int
        self.enterpise_name = None  #  Enterprise to which the vport associated with the mirror destination belongs to. - int
        self.mirror_destination_id = None  #  Destination ID of the mirror destination object. - int
        self.mirror_destination_name = None  #  Name of the mirror destination - int
        self.mirror_direction = None  #  Describes what type of traffic needs to be mirrors - ingress/egress/both - int
        self.network_name = None  #  Name of the network to which the vport belongs to - int
        self.vport_id = None  #  Id of the vport to which the mirror destination is associated with. - int
        self.v_port_name = None  #  Name of the vport to which the mirror destination is associated with. - int
        
        self.expose_attribute(local_name=u"attached_network_type", remote_name=u"attachedNetworkType", attribute_type=int)
        self.expose_attribute(local_name=u"domain_name", remote_name=u"domainName", attribute_type=int)
        self.expose_attribute(local_name=u"enterpise_name", remote_name=u"enterpiseName", attribute_type=int)
        self.expose_attribute(local_name=u"mirror_destination_id", remote_name=u"mirrorDestinationID", attribute_type=int)
        self.expose_attribute(local_name=u"mirror_destination_name", remote_name=u"mirrorDestinationName", attribute_type=int)
        self.expose_attribute(local_name=u"mirror_direction", remote_name=u"mirrorDirection", attribute_type=int)
        self.expose_attribute(local_name=u"network_name", remote_name=u"networkName", attribute_type=int)
        self.expose_attribute(local_name=u"vport_id", remote_name=u"vportId", attribute_type=int)
        self.expose_attribute(local_name=u"v_port_name", remote_name=u"VPortName", attribute_type=int)
        
        # Fetchers
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"vportmirror"


