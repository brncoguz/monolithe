# -*- coding: utf-8 -*-

"""
NUVSDComponent
System Monitoring details for components of VSD system

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject


class NUVSDComponent(NURESTObject):
    """ Represents a VSDComponent object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a VSDComponent instance

        """
        super(NUVSDComponent, self).__init__()

        # Read/Write Attributes
        
        self._status = str()
        self._description = str()
        self._management_ip = str()
        self._name = str()
        self._location = str()
        self._address = str()
        self._type = str()
        self._product_version = str()
        
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, choices=[u'DEGRADED', u'DOWN', u'UP', u'ADMIN_DOWN'])
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"management_ip", remote_name=u"managementIP", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"location", remote_name=u"location", attribute_type=str)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        self.expose_attribute(local_name=u"type", remote_name=u"type", attribute_type=str, choices=[u'STATSCOLLECTOR', u'EJABBERD', u'PERCONA', u'MEDIATOR', u'STATSSERVER', u'TCA', u'JBOSS'])
        self.expose_attribute(local_name=u"product_version", remote_name=u"productVersion", attribute_type=str)
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_status(self):
        """ Get attribute status

            Current status of the entity. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        return self._status

    def _set_status(self, value):
        """ Set attribute status

            Current status of the entity. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_description(self):
        """ Get attribute description

            Description of the entity.

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of the entity.

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_management_ip(self):
        """ Get attribute management_ip

            An optional management IP to log into this component.

        """
        return self._management_ip

    def _set_management_ip(self, value):
        """ Set attribute management_ip

            An optional management IP to log into this component.

        """
        self._management_ip = value

    management_ip = property(_get_management_ip, _set_management_ip)
    
    def _get_name(self):
        """ Get attribute name

            Identifies the entity with a name.

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Identifies the entity with a name.

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_location(self):
        """ Get attribute location

            Identifies the entity to be associated with a location.

        """
        return self._location

    def _set_location(self, value):
        """ Set attribute location

            Identifies the entity to be associated with a location.

        """
        self._location = value

    location = property(_get_location, _set_location)
    
    def _get_address(self):
        """ Get attribute address

            An optional IP to access this component.

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            An optional IP to access this component.

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_type(self):
        """ Get attribute type

            Type of the component Possible values are JBOSS, MEDIATOR, PERCONA, EJABBERD, TCA, STATSCOLLECTOR, STATSSERVER, .

        """
        return self._type

    def _set_type(self, value):
        """ Set attribute type

            Type of the component Possible values are JBOSS, MEDIATOR, PERCONA, EJABBERD, TCA, STATSCOLLECTOR, STATSSERVER, .

        """
        self._type = value

    type = property(_get_type, _set_type)
    
    def _get_product_version(self):
        """ Get attribute product_version

            Product version supported by this entity.

        """
        return self._product_version

    def _set_product_version(self, value):
        """ Set attribute product_version

            Product version supported by this entity.

        """
        self._product_version = value

    product_version = property(_get_product_version, _set_product_version)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"component"
