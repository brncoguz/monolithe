# -*- coding: utf-8 -*-
"""

NUDomainTemplate
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUEgressACLTemplatesFetcher
from ..fetchers import NUPolicyGroupTemplatesFetcher
from ..fetchers import NUDomainsFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUGroupsFetcher
from ..fetchers import NUIngressACLTemplatesFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUIngressAdvancedForwardingTemplatesFetcher
from ..fetchers import NUZoneTemplatesFetcher
from ..fetchers import NUQosPrimitivesFetcher
from ..fetchers import NUSubNetworkTemplatesFetcher
from ..fetchers import NURedirectionTargetTemplatesFetcher
from ..fetchers import NUEventLogsFetcher


class NUDomainTemplate(NURESTObject):
    """ Represents a DomainTemplate object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUDomainTemplate instance """

        super(NUDomainTemplate, self).__init__()

        # Read/Write Attributes
        self.description = None  #  Domain template description provided by the user - int
        self.multicast = None  #  multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED - int
        self.associated_multicast_channel_map_id = None  #  The ID of the Multi Cast Channel Map  this domain template is associated with. This has to be set when  enableMultiCast is set to ENABLED - int
        self.name = None  #  The name of the domain template, that is unique within an enterprise. Valid characters are alphabets, numbers, space and hyphen( - ). - int
        
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=int)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=int)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=int)
        
        # Fetchers
        self.egress_acl_templates = []
        self.egress_acl_templates_fetcher = NUEgressACLTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"egress_acl_templates")
        self.policy_group_templates = []
        self.policy_group_templates_fetcher = NUPolicyGroupTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"policy_group_templates")
        self.domains = []
        self.domains_fetcher = NUDomainsFetcher.fetcher_with_object(nurest_object=self, local_name=u"domains")
        self.permitted_actions = []
        self.permitted_actions_fetcher = NUPermittedActionsFetcher.fetcher_with_object(nurest_object=self, local_name=u"permitted_actions")
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_object(nurest_object=self, local_name=u"groups")
        self.ingress_acl_templates = []
        self.ingress_acl_templates_fetcher = NUIngressACLTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"ingress_acl_templates")
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_object(nurest_object=self, local_name=u"jobs")
        self.ingress_advanced_forwarding_templates = []
        self.ingress_advanced_forwarding_templates_fetcher = NUIngressAdvancedForwardingTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"ingress_advanced_forwarding_templates")
        self.zone_templates = []
        self.zone_templates_fetcher = NUZoneTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"zone_templates")
        self.qos_primitives = []
        self.qos_primitives_fetcher = NUQosPrimitivesFetcher.fetcher_with_object(nurest_object=self, local_name=u"qos_primitives")
        self.sub_network_templates = []
        self.sub_network_templates_fetcher = NUSubNetworkTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"sub_network_templates")
        self.redirection_target_templates = []
        self.redirection_target_templates_fetcher = NURedirectionTargetTemplatesFetcher.fetcher_with_object(nurest_object=self, local_name=u"redirection_target_templates")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"domaintemplate"


