# -*- coding: utf-8 -*-

"""
NUDomainTemplate
Domains in VSD are created from domain templates. This object provides the definition of the DomainTemplate

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUEgressACLTemplatesFetcher
from ..fetchers import NUIngressACLTemplatesFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUSubNetworkTemplatesFetcher
from ..fetchers import NUDomainsFetcher
from ..fetchers import NUPolicyGroupTemplatesFetcher
from ..fetchers import NUGroupsFetcher
from ..fetchers import NUZoneTemplatesFetcher
from ..fetchers import NUIngressAdvancedForwardingTemplatesFetcher
from ..fetchers import NURedirectionTargetTemplatesFetcher
from ..fetchers import NUPermittedActionsFetcher
from ..fetchers import NUQosPrimitivesFetcher
from bambou import NURESTObject


class NUDomainTemplate(NURESTObject):
    """ Represents a DomainTemplate object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a DomainTemplate instance

        """
        super(NUDomainTemplate, self).__init__()

        # Read/Write Attributes
        
        self._associated_multicast_channel_map_id = str()
        self._multicast = str()
        self._description = str()
        self._name = str()
        
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=str)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=str, choices=[u'ENABLED', u'INHERITED', u'DISABLED'])
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.egressacltemplates = []
        self.egressacltemplates_fetcher = NUEgressACLTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"egressacltemplates")
        
        self.ingressacltemplates = []
        self.ingressacltemplates_fetcher = NUIngressACLTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"ingressacltemplates")
        
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_entity(entity=self, local_name=u"jobs")
        
        self.subnettemplates = []
        self.subnettemplates_fetcher = NUSubNetworkTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"subnettemplates")
        
        self.domains = []
        self.domains_fetcher = NUDomainsFetcher.fetcher_with_entity(entity=self, local_name=u"domains")
        
        self.policygrouptemplates = []
        self.policygrouptemplates_fetcher = NUPolicyGroupTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"policygrouptemplates")
        
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"groups")
        
        self.zonetemplates = []
        self.zonetemplates_fetcher = NUZoneTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"zonetemplates")
        
        self.ingressadvfwdtemplates = []
        self.ingressadvfwdtemplates_fetcher = NUIngressAdvancedForwardingTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"ingressadvfwdtemplates")
        
        self.redirectiontargettemplates = []
        self.redirectiontargettemplates_fetcher = NURedirectionTargetTemplatesFetcher.fetcher_with_entity(entity=self, local_name=u"redirectiontargettemplates")
        
        self.permissions = []
        self.permissions_fetcher = NUPermittedActionsFetcher.fetcher_with_entity(entity=self, local_name=u"permissions")
        
        self.qos = []
        self.qos_fetcher = NUQosPrimitivesFetcher.fetcher_with_entity(entity=self, local_name=u"qos")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_associated_multicast_channel_map_id(self):
        """ Get attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this domain template is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        return self._associated_multicast_channel_map_id

    def _set_associated_multicast_channel_map_id(self, value):
        """ Set attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this domain template is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        self._associated_multicast_channel_map_id = value

    associated_multicast_channel_map_id = property(_get_associated_multicast_channel_map_id, _set_associated_multicast_channel_map_id)
    
    def _get_multicast(self):
        """ Get attribute multicast

            multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        return self._multicast

    def _set_multicast(self, value):
        """ Set attribute multicast

            multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        self._multicast = value

    multicast = property(_get_multicast, _set_multicast)
    
    def _get_description(self):
        """ Get attribute description

            Domain template description provided by the user

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Domain template description provided by the user

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_name(self):
        """ Get attribute name

            The name of the domain template, that is unique within an enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            The name of the domain template, that is unique within an enterprise. Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"domaintemplate"
