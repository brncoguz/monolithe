# -*- coding: utf-8 -*-

"""
NUSubNetworkTemplate
As domain and zone objects, subnet objects are created in VSD as derived by templates. This object describes the subnet template

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUAddressRangesFetcher
from ..fetchers import NUSubNetworksFetcher
from ..fetchers import NUQosPrimitivesFetcher
from bambou import NURESTObject


class NUSubNetworkTemplate(NURESTObject):
    """ Represents a SubNetworkTemplate object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a SubNetworkTemplate instance

        """
        super(NUSubNetworkTemplate, self).__init__()

        # Read/Write Attributes
        
        self._ip_type = str()
        self._description = str()
        self._associated_multicast_channel_map_id = str()
        self._netmask = str()
        self._multicast = str()
        self._address = str()
        self._proxy_arp = bool()
        self._split_subnet = bool()
        self._gateway = str()
        self._name = str()
        
        self.expose_attribute(local_name=u"ip_type", remote_name=u"IPType", attribute_type=str, choices=[u'IPV6', u'IPV4'])
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"associated_multicast_channel_map_id", remote_name=u"associatedMulticastChannelMapID", attribute_type=str)
        self.expose_attribute(local_name=u"netmask", remote_name=u"netmask", attribute_type=str)
        self.expose_attribute(local_name=u"multicast", remote_name=u"multicast", attribute_type=str, choices=[u'ENABLED', u'INHERITED', u'DISABLED'])
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        self.expose_attribute(local_name=u"proxy_arp", remote_name=u"proxyARP", attribute_type=bool)
        self.expose_attribute(local_name=u"split_subnet", remote_name=u"splitSubnet", attribute_type=bool)
        self.expose_attribute(local_name=u"gateway", remote_name=u"gateway", attribute_type=str)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        
        # Fetchers
        
        self.addressranges = []
        self.addressranges_fetcher = NUAddressRangesFetcher.fetcher_with_entity(entity=self, local_name=u"addressranges")
        
        self.subnets = []
        self.subnets_fetcher = NUSubNetworksFetcher.fetcher_with_entity(entity=self, local_name=u"subnets")
        
        self.qos = []
        self.qos_fetcher = NUQosPrimitivesFetcher.fetcher_with_entity(entity=self, local_name=u"qos")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_ip_type(self):
        """ Get attribute ip_type

            IPv4 or IPv6(only IPv4 is supported in R1.0) Possible values are IPV4, IPV6, .

        """
        return self._ip_type

    def _set_ip_type(self, value):
        """ Set attribute ip_type

            IPv4 or IPv6(only IPv4 is supported in R1.0) Possible values are IPV4, IPV6, .

        """
        self._ip_type = value

    ip_type = property(_get_ip_type, _set_ip_type)
    
    def _get_description(self):
        """ Get attribute description

            A description field provided by the user that identifies the subnet

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            A description field provided by the user that identifies the subnet

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_associated_multicast_channel_map_id(self):
        """ Get attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this Subnet/Subnet Template is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        return self._associated_multicast_channel_map_id

    def _set_associated_multicast_channel_map_id(self, value):
        """ Set attribute associated_multicast_channel_map_id

            The ID of the Multi Cast Channel Map  this Subnet/Subnet Template is associated with. This has to be set when  enableMultiCast is set to ENABLED

        """
        self._associated_multicast_channel_map_id = value

    associated_multicast_channel_map_id = property(_get_associated_multicast_channel_map_id, _set_associated_multicast_channel_map_id)
    
    def _get_netmask(self):
        """ Get attribute netmask

            Netmask of the subnet defined

        """
        return self._netmask

    def _set_netmask(self, value):
        """ Set attribute netmask

            Netmask of the subnet defined

        """
        self._netmask = value

    netmask = property(_get_netmask, _set_netmask)
    
    def _get_multicast(self):
        """ Get attribute multicast

            multicast is enum that indicates multicast policy on Subnet/Subnet Template. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        return self._multicast

    def _set_multicast(self, value):
        """ Set attribute multicast

            multicast is enum that indicates multicast policy on Subnet/Subnet Template. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

        """
        self._multicast = value

    multicast = property(_get_multicast, _set_multicast)
    
    def _get_address(self):
        """ Get attribute address

            IP address of the subnet defined. In case of zone, this is an optional field for and allows users to allocate an IP address range to a zone. The VSD will auto-assign IP addresses to subnets from this range if a specific IP address is not defined for the subnet

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            IP address of the subnet defined. In case of zone, this is an optional field for and allows users to allocate an IP address range to a zone. The VSD will auto-assign IP addresses to subnets from this range if a specific IP address is not defined for the subnet

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_proxy_arp(self):
        """ Get attribute proxy_arp

             when set VRS will act as  ARP Proxy

        """
        return self._proxy_arp

    def _set_proxy_arp(self, value):
        """ Set attribute proxy_arp

             when set VRS will act as  ARP Proxy

        """
        self._proxy_arp = value

    proxy_arp = property(_get_proxy_arp, _set_proxy_arp)
    
    def _get_split_subnet(self):
        """ Get attribute split_subnet

            Need to add correct description

        """
        return self._split_subnet

    def _set_split_subnet(self, value):
        """ Set attribute split_subnet

            Need to add correct description

        """
        self._split_subnet = value

    split_subnet = property(_get_split_subnet, _set_split_subnet)
    
    def _get_gateway(self):
        """ Get attribute gateway

            The IP address of the gateway of this subnet

        """
        return self._gateway

    def _set_gateway(self, value):
        """ Set attribute gateway

            The IP address of the gateway of this subnet

        """
        self._gateway = value

    gateway = property(_get_gateway, _set_gateway)
    
    def _get_name(self):
        """ Get attribute name

            Name of the current entity(Zone or zone template or subnet etc..) Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Name of the current entity(Zone or zone template or subnet etc..) Valid characters are alphabets, numbers, space and hyphen( - ).

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"subnettemplate"
