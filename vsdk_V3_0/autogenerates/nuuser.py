# -*- coding: utf-8 -*-
"""

NUUser
This file has been autogenerated by Swagger  and should not be modified.

Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from bambou import NURESTObject

from ..fetchers import NUApplicationsFetcher
from ..fetchers import NUEventLogsFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUGroupsFetcher


class NUUser(NURESTObject):
    """ Represents a User object in Nuage VSD solution
        IMPORTANT: Do not override this object.
    """

    def __init__(self, **kwargs):
        """ Initialize a NUUser instance """

        super(NUUser, self).__init__()

        # Read/Write Attributes
        self.avatar_data = None  #  URL to the avatar data associated with the enterprise. If the avatarType is URL then value of avatarData should an URL of the image. If the avatarType BASE64 then avatarData should be BASE64 encoded value of the image - int
        self.avatar_type = None  #  Avatar type - URL or BASE64 - int
        self.email = None  #  Email address of the user - int
        self.first_name = None  #  First name of the user - int
        self.last_name = None  #  Last name of the user - int
        self.mobile_number = None  #  Mobile Number of the user - int
        self.password = None  #  User password stored as a hash (SHA-1 encrpted) - int
        self.user_name = None  #  Unique Username of the user. Valid characters are alphabets, numbers and hyphen( - ). - int
        
        self.expose_attribute(local_name=u"avatar_data", remote_name=u"avatarData", attribute_type=int)
        self.expose_attribute(local_name=u"avatar_type", remote_name=u"avatarType", attribute_type=int)
        self.expose_attribute(local_name=u"email", remote_name=u"email", attribute_type=int)
        self.expose_attribute(local_name=u"first_name", remote_name=u"firstName", attribute_type=int)
        self.expose_attribute(local_name=u"last_name", remote_name=u"lastName", attribute_type=int)
        self.expose_attribute(local_name=u"mobile_number", remote_name=u"mobileNumber", attribute_type=int)
        self.expose_attribute(local_name=u"password", remote_name=u"password", attribute_type=int)
        self.expose_attribute(local_name=u"user_name", remote_name=u"userName", attribute_type=int)
        
        # Fetchers
        self.applications = []
        self.applications_fetcher = NUApplicationsFetcher.fetcher_with_object(nurest_object=self, local_name=u"applications")
        self.event_logs = []
        self.event_logs_fetcher = NUEventLogsFetcher.fetcher_with_object(nurest_object=self, local_name=u"event_logs")
        self.virtual_machines = []
        self.virtual_machines_fetcher = NUVirtualMachinesFetcher.fetcher_with_object(nurest_object=self, local_name=u"virtual_machines")
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_object(nurest_object=self, local_name=u"groups")
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)



    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI """

        return u"user"


