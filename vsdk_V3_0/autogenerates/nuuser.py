# -*- coding: utf-8 -*-

"""
NUUser
Object that identifies the user functions

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUApplicationsFetcher
from ..fetchers import NUGroupsFetcher
from bambou import NURESTObject


class NUUser(NURESTObject):
    """ Represents a User object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a User instance

        """
        super(NUUser, self).__init__()

        # Read/Write Attributes
        
        self._user_name = str()
        self._mobile_number = str()
        self._first_name = str()
        self._last_name = str()
        self._avatar_type = str()
        self._avatar_data = str()
        self._password = str()
        self._email = str()
        
        self.expose_attribute(local_name=u"user_name", remote_name=u"userName", attribute_type=str)
        self.expose_attribute(local_name=u"mobile_number", remote_name=u"mobileNumber", attribute_type=str)
        self.expose_attribute(local_name=u"first_name", remote_name=u"firstName", attribute_type=str)
        self.expose_attribute(local_name=u"last_name", remote_name=u"lastName", attribute_type=str)
        self.expose_attribute(local_name=u"avatar_type", remote_name=u"avatarType", attribute_type=str, choices=[u'COMPUTEDURL', u'BASE64', u'URL'])
        self.expose_attribute(local_name=u"avatar_data", remote_name=u"avatarData", attribute_type=str)
        self.expose_attribute(local_name=u"password", remote_name=u"password", attribute_type=str)
        self.expose_attribute(local_name=u"email", remote_name=u"email", attribute_type=str)
        
        # Fetchers
        
        self.vms = []
        self.vms_fetcher = NUVirtualMachinesFetcher.fetcher_with_entity(entity=self, local_name=u"vms")
        
        self.apps = []
        self.apps_fetcher = NUApplicationsFetcher.fetcher_with_entity(entity=self, local_name=u"apps")
        
        self.groups = []
        self.groups_fetcher = NUGroupsFetcher.fetcher_with_entity(entity=self, local_name=u"groups")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_user_name(self):
        """ Get attribute user_name

            Unique Username of the user. Valid characters are alphabets, numbers and hyphen( - ).

        """
        return self._user_name

    def _set_user_name(self, value):
        """ Set attribute user_name

            Unique Username of the user. Valid characters are alphabets, numbers and hyphen( - ).

        """
        self._user_name = value

    user_name = property(_get_user_name, _set_user_name)
    
    def _get_mobile_number(self):
        """ Get attribute mobile_number

            Mobile Number of the user

        """
        return self._mobile_number

    def _set_mobile_number(self, value):
        """ Set attribute mobile_number

            Mobile Number of the user

        """
        self._mobile_number = value

    mobile_number = property(_get_mobile_number, _set_mobile_number)
    
    def _get_first_name(self):
        """ Get attribute first_name

            First name of the user

        """
        return self._first_name

    def _set_first_name(self, value):
        """ Set attribute first_name

            First name of the user

        """
        self._first_name = value

    first_name = property(_get_first_name, _set_first_name)
    
    def _get_last_name(self):
        """ Get attribute last_name

            Last name of the user

        """
        return self._last_name

    def _set_last_name(self, value):
        """ Set attribute last_name

            Last name of the user

        """
        self._last_name = value

    last_name = property(_get_last_name, _set_last_name)
    
    def _get_avatar_type(self):
        """ Get attribute avatar_type

            Avatar type - URL or BASE64 Possible values are URL, BASE64, COMPUTEDURL, .

        """
        return self._avatar_type

    def _set_avatar_type(self, value):
        """ Set attribute avatar_type

            Avatar type - URL or BASE64 Possible values are URL, BASE64, COMPUTEDURL, .

        """
        self._avatar_type = value

    avatar_type = property(_get_avatar_type, _set_avatar_type)
    
    def _get_avatar_data(self):
        """ Get attribute avatar_data

            URL to the avatar data associated with the enterprise. If the avatarType is URL then value of avatarData should an URL of the image. If the avatarType BASE64 then avatarData should be BASE64 encoded value of the image

        """
        return self._avatar_data

    def _set_avatar_data(self, value):
        """ Set attribute avatar_data

            URL to the avatar data associated with the enterprise. If the avatarType is URL then value of avatarData should an URL of the image. If the avatarType BASE64 then avatarData should be BASE64 encoded value of the image

        """
        self._avatar_data = value

    avatar_data = property(_get_avatar_data, _set_avatar_data)
    
    def _get_password(self):
        """ Get attribute password

            User password stored as a hash (SHA-1 encrpted)

        """
        return self._password

    def _set_password(self, value):
        """ Set attribute password

            User password stored as a hash (SHA-1 encrpted)

        """
        self._password = value

    password = property(_get_password, _set_password)
    
    def _get_email(self):
        """ Get attribute email

            Email address of the user

        """
        return self._email

    def _set_email(self, value):
        """ Set attribute email

            Email address of the user

        """
        self._email = value

    email = property(_get_email, _set_email)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"user"
