# -*- coding: utf-8 -*-

"""
NUVRS
System Monitoring details for VRS connected to VSC or HSC

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""

from ..fetchers import NUHSCsFetcher
from ..fetchers import NUMultiNICVPortsFetcher
from ..fetchers import NUVirtualMachinesFetcher
from ..fetchers import NUPortStatussFetcher
from ..fetchers import NUJobsFetcher
from ..fetchers import NUVPortsFetcher
from ..fetchers import NUAlarmsFetcher
from ..fetchers import NUVSCsFetcher
from bambou import NURESTObject


class NUVRS(NURESTObject):
    """ Represents a VRS object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a VRS instance

        """
        super(NUVRS, self).__init__()

        # Read/Write Attributes
        
        self._last_state_change = str()
        self._management_ip = str()
        self._current_cpu_usage = float()
        self._dynamic = bool()
        self._peak_memory_usage = float()
        self._jsonrpc_connection_state = str()
        self._multi_nicv_port_enabled = bool()
        self._hypervisor_name = str()
        self._uptime = str()
        self._number_of_bridge_interfaces = int()
        self._cluster_node_role = str()
        self._current_memory_usage = float()
        self._hypervisor_identifier = str()
        self._last_event_name = str()
        self._location = str()
        self._peak_cpu_usage = float()
        self._number_of_host_interfaces = int()
        self._role = str()
        self._hypervisor_connection_state = str()
        self._last_event_timestamp = str()
        self._personality = str()
        self._status = str()
        self._product_version = str()
        self._description = str()
        self._last_event_object = str()
        self._address = str()
        self._peer = str()
        self._hypervisor_type = str()
        self._number_of_virtual_machines = int()
        self._name = str()
        self._parent_i_ds = str()
        self._disks = str()
        self._messages = str()
        self._average_cpu_usage = float()
        self._average_memory_usage = float()
        
        self.expose_attribute(local_name=u"last_state_change", remote_name=u"lastStateChange", attribute_type=str)
        self.expose_attribute(local_name=u"management_ip", remote_name=u"managementIP", attribute_type=str)
        self.expose_attribute(local_name=u"current_cpu_usage", remote_name=u"currentCPUUsage", attribute_type=float)
        self.expose_attribute(local_name=u"dynamic", remote_name=u"dynamic", attribute_type=bool)
        self.expose_attribute(local_name=u"peak_memory_usage", remote_name=u"peakMemoryUsage", attribute_type=float)
        self.expose_attribute(local_name=u"jsonrpc_connection_state", remote_name=u"JSONRPCConnectionState", attribute_type=str, choices=[u'DEGRADED', u'DOWN', u'UP', u'ADMIN_DOWN'])
        self.expose_attribute(local_name=u"multi_nicv_port_enabled", remote_name=u"multiNICVPortEnabled", attribute_type=bool)
        self.expose_attribute(local_name=u"hypervisor_name", remote_name=u"hypervisorName", attribute_type=str)
        self.expose_attribute(local_name=u"uptime", remote_name=u"uptime", attribute_type=str)
        self.expose_attribute(local_name=u"number_of_bridge_interfaces", remote_name=u"numberOfBridgeInterfaces", attribute_type=int)
        self.expose_attribute(local_name=u"cluster_node_role", remote_name=u"clusterNodeRole", attribute_type=str, choices=[u'SECONDARY', u'PRIMARY', u'NONE'])
        self.expose_attribute(local_name=u"current_memory_usage", remote_name=u"currentMemoryUsage", attribute_type=float)
        self.expose_attribute(local_name=u"hypervisor_identifier", remote_name=u"hypervisorIdentifier", attribute_type=str)
        self.expose_attribute(local_name=u"last_event_name", remote_name=u"lastEventName", attribute_type=str)
        self.expose_attribute(local_name=u"location", remote_name=u"location", attribute_type=str)
        self.expose_attribute(local_name=u"peak_cpu_usage", remote_name=u"peakCPUUsage", attribute_type=float)
        self.expose_attribute(local_name=u"number_of_host_interfaces", remote_name=u"numberOfHostInterfaces", attribute_type=int)
        self.expose_attribute(local_name=u"role", remote_name=u"role", attribute_type=str, choices=[u'SLAVE', u'MASTER', u'NONE'])
        self.expose_attribute(local_name=u"hypervisor_connection_state", remote_name=u"hypervisorConnectionState", attribute_type=str, choices=[u'DEGRADED', u'DOWN', u'UP', u'ADMIN_DOWN'])
        self.expose_attribute(local_name=u"last_event_timestamp", remote_name=u"lastEventTimestamp", attribute_type=str)
        self.expose_attribute(local_name=u"personality", remote_name=u"personality", attribute_type=str, choices=[u'VRSG', u'VRS', u'HARDWARE_VTEP', u'NONE', u'NSG'])
        self.expose_attribute(local_name=u"status", remote_name=u"status", attribute_type=str, choices=[u'DEGRADED', u'DOWN', u'UP', u'ADMIN_DOWN'])
        self.expose_attribute(local_name=u"product_version", remote_name=u"productVersion", attribute_type=str)
        self.expose_attribute(local_name=u"description", remote_name=u"description", attribute_type=str)
        self.expose_attribute(local_name=u"last_event_object", remote_name=u"lastEventObject", attribute_type=str)
        self.expose_attribute(local_name=u"address", remote_name=u"address", attribute_type=str)
        self.expose_attribute(local_name=u"peer", remote_name=u"peer", attribute_type=str)
        self.expose_attribute(local_name=u"hypervisor_type", remote_name=u"hypervisorType", attribute_type=str)
        self.expose_attribute(local_name=u"number_of_virtual_machines", remote_name=u"numberOfVirtualMachines", attribute_type=int)
        self.expose_attribute(local_name=u"name", remote_name=u"name", attribute_type=str)
        self.expose_attribute(local_name=u"parent_i_ds", remote_name=u"parentIDs", attribute_type=str)
        self.expose_attribute(local_name=u"disks", remote_name=u"disks", attribute_type=str)
        self.expose_attribute(local_name=u"messages", remote_name=u"messages", attribute_type=str)
        self.expose_attribute(local_name=u"average_cpu_usage", remote_name=u"averageCPUUsage", attribute_type=float)
        self.expose_attribute(local_name=u"average_memory_usage", remote_name=u"averageMemoryUsage", attribute_type=float)
        
        # Fetchers
        
        self.hscs = []
        self.hscs_fetcher = NUHSCsFetcher.fetcher_with_entity(entity=self, local_name=u"hscs")
        
        self.multinicvports = []
        self.multinicvports_fetcher = NUMultiNICVPortsFetcher.fetcher_with_entity(entity=self, local_name=u"multinicvports")
        
        self.vms = []
        self.vms_fetcher = NUVirtualMachinesFetcher.fetcher_with_entity(entity=self, local_name=u"vms")
        
        self.monitoringports = []
        self.monitoringports_fetcher = NUPortStatussFetcher.fetcher_with_entity(entity=self, local_name=u"monitoringports")
        
        self.jobs = []
        self.jobs_fetcher = NUJobsFetcher.fetcher_with_entity(entity=self, local_name=u"jobs")
        
        self.vports = []
        self.vports_fetcher = NUVPortsFetcher.fetcher_with_entity(entity=self, local_name=u"vports")
        
        self.alarms = []
        self.alarms_fetcher = NUAlarmsFetcher.fetcher_with_entity(entity=self, local_name=u"alarms")
        
        self.vscs = []
        self.vscs_fetcher = NUVSCsFetcher.fetcher_with_entity(entity=self, local_name=u"vscs")
        
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    
    def _get_last_state_change(self):
        """ Get attribute last_state_change

            Last state change timestamp (in millis).

        """
        return self._last_state_change

    def _set_last_state_change(self, value):
        """ Set attribute last_state_change

            Last state change timestamp (in millis).

        """
        self._last_state_change = value

    last_state_change = property(_get_last_state_change, _set_last_state_change)
    
    def _get_management_ip(self):
        """ Get attribute management_ip

            The management IP of the VRS entity

        """
        return self._management_ip

    def _set_management_ip(self, value):
        """ Set attribute management_ip

            The management IP of the VRS entity

        """
        self._management_ip = value

    management_ip = property(_get_management_ip, _set_management_ip)
    
    def _get_current_cpu_usage(self):
        """ Get attribute current_cpu_usage

            Current CPU usage percentage.

        """
        return self._current_cpu_usage

    def _set_current_cpu_usage(self, value):
        """ Set attribute current_cpu_usage

            Current CPU usage percentage.

        """
        self._current_cpu_usage = value

    current_cpu_usage = property(_get_current_cpu_usage, _set_current_cpu_usage)
    
    def _get_dynamic(self):
        """ Get attribute dynamic

            Flag to indicate it is dynamically configured or not.

        """
        return self._dynamic

    def _set_dynamic(self, value):
        """ Set attribute dynamic

            Flag to indicate it is dynamically configured or not.

        """
        self._dynamic = value

    dynamic = property(_get_dynamic, _set_dynamic)
    
    def _get_peak_memory_usage(self):
        """ Get attribute peak_memory_usage

            Peek memory usage percentage.

        """
        return self._peak_memory_usage

    def _set_peak_memory_usage(self, value):
        """ Set attribute peak_memory_usage

            Peek memory usage percentage.

        """
        self._peak_memory_usage = value

    peak_memory_usage = property(_get_peak_memory_usage, _set_peak_memory_usage)
    
    def _get_jsonrpc_connection_state(self):
        """ Get attribute jsonrpc_connection_state

            The current JSON RPC connection status. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        return self._jsonrpc_connection_state

    def _set_jsonrpc_connection_state(self, value):
        """ Set attribute jsonrpc_connection_state

            The current JSON RPC connection status. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        self._jsonrpc_connection_state = value

    jsonrpc_connection_state = property(_get_jsonrpc_connection_state, _set_jsonrpc_connection_state)
    
    def _get_multi_nicv_port_enabled(self):
        """ Get attribute multi_nicv_port_enabled

            VRS is in Multi-NIC VPORT Mode

        """
        return self._multi_nicv_port_enabled

    def _set_multi_nicv_port_enabled(self, value):
        """ Set attribute multi_nicv_port_enabled

            VRS is in Multi-NIC VPORT Mode

        """
        self._multi_nicv_port_enabled = value

    multi_nicv_port_enabled = property(_get_multi_nicv_port_enabled, _set_multi_nicv_port_enabled)
    
    def _get_hypervisor_name(self):
        """ Get attribute hypervisor_name

            The hypervisor name associated with the VRS.

        """
        return self._hypervisor_name

    def _set_hypervisor_name(self, value):
        """ Set attribute hypervisor_name

            The hypervisor name associated with the VRS.

        """
        self._hypervisor_name = value

    hypervisor_name = property(_get_hypervisor_name, _set_hypervisor_name)
    
    def _get_uptime(self):
        """ Get attribute uptime

            How long the VRS was up.

        """
        return self._uptime

    def _set_uptime(self, value):
        """ Set attribute uptime

            How long the VRS was up.

        """
        self._uptime = value

    uptime = property(_get_uptime, _set_uptime)
    
    def _get_number_of_bridge_interfaces(self):
        """ Get attribute number_of_bridge_interfaces

            Number of bridge interfaces defined in this VRS.

        """
        return self._number_of_bridge_interfaces

    def _set_number_of_bridge_interfaces(self, value):
        """ Set attribute number_of_bridge_interfaces

            Number of bridge interfaces defined in this VRS.

        """
        self._number_of_bridge_interfaces = value

    number_of_bridge_interfaces = property(_get_number_of_bridge_interfaces, _set_number_of_bridge_interfaces)
    
    def _get_cluster_node_role(self):
        """ Get attribute cluster_node_role

            Indicate that the controller associated is primary, secondary or unknown. Possible values are PRIMARY, SECONDARY, NONE, .

        """
        return self._cluster_node_role

    def _set_cluster_node_role(self, value):
        """ Set attribute cluster_node_role

            Indicate that the controller associated is primary, secondary or unknown. Possible values are PRIMARY, SECONDARY, NONE, .

        """
        self._cluster_node_role = value

    cluster_node_role = property(_get_cluster_node_role, _set_cluster_node_role)
    
    def _get_current_memory_usage(self):
        """ Get attribute current_memory_usage

            Current memory usage percentage.

        """
        return self._current_memory_usage

    def _set_current_memory_usage(self, value):
        """ Set attribute current_memory_usage

            Current memory usage percentage.

        """
        self._current_memory_usage = value

    current_memory_usage = property(_get_current_memory_usage, _set_current_memory_usage)
    
    def _get_hypervisor_identifier(self):
        """ Get attribute hypervisor_identifier

            The hypervisor IP (or name) associated with the VRS.

        """
        return self._hypervisor_identifier

    def _set_hypervisor_identifier(self, value):
        """ Set attribute hypervisor_identifier

            The hypervisor IP (or name) associated with the VRS.

        """
        self._hypervisor_identifier = value

    hypervisor_identifier = property(_get_hypervisor_identifier, _set_hypervisor_identifier)
    
    def _get_last_event_name(self):
        """ Get attribute last_event_name

            The last event name from the hypervisor.

        """
        return self._last_event_name

    def _set_last_event_name(self, value):
        """ Set attribute last_event_name

            The last event name from the hypervisor.

        """
        self._last_event_name = value

    last_event_name = property(_get_last_event_name, _set_last_event_name)
    
    def _get_location(self):
        """ Get attribute location

            Identifies the entity to be associated with a location.

        """
        return self._location

    def _set_location(self, value):
        """ Set attribute location

            Identifies the entity to be associated with a location.

        """
        self._location = value

    location = property(_get_location, _set_location)
    
    def _get_peak_cpu_usage(self):
        """ Get attribute peak_cpu_usage

            Peek CPU usage percentage.

        """
        return self._peak_cpu_usage

    def _set_peak_cpu_usage(self, value):
        """ Set attribute peak_cpu_usage

            Peek CPU usage percentage.

        """
        self._peak_cpu_usage = value

    peak_cpu_usage = property(_get_peak_cpu_usage, _set_peak_cpu_usage)
    
    def _get_number_of_host_interfaces(self):
        """ Get attribute number_of_host_interfaces

            Number of host interfaces defined in this VRS.

        """
        return self._number_of_host_interfaces

    def _set_number_of_host_interfaces(self, value):
        """ Set attribute number_of_host_interfaces

            Number of host interfaces defined in this VRS.

        """
        self._number_of_host_interfaces = value

    number_of_host_interfaces = property(_get_number_of_host_interfaces, _set_number_of_host_interfaces)
    
    def _get_role(self):
        """ Get attribute role

            Flag to indicate that VRS-G redundancy state (active/standby/standalone).  Only applicable for gateways. Possible values are MASTER, SLAVE, NONE, .

        """
        return self._role

    def _set_role(self, value):
        """ Set attribute role

            Flag to indicate that VRS-G redundancy state (active/standby/standalone).  Only applicable for gateways. Possible values are MASTER, SLAVE, NONE, .

        """
        self._role = value

    role = property(_get_role, _set_role)
    
    def _get_hypervisor_connection_state(self):
        """ Get attribute hypervisor_connection_state

            The VRS connection state with the hypervisor. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        return self._hypervisor_connection_state

    def _set_hypervisor_connection_state(self, value):
        """ Set attribute hypervisor_connection_state

            The VRS connection state with the hypervisor. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        self._hypervisor_connection_state = value

    hypervisor_connection_state = property(_get_hypervisor_connection_state, _set_hypervisor_connection_state)
    
    def _get_last_event_timestamp(self):
        """ Get attribute last_event_timestamp

            The last event timestamp from the hypervisor.

        """
        return self._last_event_timestamp

    def _set_last_event_timestamp(self, value):
        """ Set attribute last_event_timestamp

            The last event timestamp from the hypervisor.

        """
        self._last_event_timestamp = value

    last_event_timestamp = property(_get_last_event_timestamp, _set_last_event_timestamp)
    
    def _get_personality(self):
        """ Get attribute personality

            VRS personality. Possible values are VRSG, VRS, NSG, NONE, HARDWARE_VTEP, .

        """
        return self._personality

    def _set_personality(self, value):
        """ Set attribute personality

            VRS personality. Possible values are VRSG, VRS, NSG, NONE, HARDWARE_VTEP, .

        """
        self._personality = value

    personality = property(_get_personality, _set_personality)
    
    def _get_status(self):
        """ Get attribute status

            Computed status of the entity. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        return self._status

    def _set_status(self, value):
        """ Set attribute status

            Computed status of the entity. Possible values are UP, DOWN, ADMIN_DOWN, DEGRADED, .

        """
        self._status = value

    status = property(_get_status, _set_status)
    
    def _get_product_version(self):
        """ Get attribute product_version

            Product version supported by this entity.

        """
        return self._product_version

    def _set_product_version(self, value):
        """ Set attribute product_version

            Product version supported by this entity.

        """
        self._product_version = value

    product_version = property(_get_product_version, _set_product_version)
    
    def _get_description(self):
        """ Get attribute description

            Description of the entity.

        """
        return self._description

    def _set_description(self, value):
        """ Set attribute description

            Description of the entity.

        """
        self._description = value

    description = property(_get_description, _set_description)
    
    def _get_last_event_object(self):
        """ Get attribute last_event_object

            The last event object (including metadata) from the hypervisor.

        """
        return self._last_event_object

    def _set_last_event_object(self, value):
        """ Set attribute last_event_object

            The last event object (including metadata) from the hypervisor.

        """
        self._last_event_object = value

    last_event_object = property(_get_last_event_object, _set_last_event_object)
    
    def _get_address(self):
        """ Get attribute address

            The IP of the VRS entity

        """
        return self._address

    def _set_address(self, value):
        """ Set attribute address

            The IP of the VRS entity

        """
        self._address = value

    address = property(_get_address, _set_address)
    
    def _get_peer(self):
        """ Get attribute peer

            The redundant peer id for the current VRS.

        """
        return self._peer

    def _set_peer(self, value):
        """ Set attribute peer

            The redundant peer id for the current VRS.

        """
        self._peer = value

    peer = property(_get_peer, _set_peer)
    
    def _get_hypervisor_type(self):
        """ Get attribute hypervisor_type

            The hypervisor type associated with the VRS.

        """
        return self._hypervisor_type

    def _set_hypervisor_type(self, value):
        """ Set attribute hypervisor_type

            The hypervisor type associated with the VRS.

        """
        self._hypervisor_type = value

    hypervisor_type = property(_get_hypervisor_type, _set_hypervisor_type)
    
    def _get_number_of_virtual_machines(self):
        """ Get attribute number_of_virtual_machines

            Number of VMs defined in this VRS.

        """
        return self._number_of_virtual_machines

    def _set_number_of_virtual_machines(self, value):
        """ Set attribute number_of_virtual_machines

            Number of VMs defined in this VRS.

        """
        self._number_of_virtual_machines = value

    number_of_virtual_machines = property(_get_number_of_virtual_machines, _set_number_of_virtual_machines)
    
    def _get_name(self):
        """ Get attribute name

            Identifies the entity with a name.

        """
        return self._name

    def _set_name(self, value):
        """ Set attribute name

            Identifies the entity with a name.

        """
        self._name = value

    name = property(_get_name, _set_name)
    
    def _get_parent_i_ds(self):
        """ Get attribute parent_i_ds

            Holds VRS controllers ids

        """
        return self._parent_i_ds

    def _set_parent_i_ds(self, value):
        """ Set attribute parent_i_ds

            Holds VRS controllers ids

        """
        self._parent_i_ds = value

    parent_i_ds = property(_get_parent_i_ds, _set_parent_i_ds)
    
    def _get_disks(self):
        """ Get attribute disks

            Set of disk usage details.

        """
        return self._disks

    def _set_disks(self, value):
        """ Set attribute disks

            Set of disk usage details.

        """
        self._disks = value

    disks = property(_get_disks, _set_disks)
    
    def _get_messages(self):
        """ Get attribute messages

            An array of degraded messages.

        """
        return self._messages

    def _set_messages(self, value):
        """ Set attribute messages

            An array of degraded messages.

        """
        self._messages = value

    messages = property(_get_messages, _set_messages)
    
    def _get_average_cpu_usage(self):
        """ Get attribute average_cpu_usage

            Average CPU usage percentage.

        """
        return self._average_cpu_usage

    def _set_average_cpu_usage(self, value):
        """ Set attribute average_cpu_usage

            Average CPU usage percentage.

        """
        self._average_cpu_usage = value

    average_cpu_usage = property(_get_average_cpu_usage, _set_average_cpu_usage)
    
    def _get_average_memory_usage(self):
        """ Get attribute average_memory_usage

            Average memory usage percentage.

        """
        return self._average_memory_usage

    def _set_average_memory_usage(self, value):
        """ Set attribute average_memory_usage

            Average memory usage percentage.

        """
        self._average_memory_usage = value

    average_memory_usage = property(_get_average_memory_usage, _set_average_memory_usage)
    
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"vrs"
