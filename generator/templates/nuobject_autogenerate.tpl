# -*- coding: utf-8 -*-

"""
NU{{ model['name'] }}
{{ model['description'] }}

This file has been autogenerated and should not be modified.
Author Christophe Serafin <christophe.serafin@alcatel-lucent.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""
{% for relation in model['relations'] %}
from ..fetchers import NU{{ relation['plural_name'] }}Fetcher{% endfor %}
from bambou import NURESTObject{% if model['import_time'] %}
from time import time{% endif %}


class NU{{ model['name'] }}(NURESTObject):
    """ Represents a {{ model['name'] }} object

        IMPORTANT: This file has been autogenerated. Do not override it !

    """

    def __init__(self, **kwargs):
        """ Initializes a {{ model['name'] }} instance

        """
        super(NU{{ model['name'] }}, self).__init__()

        # Read/Write Attributes
        {% for name, attribute in model['properties'].iteritems() %}
        self._{{ attribute['local_name']|lower }} = {{ attribute['local_type'] }}(){% endfor %}
        {% for name, attribute in model['properties'].iteritems() %}
        self.expose_attribute(local_name=u"{{ attribute['local_name']|lower }}", remote_name=u"{{ attribute['remote_name'] }}", attribute_type={{ attribute['local_type'] }}{% if attribute['type'] == 'enum' %}, choices={{ attribute['enum'] | trim}}{% endif %}){% endfor %}
        {% if model['relations']|length > 0 %}
        # Fetchers
        {% for relation in model['relations'] %}
        self.{{ relation['resource_name'] }} = []
        self.{{ relation['resource_name'] }}_fetcher = NU{{ relation['plural_name'] }}Fetcher.fetcher_with_entity(entity=self, local_name=u"{{ relation['resource_name'] }}")
        {% endfor %}{% endif %}
        for key, value in kwargs.iteritems():
            if hasattr(self, key):
                setattr(self, key, value)

    # Properties
    {% for name, attribute in model['properties'].iteritems() %}
    def _get_{{ attribute['local_name'] }}(self):
        """ Get attribute {{ attribute['local_name'] }}

            {{ attribute['description'] }}

        """
        return self._{{ attribute['local_name'] }}

    def _set_{{ attribute['local_name'] }}(self, value):
        """ Set attribute {{ attribute['local_name'] }}

            {{ attribute['description'] }}

        """
        self._{{ attribute['local_name'] }} = value

    {{ attribute['local_name'] }} = property(_get_{{ attribute['local_name'] }}, _set_{{ attribute['local_name'] }})
    {% endfor %}
    # Methods

    @classmethod
    def get_remote_name(cls):
        """ Remote name that will be used to generates URI

        """
        return u"{{ model['remote_name'] }}"

