# -*- coding: utf-8 -*-

from monolithe.utils.parse import ParsingUtils
from monolithe.utils.vsdk import VSDKUtils
from monolithe.utils.printer import Printer


class MonolitheObject(object):
    """ Defines an object

    """
    def __init__(self):
        """ Initializes a model object

            Example:
                name: EnterpriseNetwork
                instance_name: enterprise_network
                plural_name: EnterpriseNetworks
                instance_plural_name: enterprise_networks
                remote_name: enterprisenetwork
                resource_name: enterprisenetworks
                package: network
        """
        self.description = None
        self.name = None  # The original name of the object
        self.instance_name = None  # Name of the object as an instance
        self.plural_name = None  # the original name in plural
        self.instance_plural_name = None  # Name of the object as an instance of array or fetcher
        self.remote_name = None  # The remote name of the object
        self.resource_name = None  # The name of the resource used in URI
        self.attributes = []  # A list of all properties of the object
        self.apis = {'children': {}, 'parents': {}, 'self': {}}  # A list of all apis available for this model

        self.has_time_attribute = False  # A boolean to flag if the model has a time attribute

    def from_specification(self, specification):
        """ Fill the current object with information from the specification

        """
        self.description = specification['model']['description']

        entity_name = specification['model']['entityName']

        self.name = ParsingUtils.get_correct_name(entity_name)
        self.instance_name = VSDKUtils.get_python_name(entity_name)
        self.plural_name = VSDKUtils.get_plural_name(entity_name)
        self.instance_plural_name = VSDKUtils.get_python_name(self.plural_name)
        self.remote_name = specification['model']['RESTName']
        self.resource_name = specification['model']['resourceName']

        self.apis['children'] = self._get_apis('children', specification['apis'])
        self.apis['parent'] = self._get_apis('parents', specification['apis'])
        self.apis['self'] = self._get_apis('self', specification['apis'])

        self.attributes = self._get_attributes(specification['model']['attributes'])

    def _get_apis(self, api_name, apis):
        """ Process apis for the given model

            Args:
                model: the model processed
                apis: the list of apis availble for the current swagger model
                relations: dict containing all relations between resources

        """

        model_apis = {}
        for path, specification_api in apis[api_name].iteritems():

            model_api = MonolitheObjectAPI()
            model_api.from_specification_api(path, specification_api)

            model_apis[path] = model_api

        return ParsingUtils.order(model_apis)

    def _get_attributes(self, attributes):
        """

        """
        model_attributes = []
        for attribute_name, attribute_info in attributes.iteritems():
            model_attribute = MonolitheObjectAttribute()
            model_attribute.from_specification_attribute(attribute_name, attribute_info)

            if not model_attribute.ignored:
                model_attributes.append(model_attribute)

        return model_attributes


class MonolitheObjectAttribute(object):
    """ Define an attribute of an object

    """
    def __init__(self):
        """ Define an attribute

            Example:
                remote_name: associatedGatewayID
                local_name: associated_gateway_id
                remote_type: String
                local_type: str
        """
        # Main attributes
        self.description = None
        self.remote_name = None
        self.local_name = None
        self.remote_type = None
        self.local_type = None

        # Other attributes
        self.allowed_chars = None
        self.allowed_choices = None
        self.autogenerated = False
        self.availability = None
        self.creation_only = False
        self.default_order = False
        self.default_value = None
        self.filterable = None
        self.format = None
        self.max_length = None
        self.max_value = None
        self.min_length = None
        self.min_value = None
        self.orderable = False
        self.readonly = False
        self.required = False
        self.unique = False

        # Specific attributes
        self.ignored = False

    def from_specification_attribute(self, attribute_name, attribute_info):
        """

        """
        self.remote_name = attribute_name
        self.local_name = ParsingUtils.get_correct_attribute_name(attribute_name)

        self.description = attribute_info['description']
        self.type = attribute_info['type']
        self.required = attribute_info['required']
        self.unique = attribute_info['unique']
        self.filterable = attribute_info['filterable']
        self.read_only = attribute_info['readOnly']
        self.orderable = attribute_info['orderable']
        self.creation_only = attribute_info['creationOnly']
        self.autogenerated = attribute_info['autogenerated']
        self.format = attribute_info['format']
        self.min_length = attribute_info['minLength']
        self.max_length = attribute_info['maxLength']
        self.min_value = attribute_info['minValue']
        self.max_value = attribute_info['maxValue']
        self.allowed_chars = attribute_info['allowedChars']
        self.allowed_choices = attribute_info['allowedChoices']
        self.default_order = attribute_info['defaultOrder']

        self.local_type = VSDKUtils.get_python_type_name(type_name=self.type)

        if self.local_type == 'time':
            self.has_time_attribute = True

        if not self.local_type:
            # Simply ignore attributes otherwise...
            # CS 02/06/2015
            # Ignoring attribute enterprise of object InfrastructurePortProfile
            # Ignoring attribute gateway of object InfrastructureGatewayProfile
            # Ignoring attribute enterprise of object InfrastructureGatewayProfile
            self.ignored = True
            Printer.log("Deliberately ignoring attribute %s because of type %s" % (self.remote_name, self.type))


class MonolitheObjectAPI(object):
    """ Describe an object API

    """
    def __init__(self):
        """ Defines an API

            Example:
                path: /enterprises/id/gateway
                resource_name : enterprisenetworks
                remote_name : enterprisenetwork
                plural_name : EnterpriseNetworks
                instance_plural_name : enterprise_networks

        """
        self.path = None
        self.resource_name = None
        self.remote_name = None
        self.plural_name = None
        self.instance_plural_name = None

        self.operations = []

    def from_specification_api(self, path, specification_api):
        """

        """
        self.path = path
        self.resource_name = specification_api['resourceName']
        self.remote_name = specification_api['RESTName']

        # TODO-CS : Add entity_name of the related entity
        # TODO-CS : Compute plural_name and instance_plural_name
        # entity_name = ???
        # self.plural_name = VSDKUtils.get_plural_name(entity_name)
        # self.instance_plural_name = VSDKUtils.get_python_name(model_api.plural_name)

        for operation in specification_api['operations']:
            model_operation = MonolitheObjectAPIOperation()
            model_operation.from_specification_api_operation(operation)

            self.operations.append(model_operation)


class MonolitheObjectAPIOperation(object):
    """ Describe an API operation

    """
    def __init__(self):
        """ Defines an API

            Example:
                method: GET

        """
        self.method = None
        self.availability = None

    def from_specification_api_operation(self, operation):
        """

        """
        self.method = operation['method']
        self.availability = operation['availability']
